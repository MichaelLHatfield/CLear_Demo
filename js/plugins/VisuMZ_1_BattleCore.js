//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.65;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.65] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x2546c9=_0x5d1f;function _0x1506(){const _0x50b270=['StateIconOffsetX','isSpinning','process_VisuMZ_BattleCore_BaseTroops','EnableSoftCap','siDrH','IdCYF','battleInjectPrep','ActSeq_Mechanics_SwapWeapon','SmoothImage','action','DePFX','CTB','command236','EnKqy','sort','uaTgw','visible','Sprite_StateIcon_updateFrame','iconHeight','qZxZF','HelpFight','isBattleCoreTargetScope','changeBattlebacks','setSTBExploited','%1StartBattleJS','addCombatLogCommand','ActionSkillMsg1','gainCurrentActionsFTB','STRUCT','refreshStatusWindow','_autoBattleWindow','createAllWindows','Duration','createEnemyNameContainer','displayMiss','setHue','battleMove','ARRAYJSON','loadSystem','rAntZ','updateBattlerContainer','removeActor','VariableHeal','removeAnimation','OqQid','DisplayAction','doesPageHaveOnceParallelStart','updateVisibility','Exploiter','isMoving','process_VisuMZ_BattleCore_PluginParams','FocusY','includes','isSkillItemWindowsMiddle','changeCtbChargeTime','createActionSequenceProjectile','_animationContainer','startSkew','isAutoBattle','eraseState','EfqKN','Scene_Battle_startEnemySelection','clearDamagePopup','PostStartTurnJS','performAttackSlot','EscapeSuccess','createEffectActionSet','createUIContainer','TStyy','ParseClassNotetags','TpbActiveChangeEnabled','MessageWait','freezeFrame','SkillItemMiddleLayout','setupRgbSplitImpactFilter','JxDmW','isETB','isDeathStateAffected','Window_BattleLog_performAction','Scene_Battle_windowAreaHeight','MKlfH','counterAttack','skillItemWindowRectBorderStyle','isQueueOptionsMenu','Vkmok','makeDamageValue','Game_Battler_onBattleStart','removeChild','canAttack','targetActionSet','alterCost','checkSceneBattleTransitionable','Scene_Party','Game_Action_needsSelection','wkWIa','VisuMZ_2_BattleSystemCTB','min','_tpbSceneChangeCacheActor','popupDamage','SkewY','tpWap','ScaleDown','isATB','PreStartActionJS','currentAction','VisuMZ_2_BattleSystemATB','isAppeared','_battleCoreForcedElements','_preemptive','logActionList','addAutoBattleCommands','Window_BattleLog_performReflection','_svBattlerSprite','hpAffected','aZOJp','Scene_Boot_onDatabaseLoaded','maxTp','performCastAnimation','hardDamageCap','smooth','NameLegacy','_uiContainer','gFyqG','initBattlePortrait','applyEasing','spell','effects','svBattlerName','HpGaugeOffsetX','Game_BattlerBase_die','all\x20targets','EscapeFail','clearBattleCoreData','moveBattlerHomeToPoint','arRedRate','_onceParallelInterpreters','ActSeq_ChangeAngle','battleSpriteSkew','vUuJH','ActSeq_Impact_TimeScale','iTIQy','weaponImageId','damageOffsetY','LUaEJ','inputting','DamageType%1','PjafI','updateBattlebackBitmap2','addAttackCommand','BreakShields','UdtgU','stateRate','xoXDP','isAlwaysVisible','filter','fQFQh','victory','ShowFailure','recoverAll','battleCoreResumeLaunchBattle','Variable','extendTroopMembers','performEvasion','AddHpGaugeOption','updatePhase','vSCoT','isCustomActionSequence','_back2Sprite','refreshBattlerMotions','drawTextTopAligned','qODFp','createHpGaugeSprite','evaded','message2','qauEX','canGuard','MJQDt','KEPFc','command357','value','Mechanics','missile','Game_Battler_onBattleEnd','Game_Action_itemEffectAddNormalState','repositionEnemiesByResolution','NameAlwaysSelectOnly','battleCamera','startSpin','wZHdF','_currentActor','uWFrG','currentValue','visualHpGauge','Game_Interpreter_updateWaitMode','scope','ScaleToFit','Wave','requestRefresh','oToni','okButtonText','updateBattlebackBitmap1','setActiveWeaponSet','tone','battleMembers','hide','OraHA','RZzfv','trim','EgLNS','ztRkq','getFullActionsPTB','BBfFJ','CommandAddAutoBattle','enemyNames','isBattlerFlipped','IconStypeNorm','stateMotionIndex','Nvynt','processAnimationRequests','VisuMZ_2_DragonbonesUnion','HelpSkillType','PostDamageAsUserJS','waitForAnimation','checkTpbInputOpen','preemptive','ParseWeaponNotetags','updateBattlebackBitmap','EEHDZ','battleCameraData','Game_BattlerBase_eraseState','Width','+%1\x20MP','ActSeq_Camera_FocusPoint','Scale','_flashColor','startActorSelection','Scene_Battle_onEnemyCancel','rgFBt','isMagicSkill','wjjXZ','getAttackMotionSlot','endAction','Scene_Battle_stop','alterChange','alive\x20enemies\x20not\x20target','actor%1-portrait','ActSeq_Movement_WaitForSkew','CqIfc','createHelpWindowBattleCore','Scene_Battle_partyCommandWindowRect','autoBattleStyle','createEnemyNames','dHGrr','startOpacity','displayChangedBuffs','allowRandomSpeed','Sprite_Actor_updateShadow','popBaseLine','criticalHitRate','VisuMZ_1_ElementStatusCore','ApplyImmortal','_growDuration','animationShouldMirror','charging','ActSeq_Animation_CastAnimation','Game_Party_removeActor','randomInt','addLoadListener','displayTpDamage','_damageContainer','xcpGD','ZkFNm','ShowSubstitute','Scene_Battle_helpWindowRect','commandSymbol','YBaCx','Scene_Battle_terminate','destroy','PostEndBattleJS','boxHeight','process_VisuMZ_BattleCore_DamageStyles','process_VisuMZ_BattleCore_jsFunctions','PreStartTurnJS','NameOffsetY','CommonEventID','CounterPlayback','OZlKw','createTargetsJS','Enable','iconWidth','isDamagePopupRequested','helpAreaHeight','Game_Battler_performEvasion','qkgBd','QRLbS','actionEffect','dAcaI','CreateCommonEventKeys','aWPut','WaitForZoom','onSkewEnd','unchanged','alterPriority','StepDistanceX','dead\x20actors','StepDuration','extraPositionY','WaitForJump','_interpreter','deathStateId','FrontViewSelect','_appeared','finishActorInput','canUseItemCommand','ConvertParams','OffsetY','removeOnceParallelInterpreter','isEscapeCommandEnabled','applyFreezeMotionFrames','BattleManager_startAction','update','backColor','ScqfB','Window_BattleLog_popBaseLine','lsWNH','FaceDirection','transform','_damagePopupArray','measureTextWidth','IkQRW','endAnimation','refreshCursor','commandFight','parameters','updateMotionCount','currentExt','setVisibleUI','Game_Actor_makeActionList','magicSkills','setupNegativeImpactFilter','Reveal','onFloatEnd','NqsEQ','autoSelectPriority','_allTargets','pattern','font','YywAN','WaitForSkew','LastSelected','commandOptions','QCscB','isAttack','showHelpWindow','onGrowEnd','mainSprite','performRecovery','hHTvg','EasingType','startMove','_targets','refreshMotion','weapons','voILj','endBattle','_active','dimColor1','ActSeq_Skew_WaitForSkew','VisuMZ_4_CombatLog','fnordAddedStates','createBattleFieldContainer','XPActorDefaultHeight','ActSeq_Impact_ZoomBlurTargetCenter','%1RegenerateJS','_additionalSprites','allBattleMembers','battleCorePreBattleCommonEvent','ActSeq_Movement_WaitForOpacity','clearForcedGameTroopSettingsBattleCore','ZwzzL','updateUiContainerPosition','autoBattleAtStart','ActiveTpbOptionsMessage','createInnerPortrait','SkillItemStandardCols','831915DxvXDX','index','makeTargetSelectionMoreVisible','GzeVN','currentClass','_battler','_customDamageFormula','TpbGaugeOffsetX','BattleManager_selectNextCommand','JS\x20BATTLE\x20DEFEAT','ggonR','oTeJy','BWZtq','PostStartActionJS','ActSeq_Mechanics_FtbAction','useDigitGrouping','RvTFp','setupBattlebackBattleCore','BattleManager_makeActionOrders','isImmortal','setBattlerMotionTrailData','UVSXq','_targetFloatHeight','alterActionCostPTB','flEVH','_emptyBitmap','Window_BattleLog_refresh','_surprise','dvBna','needsSelection','Game_Battler_performDamage','plCvs','vMaxC','ActSeq_Mechanics_Immortal','MTVtu','waitForOpacity','ext','notFocusValid','updateCallMenu','alive\x20opponents\x20not\x20target','processPostBattleCommonEvents','playEnemyDamage','Destination','elNvW','loadSvActor','mainFontSize','fHarp','ActSeq_Mechanics_OtbOrder','setBackgroundType','ActSeq_Element_NullElements','atbInterrupt','EVAL','NRvqo','#%1','battleJump','NBezu','Sprite_Battler_update','casting','performWeaponAnimation','AUTO\x20BATTLE','_animation','YPStr','Scene_Battle_createActorCommandWindow','makeTargetsBattleCore','lineRect','isOptionsCommandEnabled','DTB','initElementStatusCore','ATK','Interrupt','autoBattleWindowRect','battleback2Name','rXAkb','jdRRS','Override','battleAnimation','YwMeq','selectNextActor','chantStyle','maxCols','dead\x20opponents','addBuff','FaceAway','applyBattleCoreJS','encounterList','bvRTL','processBattleCoreJS','addChildToUiContainer','updateShadow','changeCtbCastTime','isEffecting','GpSyj','_floatDuration','Amp','drawLineText','_homeEasing','troop','toUpperCase','getItemDamageAmountTextOriginal','Laszu','isOkEnabled','startBattle','updateOpacity','isClicked','MDF','lHlYk','AnimationID','createCancelButton','Scene_Map_updateCallMenu','myTsu','_multipliers','canAttackBattleCore','_motionCount','canEscape','NameAlwaysHidden','constructor','refreshDimmerBitmap','criticalHitFlat','ActionSkillMsg2','displayBattleCoreTransitionErrorMsg','_text','cQBCF','EmergeText','ActSeq_Impact_TimeStop','WzHeo','JS\x20%1END\x20BATTLE','TextColor','ShowWeapon','animationId','drawItemStyleIcon','ActSeq_Movement_HomeMoveToPoint','Game_Actor_equips','HUgDY','onOpacityEnd','CFLXR','vlaUJ','isSideView','BHllr','JUJjX','PreDamageAsUserJS','svBattlerAnchorY','LPorM','rqYwn','ActSeq_Element_AddElements','moveToStartPositionBattleCore','slhnz','clearOnceParallelInterpreters','extraHeight','PopupDuration','IxdtL','isFloating','StatusWindowAttachmentBackOffsetY','move','ftuMA','loadSvEnemy','TextAlign','setHorrorEffectSettings','_tpbNeedsPartyCommand','addChildToBack','AS\x20USER','freezeMotion','getItemDamageAmountLabelOriginal','_offsetY','createMainSprite','Fbegj','2ZytGta','_cache','addNewState','skill','lzWFq','_regionBattleback2','createSeparateDamagePopups','_frame','BackColor','QlOzR','ITEM','updateAngleCalculations','pointX','HJLOe','VisuMZ_2_BattleSystemBTB','clXhx','ActSeq_Horror_GlitchCreate','addEscapeCommand','isCertainHit','tHAlN','rgYvv','shadow','applyTargetFilters','QSjCn','applyResultSwitches','round','battlerShadowScaleX','changeWeather','isBattleSys','_actorSprites','StatusWindowSkinFilename','BDNyg','nTTmj','PartyCmd','SFRFu','isItem','blt','qxsRt','chant','damageStyle','addSingleSkillCommands','ParseEnemyNotetags','isJumping','xbBNq','isHidden','XdREr','map','kwoQJ','Index','autoBattle','windowAreaHeight','APIpu','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','loop','dEKhq','RQBRk','displayAddedStates','fJupt','pow','Game_Actor_setup','updatePadding','displayRemovedStates','KsIKV','dead','VisuMZ_1_SkillsStatesCore','performSubstitute','skillWindowRect','vkbUp','FlashDuration','gVKJG','autoBattleUseSkills','revertTpbCachedActor','MotionType','regenerateAll','updateStatusWindowPosition','ELTkb','getHardDamageCap','_isBattlerFlipped','CmdTextAlign','BattleSystemBTB','battlelog','gmjvI','battleCommands','KbwdC','FOrQK','ParseItemNotetags','RkNLs','_battleField','MAT','nBWzR','_visualHpGauge_JustDied','ATTACK','finishActionSet','_forceAction','match','zmCzg','_motionType','checkShowHideSwitchNotetags','LVerW','EumyZ','iiPBW','forceEscapeSprite','MdWoy','origin','IvDUO','_frontAttachmentSprite','yCsKo','setEventCallback','concat','ActionEffect','magicReflection','hNySy','_angleEasing','frameCount','gSpEg','_branch','8851365HUjclt','zLumk','xoXGN','JiYkF','ArRedRate','moveToStartPosition','OKoqr','getBattlePortrait','isSceneChanging','item','ngbjK','updateLink','prepareBorderActor','DefeatEvent','maxLines','onAllActionsEnd','tpbCommandFight','_skewX','escape','waitForJump','updateCustomActionSequence','WHyVu','_commonEventIDs','usePremadeActionSequence','_angleDuration','Flsba','stop','performAttack','HTBzP','createCommandVisibleJS','_battleCoreAddedElements','splice','CLfvW','isAnimationShownOnBattlePortrait','_growX','performMiss','WaitForScale','extraPositionX','euxqH','JbWoB','Targets','isAlive','AnchorY','isPartyTpbInputtable','jWZpz','list','singleSkill','Armor-%1-%2','xHUde','drawItemImageListStyle','zoomDuration','jpZHi','ActSeq_Mechanics_PtbAlterCost','_targetSkewY','ScaleX','Parhu','performReflection','ARRAYEVAL','performJump','lOJVu','requestPointAnimation','guJIG','textSizeEx','missed','ptFBA','jxBVh','mCLqd','messageSpeed','sMqaF','gainCurrentActionsETB','jqKTp','CGqFa','faceRect','SqcoL','makeEscapeRatio','Rate','addGuardCommand','AddOption','_targetHomeX','ActSeq_Movement_Spin','calcWindowHeight','PopupShiftY','_eventId','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','user','xjTNf','TcBRY','split','oQXFa','HelpEscape','formula','isPreviousScene','requestDragonbonesAnimation','adjustPosition','opacityStart','BattleEndEvent','PostStartBattleJS','flashDuration','Game_Battler_clearDamagePopup','createEmptyBitmap','WEAPON\x20SWAP','Window_ActorCommand_setup','startEnemySelection','checkAutoCustomActionSequenceNotetagEffect','_damages','_flinched','performActionStart','#ffffff','onBattleStartOnceParallels','TimeScale','KHkeR','drawItemBackground','addPartyCommand','isFrameVisible','terminate','RmyYH','isChangingOpacity','ActSeq_Set_TargetActionSet','_homeWholeDuration','isNonSubmenuCancel','isGrowing','svAnchorY','ccGJd','ActSeq_Motion_PerformAction','initMembersBattleCore','kmPMz','CDuJP','Sprite_Battler_damageOffsetY','AXDKt','getNextDamagePopup','_autoBattle','BattleSystemSTB','_targetAngle','AutoBattleBgType','Window_BattleLog_displayCritical','startPartyCommandSelection','_flipScaleX','RevertAngle','ActSeq_Mechanics_WaitForEffect','command301_PreBattleEvent','Game_BattlerBase_canGuard','prepareCustomActionSequence','equips','XgpFQ','setActiveWeaponSlot','vGBMm','Sprite_Actor_setActorHome','drawItemStyleIconText','BattleManager_isTpbMainPhase','_motion','front\x20center','canMove','PrioritySortActive','VTefd','aAZCV','cameraOffsetDuration','ShowReflect','cApdS','subject','ubHIW','floor','ANbLP','qkSWD','ActSeq_Mechanics_VariablePopup','onRegeneratePlayStateAnimation','Window_ActorCommand_initialize','_padding','displayItemMessage','getDualWieldTimes','sliceMin','jmZYB','setFrame','performFlinch','JS\x20%1REGENERATE','removedBuffs','TbEwa','qRhbM','code','removeStatesAuto','jump','HitRate','ActSeq_Camera_WaitForCamera','VisuMZ_2_WeaponSwapSystem','_duration','createActorCommandWindow','CalcActionSpeedJS','VIsHK','bgType','Battleback','innerHeight','registerCommand','VisuMZ_3_SideviewBattleUI','stbGainInstant','children','updateHomeMove','nmKZy','callOkHandler','ActSeq_Projectile_Icon','rcVvF','fQzPI','isOptionsCommandAdded','helpWindowRect','setHelpWindow','xHorq','BattleManager_cancelActorInput','ActSeq_Mechanics_OnceParallel','bitmap','wfyOZ','Scene_Battle_startPartyCommandSelection','adjustWeaponSpriteOffset','ActSeq_Movement_HomeMoveToTarget','EAtBl','fight','OIoSD','ActSeq_Movement_MoveBy','clearHorrorEffects','nameY','isBattleTest','startDamagePopup','getBattlePortraitOffsetX','mpDamageFmt','makeSpeed','removeBuff','status','_waitCount','RnHfA','itemRect','JS\x20%1DAMAGE\x20%2','ViuRm','battlerName','battler','rgSGK','PostEndActionJS','skillId','mnFua','isCustomBattleScope','DjVvw','HxAfn','isEnemy','ActSeq_BattleLog_WaitForBattleLog','CmdIconOptions','collapse','IgQxW','gDCLq','jJmls','displayFailure','opponentsUnit','CreateActionSequenceTargets','byvIf','getStypeIdWithName','_actor','RssTs','_enemy','Damage','FLepN','setActionState','WaitForFloat','isOTB','QOpVd','forceAction','AutoBattle','guard','zNMpI','PjNqK','isAutoBattleCommandAdded','_methods','PostDamageJS','refreshRequest','Scene_Battle_createPartyCommandWindow','isBusy','default','motionSpeed','ArRedFlat','ActSeq_Mechanics_EnemyEscape','prev\x20target','WaitForProjectile','fjiMA','cameraClamp','faceWidth','playReflection','iIBQO','EHBKy','waitForNewLine','itemTextAlign','evalDamageFormulaBattleCore','actorCommandSingleSkill','drawEnemyName','create','clearBattleRefreshRequest','isPreviousSceneBattleTransitionable','ShowCurrentState','BindCommonEventKeysForGroup','Game_Battler_forceAction','FUNC','bfOYF','getNextSubjectFromPool','setSvBattlerSprite','PreStartBattleJS','startTpbTurn','qDZzO','applyGuard','actorId','ActSeq_Mechanics_TextPopup','ActSeq_Mechanics_RemoveBuffDebuff','Scene_Battle_onEnemyOk','weatherPower','AntpX','_skillIDs','createTroopNote','updateAttachmentSprites','Shadow','ActSeq_Movement_WaitForScale','EscapeFailureJS','requestMotionRefresh','numRepeats','JS\x20%1END\x20TURN','aliveMembers','_lastRegenFrameCount','isOpen','some','updateSkew','damageOffsetX','frameVisible','Game_Action_itemHit','ESCAPE','Window_BattleLog_displayEvasion','cancelButtonText','parseForcedGameTroopSettingsBattleCore','Scene_Battle_logWindowRect','eIAZd','Game_Enemy_transform','isPTB','PostDamage%1JS','registerDefeatedEnemy','TpGaugeOffsetX','setHelpWindowItem','tHTUF','PreApplyAsTargetJS','FullActions','_opacityEasing','YwiHv','startGrow','undecided','setupHpGaugeSprite','itemWindowRect','createBorderStylePortraitSprite','addSkillTypeCommand','ForceDeath','process_VisuMZ_BattleCore_Failsafes','displaySubstitute','_indent','_stateSprite','gaugeX','rAmRk','battleEnd','restore','39031500iPgmjg','pfJdt','traitSet','setBattleImpactTimeScale','Sprite_Battleback_adjustPosition','_iconIndex','GsQwx','iWCgw','BTestBypass','laBxU','ActSeq_Impact_Negative','AttackAnimation','process_VisuMZ_BattleCore_TraitObject_Notetags','CheckMapBattleEventValid','applySoftDamageCap','Sprite_Battler_setBattler','OHiVG','cNGZZ','requestFauxAnimation','upuEo','pop','qooqm','maxCommands','_floatWholeDuration','Sprite_Battler_isMoving','left','launchBattle','applyForcedGameTroopSettingsBattleCore','canGuardBattleCore','RequiresDefeat','\x5cI[%1]%2','_enemyId','DefaultDamageStyle','Scene_Battle_updateBattleProcess','Window_BattleLog_performMiss','log','OzGIy','KNrzY','applyImmortal','isForFriend','MotionFrameWait','Game_BattlerBase_refresh','ZHUXc','pointY','NameOffsetX','dMLrv','text','_createCursorSprite','_baseY','zYZFF','PostRegenerateJS','Name','Window_BattleLog_displayMpDamage','ponVK','StatusWindowAttachmentFrontOffsetY','onActorOk','setupBattleCoreData','Window_BattleEnemy_show','1417044BAfNzV','name','mpHealingFmt','needsSelectionBattleCore','_angleWholeDuration','startInput','isSkewing','ScaleUp','WGius','getSkillTypes','Sprite_Actor_createStateSprite','ActionCount','ReflectPlayback','ActSeq_Skew_Reset','isTurnBased','ghZBB','ActSeq_Animation_AttackAnimation2','Lvrzx','battleSkew','kygFM','playCancel','isGuardWaiting','animationBaseDelay','_baseLineStack','battleCoreTpbMainPhase','actions','VisuMZ_2_BattleSystemPTB','performActionMotions','fsQYV','expTotal','initMembers','displayStartMessages','getColor','gainHp','clear','budpD','isSelected','shift','selectNextCommandTpb','addDamageSprite','DWjwK','commandStyleCheck','repositionCancelButtonBorderStyle','isTpbCharged','isBattlerGrounded','Spriteset_Battle_createLowerLayer','PreApplyJS','onEnemyOk','_growY','ARRAYFUNC','createKeyJS','FOfqd','loadBattleback1','clearMotion','GUARD','PortraitScale','softDamageCap','custom','Scene_Map_initializeAfter','attackStatesRate','824vkFzbq','ActSeq_BattleLog_PushBaseLine','isStatusAffected','BattleManager_startInput','JS\x20%1START\x20ACTION','spinBattler','open','jagkw','_lineHeight','eJCoc','_battlerContainer','displayAction','MiShU','Game_Action_isForFriend','height','gradientFillRect','MAXHP','KJECQ','WaitCount1','DamageStyles','applyArmorModifiers','battleback1Name','weaponTypes','VariableDmg','isForAll','becomeSTBExploited','hasStaticSvBattler','itemCri','wtypeId','FNETH','BattleVictoryJS','_currentAngle','Game_Interpreter_terminate','itemHeight','_partyCommandWindow','Window_BattleLog_performCollapse','die','BattleDefeatJS','attachSpritesToDistortionSprite','partyCommandWindowRectDefaultStyle','statusText','updateRefresh','dimColor2','getLastPluginCommandInterpreter','opacity','FlinchDistanceY','blockWidth','ActSeq_Mechanics_RemoveState','initBattleCore','_windowLayer','indexOf','_tpbState','updatePositionBattleCore','ActSeq_Movement_WaitForFloat','Lgwxy','playEnemyAttack','friendsUnit','OxRyY','StatusWindowAttachmentBack','push','call','STB','waitCount','StyleOFF','drawActorFace','yAxWK','show','pyqDR','ForceExploited','isShownOnBattlePortrait','DkNFm','damageRate','pages','Game_System_initialize','Exploited','updateFloat','WaitForOpacity','_subject','UrEOb','ShowMpDmg','_opacityWholeDuration','onBattleStartBattleCore','CopyCombatLog','wtLcv','Scene_Battle_updateStatusWindowPosition','svBattlerData','_forcedBattleLayout','RcFeX','isVisualHpGaugeDisplayed','attackAnimationId2','AttachStateOffsetY','setupFont','bitmapHeight','hitRate','DefaultSoftScaler','moveBattlerDistance','SvMotionIdleSolo-%1-%2','executeDamage','_statusWindow','ActSeq_Inject_AnimationStart','removeAnimationFromContainer','ActSeq_Mechanics_HpMpTp','_motionSpeed','isDuringNonLoopingMotion','updateWeather','Scene_Battle_update','onEncounter','ActSeq_Movement_Opacity','clearFreezeMotion','OffsetX','HomePosJS','setImmortal','tZddo','OSvcO','_checkOn','updateEffectContainers','priority','dead\x20battlers','useItem','setAttack','Strength','ActSeq_Movement_MoveToTarget','ActSeq_Impact_ColorBreak','isAnyoneSpinning','HPNrL','MP_Rate','NewPopupBottom','getAttackMotion','_homeY','_weaponSprite','playOnceParallelTroopPage','JS\x20%1END\x20ACTION','qEObY','onBattleEndBattleCore','Skills','lyNAO','resetResultSwitches','_actorWindow','PopupPosition','forceMotion','_targetOpacity','qVrhI','DefaultStyle','FWraV','_tempActor','setBattlerFacePoint','ShowActorGauge','makeSuccess','Scene_Battle_onActorCancel','_scene','_list','clearFreezeMotionForWeapons','_skewDuration','makeCommandList','ActSeq_DB_DragonbonesMotionAni','FoIFH','BmfeY','ActionAnimation','BattleManager_onEscapeSuccess','Sprite_Enemy_updateBossCollapse','FollowTurn','damage','vhipV','gBdqy','Window_BattleLog_displayMiss','alive\x20enemies','TpbGaugeOffsetY','command301','ActSeq_Motion_WaitMotionFrame','createEnemies','WaitForCamera','itemEffectAddNormalState','StatusWindowAttachmentFront','vbNiu','setup','showEnemyAttackAnimation','addImmortal','Game_Interpreter_command283','getEnemyIdWithName','Sprite_Enemy_setHue','textColor','isAutoBattleCommandEnabled','occasion','updateShadowScale','_drawTextBody','NHOYS','walk','addAnimationSpriteToContainer','refresh','inHomePosition','svAnchorX','fnordRemovedStates','HrEMH','changeAtbCastTime','createChildSprite','_homeX','attackAnimationIdSlot','isOnCurrentMap','Spriteset_Battle_updateActors','updateShadowPosition','JKnPQ','alive\x20battlers\x20not\x20user','compatibilityVisible','SwitchMissEvade','ShowPortraits','skewBattler','onTurnEnd','onBattleStart','getDefeatedEnemies','aRKkr','oPweo','zyvmI','CalcEscapeRatioJS','BattleManager_processVictory','IconSet','ActSeq_Set_WholeActionSet','kLZag','PreDamageAsTargetJS','inBattle','QIXKm','BHOId','motionType','QoL','djVwe','addState','startJump','Game_Action_apply','message4','ActSeqImpact','PreRegenerateJS','_activeWeaponSlot','Settings','sxjKc','battleUIOffsetY','VvEdu','battlerSmoothImage','isCommandEnabled','_cancelButton','nmtCn','base','UgoJG','note','jkPBh','initialize','battleInjectAni','makeActionList','Sprite_Enemy_setBattler','AGI','SBiIN','_targetHomeY','isDead','ActSeq_Mechanics_CtbSpeed','isDTB','sideview_ui','length','ShowHide','_shake','ActSeq_Mechanics_AddState','Intensity','JS\x20%1APPLY\x20%2','Window_BattleLog_pushBaseLine','bottom','Mirror','not\x20focus','SDdwu','skillTypes','battleGrow','battleFloat','ReflectAnimation','_escapeRatio','setBattleCameraPoint','1:1','ActSeq_Motion_FreezeMotionFrame','commandEscape','MGPTd','reduce','yAdVC','voDmQ','MAXMP','vertCells','setupIconTextPopup','DNjoA','isConfused','Elements','dying','MP_Flat','KKYYz','processRandomizedData','okTargetSelectionVisibility','makeActions','debuffAdd','lHMwQ','performMoveToPoint','isAnyoneJumping','_endBattle','head','actorCommandAutoBattle','_jumpHeight','isAnyoneGrowing','Game_Battler_performActionStart','YTioy','alive\x20battlers\x20not\x20target','uiMenuStyle','itemLineRect','_target','ubQRM','drawItemImageXPStyle','BcwgJ','Window_BattleLog_performActionEnd','parse','QrWnr','command339','_battleCoreBattleResumeAfter','battleDisplayText','Sprite_AnimationMV_updatePosition','PostEndTurnJS','getItemDamageAmountTextBattleCore','_skewY','cancelTargetSelectionVisibility','ActSeq_Mechanics_DamagePopup','exit','MANUAL','Parse_Notetags_Targets','playOnceParallelInterpreter','BattleManager_initMembers','Sprite_Battler_initMembers','SJUtc','AntiTintUiElements','rqteQ','performActionEndMembers','eVjcX','result','icon','SceneManager_push','isAnimationPlaying','ToJrx','WaitCount','_borderPortraitDuration','ShowFacesListStyle','BattleManager_processDefeat','_actionInputIndex','turnOrderChangeOTB','BattleManager_updatePhase','createStateSprite','ZtIDr','ShowTpDmg','addFightCommand','forceWeaponAnimation','_actionBattlers','Scene_Battle_startActorSelection','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','createHelpWindow','NameFontSize','GSrnW','wait','animationWait','DamageStyleList','fYvth','dead\x20enemies','sGEMx','isDebuffAffected','alive\x20friends\x20not\x20target','_mainSprite','resizeWindowBorderStyle','VisuMZ_0_CoreEngine','ParseArmorNotetags','VisuMZ_4_BreakShields','updateAction','nNJah','autoSelect','dataId','SceneManager_isSceneChanging','ConvertActionSequenceTarget','sortDamageSprites','isFriendly','bZwdj','tZUlb','Scene_Battle_selectPreviousCommand','ConvertCount','eXqqj','hXmrp','contentsOpacity','applyDamageCaps','onActorCancel','nVgqD','textWidth','missle','createDamageSprite','updateCancel','_immortal','max','mainSpriteScaleY','adjustFlippedBattlefield','_actorCommandWindow','isWaiting','startActorCommandSelection','resizeWindowXPStyle','applyItem','isActor','setupActionSet','removedStateObjects','Window_BattleLog_performDamage','currentSymbol','attackStates','_skewEasing','BTB','_angleRevertOnFinish','onEnemyCancel','_executedValue','BattleManager_checkBattleEnd','ActSeq_Angle_Reset','Window_Options_addGeneralOptions','CSYzZ','noSimilarSTypes','Radius','autoMeleeMultiTargetActionSet','activate','_forcing','BattleManager_startBattle','AutoNotetag','_enemySprites','WhidQ','clearElementChanges','angleDuration','_borderPortraitSprite','performTpbActiveCheckSwitch','EHFcF','drawItemStatusListStyle','portrait','BattleManager_inputtingAction','_linkedSprite','ceil','statusWindowRectBorderStyle','WaitComplete','StepDistanceY','PreDamageJS','command283','HRUuj','loadPicture','MeleeDistance','palnO','clearBattlerMotionTrailData','addedStateObjects','nMUyR','Sprite_Enemy_initVisibility','addActor','makeData','setWaitMode','PostApplyAsUserJS','power','commandNameWindowCenter','createContents','drawIcon','createWeather','_defeatedEnemies','UNTITLED','SvWeaponMass-%1-%2','ShowPortraitsBorderStyle','parent','VisuMZ_1_MainMenuCore','ZLbxP','%1EndActionJS','setCursorRect','type','Item-%1-%2','Game_Action_clear','createAttachedSprites','oPUhB','options','WaitForNewLine','_spriteset','statusWindowRect','requestMotion','ActSeq_Mechanics_BoostPointsStoreData','isAnyoneInjectAnimating','StUMQ','UYOod','kqBrs','anchorY','getWtypeIdWithName','AttachStateOffsetX','coreEngineRepositionEnemies','PreEndBattleJS','cECHK','partyCommandWindowRectXPStyle','BattleManager_onEscapeFailure','setupTextPopup','ConfigManager_applyData','ActSeq_Movement_WaitForMovement','putActiveBattlerOnTop','startTurn','CmdIconAutoBattle','performDamage','isForOpponent','partyCommandWindowRect','XPActorCommandLines','performSTBExploiter','ParseSkillNotetags','MIN_SAFE_INTEGER','displayCounter','_enemyNameContainer','setBattlePortrait','isMagical','hOqKJ','skewDuration','Immortal','GGIeE','Sprite_Actor_update','performCounter','OOljP','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','cGpvH','updateShadowBattleCore','rowSpacing','getMenuImage','Scene_Map_launchBattle','checkSubstitute','CmdIconEscape','setMoveEasingType','VvtZh','SvWeaponSolo-%1-%2','dfOWl','Point','JRdOr','_drawTextOutline','isBTB','battlerSprites','qDoMT','isTickBased','XOizr','redraw','JnyzG','needsActorInputCancel','mainSpriteScaleX','Pre','cZJKX','regenerateAllBattleCore','CommandVisible','uVMjz','_stateIconSprite','regionId','LRtwy','svShadow','forceSelect','_targetGrowX','onJumpEnd','CmdTextAutoBattle','Npvqg','MpGaugeOffsetX','CriticalHitRateJS','battleZoom','resetBreakShield','current\x20target','_backAttachmentSprite','eNVyS','makeHpDamageText','ActSeq_BattleLog_Refresh','ewrva','isCTB','performCollapse','nxotk','Shadow2','_cursorSprite','addTextToCombatLog','_itemWindow','addCustomCommands','displayCritical','SkillsStatesCore','ActSeq_Movement_HomeMoveBy','rGsCB','isMeleeMultiTargetAction','clamp','onAngleEnd','border','glitch','BattleStartEvent','acivs','_lastEnemy','displayEvasion','ActSeq_Horror_TVRemove','createDamageContainer','targetSpritePosition','unshift','mainSpriteHeight','isAffectedByBreakShield','StartTurnMsg','physical','zNHJU','grgjV','CAKqK','ActSeq_Mechanics_StbExtraAction','repeatTargets','drawText','rCRRb','mpDamage','isTriggered','autoSelectLastSelected','DEF','ActSeq_Horror_Clear','cgmRT','_enemies','lYdzV','addItemCommand','ActSeq_Weapon_ClearActiveWeapon','pvqXY','_enemyWindow','mainSpriteWidth','Sprite_Actor_initMembers','Window_BattleLog_performCounter','active','_updateCursorFilterArea','ActionItemMsg','drawSkillCost','flashColor','updateStateSprite','_inputting','ActSeq_Movement_Jump','UdteZ','Game_BattlerBase_initMembers','JIHNe','FewrB','VisuMZ_3_ActSeqImpact','TP_Flat','ActSeq_Weapon_NextActiveWeapon','createCommandNameWindow','onMoveEnd','isGuard','jbIvB','createBattleFieldBattleCore','VisuMZ_2_BattleSystemETB','startInjectAnimation','battleSpin','_handlers','Scene_Battle_createCancelButton','showPortraits','isMeleeSingleTargetAction','ekHvr','addChildAt','updateWaitMode','preparePartyRefresh','usqxd','innerWidth','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','Scene_Battle_createAllWindows','_ptbActionCost','aBlpe','updateStyleOpacity','createJS','1321181BRvRDs','_totalValue','xGkUM','surprise','invokeMagicReflection','RegExp','setHandler','alterType','hpHealingFmt','EEKzu','process_VisuMZ_BattleCore_Action_Notetags','loadWindowskin','oSJwb','JS\x20ESCAPE\x20SUCCESS','Game_Map_battleback2Name','JS\x20BATTLE\x20VICTORY','setupDesaturateImpactFilter','tpOVk','_freezeMotionData','stepForward','Window_BattleLog_performRecovery','_waitMode','motionIdle','XiEZM','setBattleSkew','isSceneBattle','setFullActionsPTB','zALnW','MbYME','updateActors','battleProjectiles','setTroopPage','NameAlwaysVisible','Game_Interpreter_command301','oyXMB','Sprite_Damage_createChildSprite','buffAdd','ActSeq_Target_CurrentIndex','checkCacheKey','svBattlerShadowVisible','isInputting','process_VisuMZ_BattleCore_PreBattleCommonEvent','xEhAN','Game_BattlerBase_canAttack','_forcedHomeX','ShowCritical','NameAttachStateIcon','clearActiveWeaponSlot','ShowCounter','iconText','fontSize','VisuMZ_2_HorrorEffects','isPlaytest','isMVAnimation','yZxzx','_animationCount','_createDamageContainer','updateGrow','Window_BattleLog_popupDamage','ActionEnd','Weapon-%1-%2','Linear','CurrentTurn','_dragonbonesSpriteContainer','checkTpbInputClose','slice','CHUHK','ActSeq_Projectile_Animation','ActSeq_Horror_GlitchRemove','GKZQX','OyMum','WbWST','ParseAllNotetags','scale','ActSeq_Movement_FaceDirection','_phase','lYFzM','spriteId','PreEndTurnJS','eRrki','ActSeq_Impact_Desaturate','setBattlerFlip','ActSeq_Mechanics_BreakShieldReset','battleAngle','_preBattleCommonEvent','updateForceAction','DamageFlat','createLowerLayer','message1','traitObjects','_createCursorArea','SwitchCritical','changeAtbChargeTime','DistanceY','_flashDuration','DUhUg','OjkSQ','DistanceX','Uodyx','JS\x20%1START\x20TURN','CombatLogIcon','Skill-%1-%2','_updateClientArea','alive\x20actors\x20not\x20user','stopInjectAnimation','updateBorderStyle','battleSys','_item','refreshActorPortrait','sCywY','requestAnimation','_borderPortraitTargetX','setText','validTargets','selectPreviousCommand','_hpGaugeSprite','random','swing','WaitForEffect','randomTargets','itemEffectAddAttackState','%1Event','isForOpponentBattleCore','center','Scene_Battle_onActorOk','_tempEquipCheck','FZxFv','ActSeq_Zoom_WaitForZoom','EIWKF','BJGJn','onHomeMoveEnd','battleUIOffsetX','isNextScene','statusWindowRectDefaultStyle','autoBattleStart','ChargeRate','createString','isCharging','Window_BattleLog_displayCurrentState','kCtDf','changeBattlerOpacity','makeAutoBattleActions','performAction','helpWindowRectBorderStyle','value1','Sprite_Actor_setBattler','ActSeq_Mechanics_PtbConvert','Window_BattleEnemy_initialize','revealNewWeaknesses','jumpBattler','_effectsContainer','canAddSkillCommand','addOptionsCommand','CriticalColor','UsbJK','YzOnm','JumpToLabel','HJjSn','COMBATLOG','ActSeq_Inject_WaitForInjectAni','SvBattlerMass-%1-%2','stepFlinch','adjustPosition_ScaleUp','isSideButtonLayout','filterArea','_makeFontNameText','Height','isBattleFlipped','yMoPV','getBattlePortraitFilename','ActorCmd','VisuMZ_2_PartySystem','ActSeq_Horror_NoiseRemove','ArPenFlat','VrQox','_effectDuration','makeTargetSprites','STR','AutoBattleCancel','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','isAtbChargingState','numTargets','zdVzV','%1Apply%2JS','bsFdg','getConfigValue','Sprite_Actor_updateFrame','alive\x20actors\x20not\x20target','setBattleCameraTargets','Wzbvd','makeTargets','hpDamage','BpWRd','vSaFq','expRate','rbgiD','ShowAddedBuff','windowskin','Window_SkillList_maxCols','QaLdg','Game_Battler_regenerateAll','criticalDmgFlat','toUseBoostPoints','499350FnSZJy','nlGvR','jkTtF','_skillWindow','WaitForAnimation','alive\x20opponents','createPartyCommandWindow','isBypassDamageCap','maxBattleMembers','AnchorX','checkShowHideBattleNotetags','sliceMax','arRedFlat','BattleLogRectJS','_shadowSprite','bvBAu','hAiuW','VEVeN','iterateBattler','zPHtC','fRGuX','KQXiN','VisuMZ_2_BattleSystemSTB','eqEUe','_wtypeIDs','FocusX','ActSeq_BattleLog_WaitForNewLine','_skewWholeDuration','drawItemImagePortraitStyle','COMBAT\x20LOG','alphabetic','zpdoQ','titTl','VisuMZ_3_ActSeqProjectiles','ZfllD','Game_Action_isForOpponent','actionSplicePoint','OMaOM','setupMotionBlurImpactFilter','showAnimation','_growEasing','close','asWYC','anchorX','Parse_Notetags_TraitObjects','updateOnceParallelInterpreters','_effectType','MpGaugeOffsetY','updateBossCollapse','PostApplyAsTargetJS','frontviewSpriteY','StartTurnShow','stepBack','Game_Troop_expTotal','Game_BattlerBase_addNewState','setHome','_injectAnimationSprite','ORRny','xwlCi','jFvuU','AsUser','actorCommandCancelTPB','Seoez','IRauP','DistanceAdjust','ActSeq_Mechanics_ArmorPenetration','onEncounterBattleCore','isBreakStunned','startMotion','bind','AutoBattleMsg','LAFKQ','actionBattleCoreJS','collapseType','basicGaugesY','updateMain','Actor-%1-%2','gainTp','deadMembers','_pattern','mhp','_battleLayoutStyle','Scene_Battle_startActorCommandSelection','displayBuffs','isTpb','MrBDj','setupZoomBlurImpactFilter','eaoYv','hXHzF','ActSeq_Animation_ChangeBattlePortrait','_regionBattleback1','pushBaseLine','Window_BattleStatus_drawItemImage','MTBhF','allowCollapse','hidden','KgJVV','start','makeDeepCopy','placeActorName','setBattleCameraOffset','Window_Options_statusText','lukEffectRate','axhtt','JS\x20ESCAPE\x20FAILURE','<CUSTOM\x20ACTION\x20SEQUENCE>','BattleSystemCTB','moveBattlerToPoint','JtDKX','setupMotion','startHomeMove','BattleManager_endAction','gdzNl','_callSceneOptions','replace','battleEffect','Style','_lastPluginCommandInterpreter','trueRandomTarget','ITYfU','fittingHeight','GnNfm','wholeActionSet','skillItemWindowRectMiddle','prototype','optDisplayTp','padding','SmlrX','SideviewSelect','setCustomDamageFormula','setValue','isForFriendBattleCore','alive\x20actors','isPhysical','isRightInputMode','critical','Scene_Options','QIxWG','Game_Action_executeDamage','bossCollapse','onEscapeSuccess','updateStaticSvBattlerFrames','zWPiO','ActSeq_Inject_AnimationPauseResume','waitForMovement','setLetter','onBattleEnd','FTmfa','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','context','Turns','TPB','updateCollapse','ActSeq_Element_ForceElements','setupChild','Game_Interpreter_PluginCommand','startAttackWeaponAnimation','Angle','HbgWq','helpAreaBottom','_deathStateApplied','BattleCmdList','Game_Enemy_setup','mmp','ResetFocus','bitmapWidth','addShowHpGaugeCommand','CmdStyle','process_VisuMZ_BattleCore_CommonEventKeys','pGtQi','inputtingAction','ActSeq_Zoom_Reset','Class-%1-%2','Game_BattlerBase_isStateResist','fillRect','Game_Map_battleback1Name','waitForEffect','Yuvze','commandNameWindowDrawBackground','MtTRk','FkeDg','isAnyoneFloating','clearResult','auto','moveBattlerHomeDistance','isSkipPartyCommandWindow','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','BattleManager_checkSubstitute','removeBuffsAuto','ActSeq_Mechanics_EtbAction','alive\x20friends\x20not\x20user','MOTIONS','HelpAutoBattle','DefaultSoftCap','processEscape','Sprite_Enemy_updateStateSprite','changeInputWindow','lineHeight','Window_BattleLog_performEvasion','compareBattlerSprites','iBmmL','ActSeq_Mechanics_CtbOrder','ShowPopup','AsTarget','pause','States','Window_BattleLog_performActionStart','CriticalHitFlat','HpGaugeOffsetY','OffsetAdjust','FDdFk','checkExtendTroopCompatibility','_floatEasing','canAlterActionCostPTB','_opacityDuration','_attackAnimationId','animation','_weather','_jumpWholeDuration','Window_PartyCommand_initialize','yOHeJ','isPartyCommandWindowDisabled','ActSeq_Impact_ZoomBlurPoint','Sprite_Animation_targetSpritePosition','Game_Action_numRepeats','textAlign','process_VisuMZ_BattleCore_CreateRegExp','setBattler','cancel','DjofI','_armorPenetration','PnakD','softDamageCapRate','_battleCoreBattleStartEvent','GroupDigits','_forcedHomeY','ILyry','command119','rRIjU','PreApplyAsUserJS','isAlwaysHidden','selectNextCommand','statusWindowRectXPStyle','updateTargetPosition','_forcedBattlers','_updateCursorArea','eJcAz','placeGauge','placeTimeGauge','ywsKr','xRKyj','ActSeq_Weapon_SetActiveWeapon','ActSeq_Movement_WaitForJump','attackSkillId','hpDamageFmt','isActiveTpb','isCommonEventReserved','Sprite_Enemy_updateCollapse','isBorderStylePortraitShown','abnormal','checkBattleEnd','updateJump','_actions','Mute','setBattleAngle','DutNw','commandName','battleCommandName','CmdIconItem','HYIjr','zKjaX','QoAdY','Scene_Map_initialize','CheckSkillCommandShowSwitches','commandNameWindowDrawText','fOqtB','BindCommonEventKeysForObj','PopupShiftX','callNextMethod','lIlBZ','_shadowScaleY','MotionIdle','createPartyCommandWindowBattleCore','ActSeq_Impact_ShockwaveEachTargets','Filename','getDamageStyle','giTPG','sleep','isDisplayEmergedEnemies','BEIOs','_growWholeDuration','PUGwA','ActSeq_Animation_WaitForAnimation','description','NextTurn','ActSeq_Movement_Scale','makeActionOrders','Buffs','changePaintOpacity','floatBattler','ActSeq_Set_SetupAction','turn','repeats','Targets1','adjustPosition_ScaleToFit','_back1Sprite','WaitForSpin','onSelectAction','Xmiry','ActSeq_Movement_Skew','VSWxp','_battlerName','HpGauge','CoreEngine','Game_Action_setGuard','StatusWindowAttachmentFrontOffsetX','finalizeScale','ActSeq_Mechanics_StbRemoveExcessActions','evalDamageFormula','Enemy','isActionSelectionValid','QQxey','_homeDuration','uroAq','ResetOffset','_dimmerSprite','%1EndTurnJS','commandAutoBattle','statusTextAutoBattleStyle','sgiYT','SkewX','TpGaugeOffsetY','lSHjQ','targetDistortionSpritePosition','gPwXr','TargetLocation','hitFlat','CastCertain','dAXsU','setupShockwaveImpactFilter','noise','isFightCommandEnabled','drain','damageContainer','VisuMZ_3_ActSeqCamera','EEINF','wFBnP','addExtendedTroopMembers','compareEnemySprite','Spriteset_Battle_createBattleField','MPjUq','Lnsmz','lgHKW','partyCommandWindowRectBorderStyle','HP_Flat','WaitCount2','applyCritical','ActSeq_Target_RandTarget','EscapeSuccessJS','Game_Action_isForRandom','text\x20target','loadBattleback2','Nfpem','irAxV','position','cameraDuration','shouldPopupDamage','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','hasBeenDefeatedBefore','Gqikg','BattleCore','performActionEnd','StartName','ActSeq_Animation_PlayAtCoordinate','AutoBattleOK','getAttackWeaponAnimationId','cancelActorInput','isSkill','makeBattleCommand','_cursorArea','applyHardDamageCap','StatusWindowAttachmentBackOffsetX','QcxSH','onEscapeFailure','textBaseline','BattleLog','canBattlerMove','Window_BattleLog_displayTpDamage','qrDYl','OtbfN','save','substitute','FQZoP','filters','remove','createAttachmentSprites','enemyId','attackAnimationId1','AutoBattleRect','_helpWindow','Scene_Battle_commandFight','Sprite_Battler_damageOffsetX','createShadowSprite','ActionEndUpdate','PostApply%1JS','initVisibility','updateBattleProcess','fmgmd','Scene_ItemBase_applyItem','Game_Action_setAttack','createDistortionSprite','updateFlip','StartTurnWait','_action','processRefresh','Game_Battler_clearMotion','OHvJI','AeMBv','dlLwj','EeKTT','TLnNH','addChild','BattleLayout','isUndecided','removeHorrorEffect','frameDelay','GuardFormulaJS','MotionSpeed','displayActionResults','Scene_Battle_itemWindowRect','APruT','Game_Battler_startTpbTurn','effect','PerformAction','MiUVv','LdLiM','BattleManager_startTurn','_colorType','makeActionListAutoAttack','setBattlerBattleCore','emerge','updateFrame','Game_Temp_requestAnimation','_targetSkewX','Window_BattleLog_performMagicEvasion','battleLayoutStyle','Window_BattleLog_performSubstitute','jPCOW','MotionAni','Scene_Battle_start','_logWindow','updateStateIconSprite','boxWidth','_targetGrowY','_commonEventKey','arPenFlat','Omygb','centerFrontViewSprite','isActing','retreat','Game_Action_applyGlobal','ekvgz','Window_BattleLog_clear','_stypeIDs','itemHit','attack','_lastAction','updateInterpreter','Opacity','bIiIr','battleCommandIcon','Sprite_SvEnemy','NUM','Sprite_Actor_moveToStartPosition','FtfCI','performMagicEvasion','HTdrM','CastPhysical','hhwtN','isNextSceneBattleTransitionable','evade','jLNtn','ShowAddedState','PreEndActionJS','updateBitmap','visibilityState','uRYYu','Game_Action_evalDamageFormula','WaitForAngle','targetObjects','aElgD','processExtendTroopMembers','gainMp','adjustPosition_1for1','onDisabledPartyCommandSelection','_battlePortrait','Window_ItemList_maxCols','svBattlerAnchorX','drawItemImage','processForcedAction','toLowerCase','jRaEh','_offsetX','ShowHpDmg','isAnyoneInjectAniPrepping','_tempBattler','Text','getNextSubject','kFwlv','HP_Rate','thrust','WtypeId','Sprite_Battler_startMove','_commonEventQueue','HIPWZ','zhROK','djXsI','KnmIw','addGeneralOptions','updatePosition','zEPli','nyIJn','applyGlobalCommonEventNotetags','contents','ParseActorNotetags','members','ARRAYSTRUCT','nUeHj','setupWeaponAnimation','_createEffectsContainer','isSpriteVisible','getHalfActionsPTB','process_VisuMZ_BattleCore_Notetags','viqxs','_lines','Scene_Battle_selectNextCommand','setLastPluginCommandInterpreter','reserveCommonEvent','ParseStateNotetags','VUDTf','BARE\x20HANDS','ActSeq_Mechanics_AtbGauge','BattleManager_onEncounter','ShowEnemyGauge','setSkill','setCommonEvent','adjustPosition_ScaleDown','_floatHeight','hasSvBattler','placeStateIcon','addOnceParallelInterpreter','SkillItemBorderCols','SKILLS','Targets2','callOptions','createBattleUIOffsetY','isAtbCastingState','ActionSequence','enemy','commandStyle','contains','Window_BattleLog_displayActionResults','bLZRs','processDefeat','float','WbaYA','slices','StatusWindowSkinHide','NEObu','delay','logWindowRect','alive\x20enemies\x20not\x20user','BoostPoints','Window_BattleLog_update','ElementStatusCore','canInput','updateSpin','Slot','ARRAYSTR','loadEnemy','getBattlePortraitOffsetY','battleStatusWindowAnimationContainer','skew','Yywwk','drawItem','_speed','Enemy-%1-%2','FlinchDuration','dead\x20friends','BbJcX','_commandNameWindow','updateEventMain','maxItems','_canLose','xqAFG','Actions','isFlipped','loadBitmap','StateIconOffsetY','TNEhS','setupBattleback','ActSeq_Impact_ShockwaveCenterTargets','actor','mteAV','attackMotions','createAnimationContainer','extraPositionScaledY','ActSeq_Camera_Offset','Scene_Battle_skillWindowRect','CommandWidth','Direction','Alqds','_cacheTextWidth','uwVyW','Game_Map_setupBattleback','uKHyr','Sprite_Battler_updateMain','updateStateSpriteBattleCore','top','setupCriticalEffect','Scene_Battle_initialize','isHiddenSkill','tpbActorSwitchConditionsMet','ForceRandom','wTBKe','VisuMZ_3_BoostAction','ActSeq_Movement_MoveToPoint','front\x20base','apply','ClearBattleLog','ANTI_TINT_UI','Actor','displayMpDamage','ActSeq_Motion_MotionType','updateShadowVisibility','uiInputPosition','Game_Action_makeTargets','fiiuy','ActSeq_Impact_Oversaturate','EGuxI','setupBattleCore','alterBreakShield','_svBattlerData','dWwuf','anchor','liwsj','isForRandomBattleCore','15qdzEMc','displayCurrentState','kdIvb','isAnyoneChangingOpacity','displayReflection','Spriteset_Battle_update','pPHZy','_jumpDuration','skills','_enemyIDs','removeState','Parse_Notetags_Action','vcTIS','iconIndex','ShuffleArray','KGBFR','Sprite_Actor_updateBitmap','addBattleCoreAutoBattleStartupCommand','QkXkR','battleOpacity','ActionStart','_distortionSprite','processVictory','ActSeq_Mechanics_BtbGain','autoMeleeSingleTargetActionSet','IqOiK','lJsXM','pXGdu','setupDamagePopup','apqKf','right','Window_BattleLog_displayFailure','isStateResist','canUse','ShowMissEvasion','ActSeq_Mechanics_BoostPointsChange','WaitForMovement','applyData','isTpbMainPhase','ActSeq_Animation_ShowAnimation','abs','snapForBackground','updateBorderSprite','clearActiveWeaponSet','addText','DrilO','createBattleUIOffsetX','isAnyoneSkewing','zGipn','changeTurnOrderByCTB','ConfigManager_makeData','wXMTU','callUpdateHelp','PbUcm','updateCommandNameWindow','isChanting','LUK','resetFontSettings','ActSeq_Animation_ActionAnimation','yWSdf','_animationSprites','xBGzb','startWeaponAnimation','PrioritySortActors','waitForFloat','isAnyProjectilePresent','drawTextEx','setGuard','addCommand','Game_Battler_onTurnEnd','113722ayuiiq','AdjustRect','Pwxoq','%1EndBattleJS','OAlCR','State-%1-%2','windowPadding','gaugeLineHeight','mzMan','width','hJhQR','ActSeq_BattleLog_UI','xhymH','addBattleCoreAutoBattleStyleCommand','oRKxe','isForRandom','_shadowScaleX','alignBattleCoreDamageSprite','_displayBattleCoreTransitionErrorMsg','performMoveToTargets','_jumpMaxHeight','version','isSTB','ActSeq_Motion_RefreshMotion','<CENTER>%1','getCommonEventIdWithName','PreDamage%1JS','offsetY','addSingleSkillCommand','ActSeq_Mechanics_PtbFullHalfAction','Scene_Battle_createHelpWindow','LyybX','swapEnemyIDs','LEFDt','Formula','NxSTg','nextActiveWeaponSlot','createDigits','vQbED','horzCells','BattleManager_endBattle','oyGtI','applyAngleChange','displayChangedStates','Window_BattleStatus_initialize','removeDamageSprite','_createClientArea','SVPFm','CalcEscapeRaiseJS','PopupOffsetX','OyfnY','ActionCenteredName','getChildIndex','addAutoBattleCommand','startAction','setActorHome','onDatabaseLoaded','_requestRefresh','Victory','actorCommandEscape','removeImmortal','DyrJV','processBorderActor','_baseX','Nfitv','applyGlobal','getInputButtonString','bRkdJ','freezeTime','sortEnemies','AxqkR','mRvxs','addSkillCommands','RYNtx','turnCount','customDamageFormula','dbtIG','startFloat','format','SvBattlerSolo-%1-%2','Bnkkb','ALL\x20SKILLS','RuVFf','_targetIndex','FQMXS','guardSkillId','VJFXq','ActSeq_Movement_WaitForSpin','ActSeq_Impact_MotionTrailCreate','getSkillIdWithName'];_0x1506=function(){return _0x50b270;};return _0x1506();}(function(_0x16a780,_0x2b5f2f){const _0x15c8ad=_0x5d1f,_0x58143b=_0x16a780();while(!![]){try{const _0x16021d=-parseInt(_0x15c8ad(0x658))/0x1*(-parseInt(_0x15c8ad(0x182))/0x2)+-parseInt(_0x15c8ad(0xdd))/0x3+-parseInt(_0x15c8ad(0x394))/0x4*(-parseInt(_0x15c8ad(0x9aa))/0x5)+parseInt(_0x15c8ad(0x723))/0x6+parseInt(_0x15c8ad(0x9f0))/0x7*(parseInt(_0x15c8ad(0x3d0))/0x8)+parseInt(_0x15c8ad(0x1f6))/0x9+-parseInt(_0x15c8ad(0x35a))/0xa;if(_0x16021d===_0x2b5f2f)break;else _0x58143b['push'](_0x58143b['shift']());}catch(_0x280efc){_0x58143b['push'](_0x58143b['shift']());}}}(_0x1506,0xe65c5));function _0x5d1f(_0x30a460,_0x43134e){const _0x150620=_0x1506();return _0x5d1f=function(_0x5d1fff,_0x286fd2){_0x5d1fff=_0x5d1fff-0x64;let _0x4ea5ae=_0x150620[_0x5d1fff];return _0x4ea5ae;},_0x5d1f(_0x30a460,_0x43134e);}var label=_0x2546c9(0x895),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x34c78a){const _0x2b593d=_0x2546c9;return _0x34c78a['status']&&_0x34c78a[_0x2b593d(0x848)][_0x2b593d(0xa7e)]('['+label+']');})[0x0];VisuMZ[label][_0x2546c9(0x4b7)]=VisuMZ[label][_0x2546c9(0x4b7)]||{},VisuMZ['ConvertParams']=function(_0x31f402,_0x363bea){const _0x47585c=_0x2546c9;for(const _0x308fa4 in _0x363bea){if(_0x47585c(0x427)!==_0x47585c(0x427))_0x3086ce=_0xe7012*this[_0x47585c(0x14b)][_0x47585c(0x417)],_0x2bd78c+=this['_multipliers']['damageFlat']*(_0x2cf7b9>=0x0?0x1:-0x1),_0x4b8e74=this[_0x47585c(0x130)](_0x47585c(0xa0a),_0x41ab55,_0x338b56,![]),_0x1ed7b2=this['applyDamageCaps'](_0x47b6f5),_0x539810=_0x4cb7dc[_0x47585c(0x19b)](_0x33db59),this[_0x47585c(0x568)]=_0x447f61,this[_0x47585c(0x659)]=this[_0x47585c(0x659)]||0x0,this['_totalValue']+=_0x6be0c1,_0x2f0156[_0x47585c(0x895)][_0x47585c(0x7ad)][_0x47585c(0x40c)](this,_0xb05599,_0x51fd27),this['applyBattleCoreJS'](_0x47585c(0x342),_0xb361f,_0x2d1c9c,!![]);else{if(_0x308fa4[_0x47585c(0x1e0)](/(.*):(.*)/i)){const _0x2b7068=String(RegExp['$1']),_0x3c747f=String(RegExp['$2'])[_0x47585c(0x13e)]()[_0x47585c(0xb19)]();let _0x53cbb6,_0x5e24bf,_0x939db5;switch(_0x3c747f){case _0x47585c(0x8fb):_0x53cbb6=_0x363bea[_0x308fa4]!==''?Number(_0x363bea[_0x308fa4]):0x0;break;case'ARRAYNUM':_0x5e24bf=_0x363bea[_0x308fa4]!==''?JSON['parse'](_0x363bea[_0x308fa4]):[],_0x53cbb6=_0x5e24bf[_0x47585c(0x1b0)](_0x34a039=>Number(_0x34a039));break;case _0x47585c(0x110):_0x53cbb6=_0x363bea[_0x308fa4]!==''?eval(_0x363bea[_0x308fa4]):null;break;case _0x47585c(0x22f):_0x5e24bf=_0x363bea[_0x308fa4]!==''?JSON[_0x47585c(0x505)](_0x363bea[_0x308fa4]):[],_0x53cbb6=_0x5e24bf['map'](_0x1f2784=>eval(_0x1f2784));break;case'JSON':_0x53cbb6=_0x363bea[_0x308fa4]!==''?JSON[_0x47585c(0x505)](_0x363bea[_0x308fa4]):'';break;case _0x47585c(0xa6f):_0x5e24bf=_0x363bea[_0x308fa4]!==''?JSON['parse'](_0x363bea[_0x308fa4]):[],_0x53cbb6=_0x5e24bf[_0x47585c(0x1b0)](_0x3a3a8b=>JSON[_0x47585c(0x505)](_0x3a3a8b));break;case _0x47585c(0x31b):_0x53cbb6=_0x363bea[_0x308fa4]!==''?new Function(JSON[_0x47585c(0x505)](_0x363bea[_0x308fa4])):new Function('return\x200');break;case _0x47585c(0x3c5):_0x5e24bf=_0x363bea[_0x308fa4]!==''?JSON[_0x47585c(0x505)](_0x363bea[_0x308fa4]):[],_0x53cbb6=_0x5e24bf[_0x47585c(0x1b0)](_0x1dc04d=>new Function(JSON['parse'](_0x1dc04d)));break;case _0x47585c(0x709):_0x53cbb6=_0x363bea[_0x308fa4]!==''?String(_0x363bea[_0x308fa4]):'';break;case _0x47585c(0x965):_0x5e24bf=_0x363bea[_0x308fa4]!==''?JSON[_0x47585c(0x505)](_0x363bea[_0x308fa4]):[],_0x53cbb6=_0x5e24bf[_0x47585c(0x1b0)](_0x5c56b6=>String(_0x5c56b6));break;case _0x47585c(0xa66):_0x939db5=_0x363bea[_0x308fa4]!==''?JSON['parse'](_0x363bea[_0x308fa4]):{},_0x31f402[_0x2b7068]={},VisuMZ['ConvertParams'](_0x31f402[_0x2b7068],_0x939db5);continue;case _0x47585c(0x931):_0x5e24bf=_0x363bea[_0x308fa4]!==''?JSON[_0x47585c(0x505)](_0x363bea[_0x308fa4]):[],_0x53cbb6=_0x5e24bf[_0x47585c(0x1b0)](_0x513664=>VisuMZ[_0x47585c(0x96)]({},JSON[_0x47585c(0x505)](_0x513664)));break;default:continue;}_0x31f402[_0x2b7068]=_0x53cbb6;}}}return _0x31f402;},(_0x39f60b=>{const _0x32b0a2=_0x2546c9,_0x62aded=_0x39f60b[_0x32b0a2(0x395)];for(const _0x1a5c23 of dependencies){if(!Imported[_0x1a5c23]){if(_0x32b0a2(0xaef)===_0x32b0a2(0x9c5))this[_0x32b0a2(0xb3b)]();else{alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x32b0a2(0xa3e)](_0x62aded,_0x1a5c23)),SceneManager[_0x32b0a2(0x510)]();break;}}}const _0x3f0972=_0x39f60b[_0x32b0a2(0x848)];if(_0x3f0972[_0x32b0a2(0x1e0)](/\[Version[ ](.*?)\]/i)){const _0x4286c2=Number(RegExp['$1']);_0x4286c2!==VisuMZ[label]['version']&&(alert(_0x32b0a2(0x7b7)[_0x32b0a2(0xa3e)](_0x62aded,_0x4286c2)),SceneManager[_0x32b0a2(0x510)]());}if(_0x3f0972['match'](/\[Tier[ ](\d+)\]/i)){const _0x107330=Number(RegExp['$1']);_0x107330<tier?(alert(_0x32b0a2(0x5ce)[_0x32b0a2(0xa3e)](_0x62aded,_0x107330,tier)),SceneManager[_0x32b0a2(0x510)]()):tier=Math[_0x32b0a2(0x556)](_0x107330,tier);}VisuMZ[_0x32b0a2(0x96)](VisuMZ[label][_0x32b0a2(0x4b7)],_0x39f60b['parameters']);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x5cb998){const _0x119026=_0x2546c9;let _0xc0d6bd=[];for(const _0x47ad73 of _0x5cb998){'KHlXr'!=='wUNCf'?_0xc0d6bd=_0xc0d6bd[_0x119026(0x1ee)](VisuMZ[_0x119026(0x544)](_0x47ad73)):this[_0x119026(0x289)](_0x31f2cb);}return _0xc0d6bd[_0x119026(0xae4)](_0x482d7c=>_0x482d7c);},VisuMZ[_0x2546c9(0x544)]=function(_0x481437){const _0x245a68=_0x2546c9,_0x455462=BattleManager[_0x245a68(0xd3)]()[_0x245a68(0xae4)](_0xcf24c2=>_0xcf24c2&&_0xcf24c2[_0x245a68(0xab4)]()),_0x4cd9c1=BattleManager['_subject'],_0x1db397=BattleManager[_0x245a68(0x500)],_0x508eaa=BattleManager[_0x245a68(0xb4)]?BattleManager[_0x245a68(0xb4)][_0x245a68(0x699)](0x0):_0x455462;_0x481437=_0x481437[_0x245a68(0x917)]()[_0x245a68(0xb19)]();if(_0x481437===_0x245a68(0x24a)){if(_0x245a68(0x34a)===_0x245a68(0x5cf)){if(!_0x16754c[_0x245a68(0x671)]())return;const _0x27e3ec=_0x223a2b[_0x245a68(0x3fb)]();if(!_0x27e3ec)return;_0x27e3ec[_0x245a68(0x58f)](_0x245a68(0x4db));}else return[_0x4cd9c1];}else{if(_0x481437===_0x245a68(0x5f8)){if(_0x245a68(0x23a)===_0x245a68(0x23a))return[_0x1db397];else _0xc829f5[_0x245a68(0x895)][_0x245a68(0x302)][_0x245a68(0x40c)](this),this[_0x245a68(0x83d)]();}else{if(_0x481437===_0x245a68(0x308)){if(_0x1db397){const _0x722d41=_0x508eaa[_0x245a68(0x402)](_0x1db397);return _0x722d41>=0x0?[_0x508eaa[_0x722d41-0x1]||_0x1db397]:[_0x1db397];}}else{if(_0x481437===_0x245a68(0x88b)){if(_0x245a68(0x76a)!==_0x245a68(0x76a))_0x5309bd[_0x245a68(0x197)]=!![];else{if(_0x1db397){const _0x123e6f=_0x508eaa['indexOf'](_0x1db397);return _0x123e6f>=0x0?[_0x508eaa[_0x123e6f+0x1]||_0x1db397]:[_0x1db397];}}}else{if(_0x481437===_0x245a68(0xacc))return _0x508eaa;else{if(_0x481437==='focus')return[_0x4cd9c1][_0x245a68(0x1ee)](_0x508eaa);else{if(_0x481437===_0x245a68(0x4d7)){if('TcBRY'===_0x245a68(0x24c))return _0x455462['filter'](_0x178920=>_0x178920!==_0x4cd9c1&&!_0x508eaa[_0x245a68(0xa7e)](_0x178920)&&_0x178920['notFocusValid']());else _0x485454=(_0xaa3237+_0x36dbdd)/0x2,_0x19c454=-0x1;}}}}}}}if(_0x4cd9c1){if(_0x481437==='alive\x20friends'){if(_0x245a68(0x86f)!==_0x245a68(0x3d7))return _0x4cd9c1[_0x245a68(0x408)]()[_0x245a68(0x332)]();else this[_0x245a68(0x94d)]();}else{if(_0x481437===_0x245a68(0x7e1))return _0x4cd9c1[_0x245a68(0x408)]()['aliveMembers']()[_0x245a68(0xae4)](_0x8450b7=>_0x8450b7!==_0x4cd9c1);else{if(_0x481437===_0x245a68(0x539))return _0x4cd9c1[_0x245a68(0x408)]()[_0x245a68(0x332)]()['filter'](_0x3c3269=>_0x3c3269!==_0x1db397);else{if(_0x481437===_0x245a68(0x96f)){if(_0x245a68(0xe9)!==_0x245a68(0xe9)){let _0x5f011d=_0x245a68(0x6db);if(this['checkCacheKey'](_0x5f011d))return this[_0x245a68(0x183)][_0x5f011d];return this['_cache'][_0x5f011d]=this[_0x245a68(0x9d8)](this[_0x245a68(0x951)]()),this['_cache'][_0x5f011d];}else return _0x4cd9c1[_0x245a68(0x408)]()[_0x245a68(0x771)]();}else{if(_0x481437[_0x245a68(0x1e0)](/FRIEND INDEX (\d+)/i)){if('xLGBX'!==_0x245a68(0x7d7)){const _0x220c0c=Number(RegExp['$1']);return[_0x4cd9c1[_0x245a68(0x408)]()[_0x245a68(0x930)]()[_0x220c0c]];}else this[_0x245a68(0x2d6)]=_0x54b917;}}}}}if(_0x481437===_0x245a68(0x728))return _0x4cd9c1[_0x245a68(0x2ec)]()['aliveMembers']();else{if(_0x481437===_0x245a68(0x104)){if(_0x245a68(0x80f)!==_0x245a68(0x80f))this['applyFreezeMotionFrames'](),_0x36dadd[_0x245a68(0x895)]['Sprite_Actor_updateFrame'][_0x245a68(0x40c)](this);else return _0x4cd9c1['opponentsUnit']()[_0x245a68(0x332)]()['filter'](_0x488ac7=>_0x488ac7!==_0x1db397);}else{if(_0x481437===_0x245a68(0x12d)){if(_0x245a68(0x108)!==_0x245a68(0x108))_0x5ae319['BattleCore'][_0x245a68(0x70)][_0x245a68(0x40c)](this);else return _0x4cd9c1[_0x245a68(0x2ec)]()[_0x245a68(0x771)]();}else{if(_0x481437['match'](/OPPONENT INDEX (\d+)/i)){const _0x4251b5=Number(RegExp['$1']);return[_0x4cd9c1['opponentsUnit']()[_0x245a68(0x930)]()[_0x4251b5]];}}}}}if(_0x481437===_0x245a68(0x7a7))return $gameParty[_0x245a68(0x332)]();else{if(_0x481437===_0x245a68(0x6bf))return $gameParty[_0x245a68(0x332)]()[_0x245a68(0xae4)](_0x4fcb48=>_0x4fcb48!==_0x4cd9c1);else{if(_0x481437===_0x245a68(0x713)){if(_0x245a68(0x457)!==_0x245a68(0xa4e))return $gameParty['aliveMembers']()[_0x245a68(0xae4)](_0x4ffe64=>_0x4ffe64!==_0x1db397);else _0x1194a0=this[_0x245a68(0x854)][_0x245a68(0x3e5)](),_0x1a2123=this['_back2Sprite']['battleback2Name']();}else{if(_0x481437===_0x245a68(0x8c))return $gameParty[_0x245a68(0x771)]();else{if(_0x481437[_0x245a68(0x1e0)](/ACTOR INDEX (\d+)/i)){const _0x4ff604=Number(RegExp['$1']);return[$gameParty[_0x245a68(0x930)]()[_0x4ff604]];}else{if(_0x481437[_0x245a68(0x1e0)](/ACTOR ID (\d+)/i)){if(_0x245a68(0x114)===_0x245a68(0x11a)){if(this['_phase']===_0x245a68(0x850)){if(_0x1f945d[_0x245a68(0x823)]())return![];}return _0x509401['BattleCore'][_0x245a68(0x569)]['call'](this);}else{const _0xfab8f2=Number(RegExp['$1']);return[$gameActors[_0x245a68(0x97d)](_0xfab8f2)];}}}}}}}if(_0x481437===_0x245a68(0x475))return $gameTroop[_0x245a68(0x332)]();else{if(_0x481437===_0x245a68(0x95e)){if(_0x245a68(0x51f)!=='Haqej')return $gameTroop[_0x245a68(0x332)]()['filter'](_0x4aaf15=>_0x4aaf15!==_0x4cd9c1);else this[_0x245a68(0x814)]();}else{if(_0x481437===_0x245a68(0xb3e))return $gameTroop['aliveMembers']()['filter'](_0x175af5=>_0x175af5!==_0x1db397);else{if(_0x481437===_0x245a68(0x536))return $gameTroop[_0x245a68(0x771)]();else{if(_0x481437[_0x245a68(0x1e0)](/ENEMY INDEX (\d+)/i)){if(_0x245a68(0x163)===_0x245a68(0x163)){const _0x3b255d=Number(RegExp['$1']);return[$gameTroop[_0x245a68(0x930)]()[_0x3b255d]];}else{const _0x1f4a1a=[];for(let _0x390b30=0x0;_0x390b30<this[_0x245a68(0x70d)]();_0x390b30++){_0x1f4a1a[_0x245a68(0x40b)](_0x582f10[_0x245a68(0x799)]());}return _0x1f4a1a;}}else{if(_0x481437['match'](/ENEMY ID (\d+)/i)){const _0x3774aa=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0x245a68(0xae4)](_0x22282c=>_0x22282c[_0x245a68(0x8af)]()===_0x3774aa);}}}}}}if(_0x481437==='alive\x20battlers')return _0x245a68(0x8a8)!==_0x245a68(0x6f2)?_0x455462['filter'](_0x405ee6=>_0x405ee6[_0x245a68(0x21f)]()):_0x51074a(_0x2dbf2b['$2']);else{if(_0x481437===_0x245a68(0x499))return _0x455462[_0x245a68(0xae4)](_0x44e097=>_0x44e097[_0x245a68(0x21f)]()&&_0x44e097!==_0x4cd9c1);else{if(_0x481437===_0x245a68(0x4fd)){if(_0x245a68(0x548)===_0x245a68(0x548))return _0x455462[_0x245a68(0xae4)](_0x27a9bb=>_0x27a9bb[_0x245a68(0x21f)]()&&_0x27a9bb!==_0x1db397);else _0x4c0e8c[_0x245a68(0x687)]();}else{if(_0x481437===_0x245a68(0x445))return _0x455462['filter'](_0x2ebe3c=>_0x2ebe3c['isDead']());}}}return[];},PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x84f),_0x2ae94d=>{const _0x1abefc=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1abefc(0x96)](_0x2ae94d,_0x2ae94d);const _0x5386fa=$gameTemp[_0x1abefc(0x3fb)](),_0x340fd1=BattleManager['_action'],_0x418637=BattleManager[_0x1abefc(0x41d)],_0x318405=BattleManager[_0x1abefc(0xb4)]?BattleManager[_0x1abefc(0xb4)][_0x1abefc(0x699)](0x0):[],_0x1c64f3=BattleManager[_0x1abefc(0x8e5)];if(!_0x5386fa||!_0x340fd1||!_0x418637)return;if(!_0x340fd1['item']())return;if(_0x2ae94d[_0x1abefc(0xa77)])_0x1c64f3[_0x1abefc(0x3db)](_0x418637,_0x340fd1['item']());_0x2ae94d['ApplyImmortal']&&_0x1c64f3[_0x1abefc(0x40b)](_0x1abefc(0x380),_0x418637,_0x318405,!![]);if(_0x2ae94d[_0x1abefc(0x9be)])_0x1c64f3[_0x1abefc(0x40b)](_0x1abefc(0x260),_0x418637,_0x340fd1);if(_0x2ae94d[_0x1abefc(0x9ce)])_0x1c64f3['push']('waitForMovement');if(_0x2ae94d['CastAnimation'])_0x1c64f3[_0x1abefc(0x40b)](_0x1abefc(0xabf),_0x418637,_0x340fd1);if(_0x2ae94d[_0x1abefc(0x727)])_0x1c64f3[_0x1abefc(0x40b)](_0x1abefc(0xb28));_0x5386fa[_0x1abefc(0x58f)](_0x1abefc(0x1d2));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x4a7),_0x537728=>{const _0x4feb7c=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x537728,_0x537728);const _0xfc5dd8=$gameTemp[_0x4feb7c(0x3fb)](),_0x114a2c=BattleManager[_0x4feb7c(0x8c0)],_0x2e109f=BattleManager[_0x4feb7c(0x41d)],_0x388efd=BattleManager[_0x4feb7c(0xb4)]?BattleManager[_0x4feb7c(0xb4)]['slice'](0x0):[],_0x5c160e=BattleManager[_0x4feb7c(0x8e5)],_0xa3c60a=_0x537728['DualWield']??![];if(!_0xfc5dd8||!_0x114a2c||!_0x2e109f)return;if(!_0x114a2c[_0x4feb7c(0x1ff)]())return;let _0x4c0bb4=_0xa3c60a?_0x5c160e[_0x4feb7c(0x29e)](_0x2e109f):0x1;for(let _0x2c2125=0x0;_0x2c2125<_0x4c0bb4;_0x2c2125++){_0xa3c60a&&_0x2e109f[_0x4feb7c(0x55e)]()&&_0x5c160e[_0x4feb7c(0x40b)](_0x4feb7c(0xb13),_0x2e109f,_0x2c2125);if(_0x537728[_0x4feb7c(0x8d4)])_0x5c160e['push'](_0x4feb7c(0x6e6),_0x2e109f,_0x114a2c);if(_0x537728[_0x4feb7c(0x520)]>0x0)_0x5c160e[_0x4feb7c(0x40b)](_0x4feb7c(0x40e),_0x537728[_0x4feb7c(0x520)]);if(_0x537728[_0x4feb7c(0x46d)])_0x5c160e[_0x4feb7c(0x40b)](_0x4feb7c(0x74a),_0x2e109f,_0x388efd,_0x114a2c['item']()['animationId']);if(_0x537728[_0x4feb7c(0x727)])_0x5c160e['push']('waitForAnimation');for(const _0x4d6d4b of _0x388efd){if(_0x4feb7c(0x710)===_0x4feb7c(0x4be))this['isTpb']()&&this['_phase']===_0x4feb7c(0x358)&&(this[_0x4feb7c(0xb07)]=null),_0x5cfced[_0x4feb7c(0x895)][_0x4feb7c(0x2c2)][_0x4feb7c(0x40c)](this);else{if(!_0x4d6d4b)continue;if(_0x537728[_0x4feb7c(0x1ef)])_0x5c160e[_0x4feb7c(0x40b)](_0x4feb7c(0x83),_0x2e109f,_0x4d6d4b);}}}_0xa3c60a&&_0x2e109f[_0x4feb7c(0x55e)]()&&(_0x4feb7c(0x2fd)!==_0x4feb7c(0x970)?_0x5c160e[_0x4feb7c(0x40b)]('clearActiveWeaponSet',_0x2e109f):(this['_targetAngle']=0x0,this[_0x4feb7c(0x3ef)]=0x0));if(_0x537728['ApplyImmortal'])_0x5c160e[_0x4feb7c(0x40b)](_0x4feb7c(0x380),_0x2e109f,_0x388efd,![]);_0xfc5dd8[_0x4feb7c(0x58f)]('battlelog');}),PluginManager['registerCommand'](pluginData['name'],_0x2546c9(0x26b),_0x12b8f6=>{const _0x36577f=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x36577f(0x96)](_0x12b8f6,_0x12b8f6);const _0x57067a=$gameTemp[_0x36577f(0x3fb)](),_0x13be1c=BattleManager['_action'],_0x55420b=BattleManager[_0x36577f(0x41d)],_0x545244=BattleManager[_0x36577f(0xb4)]?BattleManager[_0x36577f(0xb4)][_0x36577f(0x699)](0x0):[],_0x19e19e=BattleManager['_logWindow'],_0x466171=_0x12b8f6['DualWield']??![];if(!_0x57067a||!_0x13be1c||!_0x55420b)return;if(!_0x13be1c['item']())return;let _0x49c979=_0x466171?_0x19e19e['getDualWieldTimes'](_0x55420b):0x1;for(let _0x447202=0x0;_0x447202<_0x49c979;_0x447202++){if(_0x36577f(0xb1a)!=='GkvNM')for(const _0x35822a of _0x545244){if(!_0x35822a)continue;_0x466171&&_0x55420b[_0x36577f(0x55e)]()&&(_0x36577f(0x629)==='uFqSI'?this[_0x36577f(0x8e6)]():_0x19e19e[_0x36577f(0x40b)](_0x36577f(0xb13),_0x55420b,_0x447202));if(_0x12b8f6[_0x36577f(0x8d4)])_0x19e19e[_0x36577f(0x40b)]('performAction',_0x55420b,_0x13be1c);if(_0x12b8f6[_0x36577f(0x3e2)]>0x0)_0x19e19e[_0x36577f(0x40b)](_0x36577f(0x40e),_0x12b8f6[_0x36577f(0x3e2)]);if(_0x12b8f6[_0x36577f(0x46d)])_0x19e19e[_0x36577f(0x40b)](_0x36577f(0x74a),_0x55420b,[_0x35822a],_0x13be1c[_0x36577f(0x1ff)]()[_0x36577f(0x15d)]);if(_0x12b8f6[_0x36577f(0x886)]>0x0)_0x19e19e[_0x36577f(0x40b)](_0x36577f(0x40e),_0x12b8f6[_0x36577f(0x886)]);if(_0x12b8f6[_0x36577f(0x1ef)])_0x19e19e[_0x36577f(0x40b)](_0x36577f(0x83),_0x55420b,_0x35822a);}else{if(_0x4e92f4)_0x4c74f7[_0x36577f(0x41d)]['setSTBExploited'](![]);const _0xad1463=_0x3e681f[0x0];_0x3b873b[_0x36577f(0x5c0)](_0xad1463,_0x5188c5);}}if(_0x466171&&_0x55420b[_0x36577f(0x55e)]()){if('guLro'===_0x36577f(0x132)){_0x212a1e[_0x36577f(0x79f)][_0x36577f(0x6e6)][_0x36577f(0x40c)](this,_0x12a6ab);if(this[_0x36577f(0x947)]())this[_0x36577f(0x3af)](_0x886f1d);}else _0x19e19e[_0x36577f(0x40b)]('clearActiveWeaponSet',_0x55420b);}if(_0x12b8f6[_0x36577f(0xb4e)])_0x19e19e[_0x36577f(0x40b)](_0x36577f(0x380),_0x55420b,_0x545244,![]);_0x57067a['setWaitMode'](_0x36577f(0x1d2));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Set_FinishAction',_0x23f895=>{const _0x2ac071=_0x2546c9;if(!SceneManager[_0x2ac071(0x671)]())return;VisuMZ[_0x2ac071(0x96)](_0x23f895,_0x23f895);const _0x35ed07=$gameTemp[_0x2ac071(0x3fb)](),_0x35e8ba=BattleManager[_0x2ac071(0x8c0)],_0xffea2e=BattleManager[_0x2ac071(0x41d)],_0x4c0cfc=BattleManager[_0x2ac071(0xb4)]?BattleManager[_0x2ac071(0xb4)]['slice'](0x0):[],_0x5fea4d=BattleManager[_0x2ac071(0x8e5)];if(!_0x35ed07||!_0x35e8ba||!_0xffea2e)return;if(!_0x35e8ba[_0x2ac071(0x1ff)]())return;if(_0x23f895['ApplyImmortal'])_0x5fea4d[_0x2ac071(0x40b)](_0x2ac071(0x380),_0xffea2e,_0x4c0cfc,![]);if(_0x23f895[_0x2ac071(0x5a5)])_0x5fea4d[_0x2ac071(0x40b)](_0x2ac071(0x310));if(_0x23f895[_0x2ac071(0x6ce)])_0x5fea4d[_0x2ac071(0x40b)](_0x2ac071(0x7d3));if(_0x23f895[_0x2ac071(0x998)])_0x5fea4d[_0x2ac071(0x40b)]('clear');if(_0x23f895['ActionEnd'])_0x5fea4d[_0x2ac071(0x40b)](_0x2ac071(0x896),_0xffea2e);if(_0x23f895[_0x2ac071(0x9ce)])_0x5fea4d[_0x2ac071(0x40b)](_0x2ac071(0x7b3));_0x35ed07[_0x2ac071(0x58f)](_0x2ac071(0x1d2));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0xad2),_0xbc4aa=>{const _0x242b83=_0x2546c9;if(!SceneManager[_0x242b83(0x671)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0xbc4aa,_0xbc4aa);const _0x3e9b5e=$gameTemp[_0x242b83(0x3fb)](),_0x532a71=_0xbc4aa[_0x242b83(0x90b)];if(!_0x3e9b5e)return;$gameScreen[_0x242b83(0x82b)](_0xbc4aa['Angle'],_0xbc4aa[_0x242b83(0xa6a)],_0xbc4aa[_0x242b83(0xc2)]);if(_0x532a71)_0x3e9b5e[_0x242b83(0x58f)](_0x242b83(0x6ab));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x56a),_0x24e7ae=>{const _0x91120a=_0x2546c9;if(!SceneManager[_0x91120a(0x671)]())return;if(!Imported[_0x91120a(0x87b)])return;VisuMZ[_0x91120a(0x96)](_0x24e7ae,_0x24e7ae);const _0x5a48a5=$gameTemp[_0x91120a(0x3fb)](),_0x1de6e2=_0x24e7ae['WaitForAngle'];if(!_0x5a48a5)return;$gameScreen['setBattleAngle'](0x0,_0x24e7ae[_0x91120a(0xa6a)],_0x24e7ae[_0x91120a(0xc2)]);if(_0x1de6e2)_0x5a48a5['setWaitMode'](_0x91120a(0x6ab));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Angle_WaitForAngle',_0xa3395c=>{const _0x3f6641=_0x2546c9;if(!SceneManager[_0x3f6641(0x671)]())return;if(!Imported[_0x3f6641(0x87b)])return;const _0x32ac0b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x32ac0b)return;_0x32ac0b['setWaitMode'](_0x3f6641(0x6ab));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x9e4),_0x2e8b9d=>{const _0x11788c=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x11788c(0x96)](_0x2e8b9d,_0x2e8b9d);const _0x5be418=$gameTemp[_0x11788c(0x3fb)](),_0x501dc3=BattleManager[_0x11788c(0x8c0)],_0x24727a=BattleManager[_0x11788c(0x41d)],_0x591584=VisuMZ[_0x11788c(0x2ed)](_0x2e8b9d[_0x11788c(0x21e)]),_0x179c35=_0x2e8b9d[_0x11788c(0x4d6)],_0x4bb3cd=BattleManager['_logWindow'];if(!_0x5be418||!_0x501dc3||!_0x24727a)return;if(!_0x501dc3[_0x11788c(0x1ff)]())return;let _0x2932c1=_0x501dc3[_0x11788c(0x1ff)]()[_0x11788c(0x15d)];if(_0x2932c1<0x0)_0x2932c1=_0x24727a[_0x11788c(0x8b0)]();$gameTemp[_0x11788c(0x6c6)](_0x591584,_0x2932c1,_0x179c35),_0x2e8b9d[_0x11788c(0x727)]&&_0x5be418[_0x11788c(0x58f)](_0x11788c(0x128));}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_Animation_AttackAnimation',_0x58e72e=>{const _0x2b4703=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2b4703(0x96)](_0x58e72e,_0x58e72e);const _0x2c95c9=$gameTemp[_0x2b4703(0x3fb)](),_0x44ce8f=BattleManager[_0x2b4703(0x41d)],_0x36d313=VisuMZ[_0x2b4703(0x2ed)](_0x58e72e[_0x2b4703(0x21e)]),_0x1c67b3=_0x58e72e['Mirror'],_0x474812=BattleManager['_logWindow'];if(!_0x2c95c9||!_0x44ce8f)return;const _0x5d9027=_0x44ce8f[_0x2b4703(0x8b0)]();$gameTemp[_0x2b4703(0x6c6)](_0x36d313,_0x5d9027,_0x1c67b3),_0x58e72e[_0x2b4703(0x727)]&&_0x2c95c9['setWaitMode']('battleAnimation');}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x3a4),_0x214c54=>{const _0x4ec3f0=_0x2546c9;if(!SceneManager[_0x4ec3f0(0x671)]())return;VisuMZ[_0x4ec3f0(0x96)](_0x214c54,_0x214c54);const _0x52a606=_0x1f08af[_0x4ec3f0(0x494)](_0x214c54[_0x4ec3f0(0x964)]);if(_0x52a606<=0x0)return;const _0x3a148c=$gameTemp[_0x4ec3f0(0x3fb)](),_0x1f08af=BattleManager[_0x4ec3f0(0x41d)],_0x1ab869=VisuMZ['CreateActionSequenceTargets'](_0x214c54[_0x4ec3f0(0x21e)]),_0x1375a5=_0x214c54['Mirror'],_0x2886ee=BattleManager[_0x4ec3f0(0x8e5)];if(!_0x3a148c||!_0x1f08af)return;$gameTemp[_0x4ec3f0(0x6c6)](_0x1ab869,_0x52a606,_0x1375a5),_0x214c54[_0x4ec3f0(0x727)]&&_0x3a148c[_0x4ec3f0(0x58f)](_0x4ec3f0(0x128));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x64),_0x250274=>{const _0x45f5af=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x45f5af(0x96)](_0x250274,_0x250274);const _0x1241be=$gameTemp['getLastPluginCommandInterpreter'](),_0x2ad9db=BattleManager[_0x45f5af(0x8c0)],_0x1b36ac=_0x250274[_0x45f5af(0x4d6)],_0x2ab245=VisuMZ[_0x45f5af(0x2ed)](_0x250274['Targets']);if(!_0x1241be||!_0x2ad9db)return;if(!_0x2ad9db[_0x45f5af(0x1ff)]())return;for(const _0x1f95e1 of _0x2ab245){if(!_0x1f95e1)continue;_0x1f95e1['performCastAnimation'](_0x2ad9db,_0x1b36ac);}if(_0x250274[_0x45f5af(0x727)])_0x1241be[_0x45f5af(0x58f)](_0x45f5af(0x128));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x77c),_0x50c08=>{const _0x3b1bc1=_0x2546c9;VisuMZ[_0x3b1bc1(0x96)](_0x50c08,_0x50c08);const _0x5a4b70=$gameTemp[_0x3b1bc1(0x3fb)](),_0x382fd3=VisuMZ[_0x3b1bc1(0x2ed)](_0x50c08['Targets']),_0x1e237b=_0x50c08[_0x3b1bc1(0x83f)];if(!_0x1e237b)return;for(const _0x32aa55 of _0x382fd3){if(!_0x32aa55)continue;if(!_0x32aa55[_0x3b1bc1(0x55e)]())continue;_0x32aa55[_0x3b1bc1(0x5c5)](_0x1e237b);}}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x898),_0x1b80c8=>{const _0x574161=_0x2546c9;if(!SceneManager[_0x574161(0x465)])return;if(!SceneManager[_0x574161(0x465)][_0x574161(0x5a6)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ['ConvertParams'](_0x1b80c8,_0x1b80c8);const _0x18e231=$gameTemp['getLastPluginCommandInterpreter'](),_0x42f766=Math[_0x574161(0x19b)](_0x1b80c8[_0x574161(0x18e)]),_0x2a174c=Math[_0x574161(0x19b)](_0x1b80c8[_0x574161(0x385)]);$gameTemp[_0x574161(0x232)](_0x42f766,_0x2a174c,_0x1b80c8[_0x574161(0x147)],_0x1b80c8['Mirror'],_0x1b80c8[_0x574161(0x82a)]),_0x1b80c8[_0x574161(0x581)]&&_0x18e231&&(SceneManager[_0x574161(0x465)]['_spriteset']['updatePointAnimations'](),_0x18e231[_0x574161(0x58f)](_0x574161(0x128)));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x9d1),_0xe192b5=>{const _0x221408=_0x2546c9;if(!SceneManager[_0x221408(0x671)]())return;VisuMZ[_0x221408(0x96)](_0xe192b5,_0xe192b5);const _0x1d76fd=$gameTemp[_0x221408(0x3fb)](),_0x56de4d=VisuMZ[_0x221408(0x2ed)](_0xe192b5['Targets']),_0x31cb27=_0xe192b5[_0x221408(0x147)],_0x4f16bb=_0xe192b5[_0x221408(0x4d6)];if(!_0x1d76fd)return;$gameTemp[_0x221408(0x6c6)](_0x56de4d,_0x31cb27,_0x4f16bb);if(_0xe192b5[_0x221408(0x727)])_0x1d76fd[_0x221408(0x58f)]('battleAnimation');}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x847),_0xaa95b7=>{const _0x510cd0=_0x2546c9;if(!SceneManager[_0x510cd0(0x671)]())return;const _0x567d25=$gameTemp[_0x510cd0(0x3fb)]();if(!_0x567d25)return;_0x567d25[_0x510cd0(0x58f)](_0x510cd0(0x128));}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_BattleLog_AddText',_0x3c1245=>{const _0x310a36=_0x2546c9;if(!SceneManager[_0x310a36(0x671)]())return;VisuMZ[_0x310a36(0x96)](_0x3c1245,_0x3c1245);const _0x4c139b=BattleManager[_0x310a36(0x8e5)],_0x34fbe2=_0x3c1245[_0x310a36(0x422)]&&Imported[_0x310a36(0xcc)];_0x4c139b[_0x310a36(0x9d6)](_0x3c1245[_0x310a36(0x91d)]),_0x34fbe2&&Imported[_0x310a36(0xcc)]&&('QLuyP'!==_0x310a36(0xa3c)?$gameSystem[_0x310a36(0x603)](_0x3c1245['Text']||'',_0x3c1245[_0x310a36(0x6bc)]||0x0):(_0x72cecb+=_0x4bd177[_0x310a36(0x55e)]()?-_0x52e501:_0x59753c,_0x3bc470+=_0x37ba5e));}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_BattleLog_Clear',_0x2f2348=>{const _0x52d53e=_0x2546c9;if(!SceneManager[_0x52d53e(0x671)]())return;const _0x26adbe=BattleManager[_0x52d53e(0x8e5)];_0x26adbe[_0x52d53e(0x3b6)]();}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_BattleLog_DisplayAction',_0x68fa83=>{const _0x37f8e1=_0x2546c9;if(!SceneManager['isSceneBattle']())return;const _0x3b0e8b=$gameTemp[_0x37f8e1(0x3fb)](),_0x1eddb4=BattleManager[_0x37f8e1(0x8c0)],_0x3f503a=BattleManager[_0x37f8e1(0x41d)],_0xd60dc3=BattleManager[_0x37f8e1(0x8e5)];if(!_0x3b0e8b||!_0x1eddb4||!_0x3f503a)return;if(!_0x1eddb4[_0x37f8e1(0x1ff)]())return;_0xd60dc3[_0x37f8e1(0x3db)](_0x3f503a,_0x1eddb4['item']()),_0x3b0e8b['setWaitMode'](_0x37f8e1(0x1d2));}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],'ActSeq_BattleLog_PopBaseLine',_0x5d5cbb=>{const _0xc04e2c=_0x2546c9;if(!SceneManager[_0xc04e2c(0x671)]())return;const _0x3b2a70=BattleManager[_0xc04e2c(0x8e5)];_0x3b2a70[_0xc04e2c(0xb4b)]();}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x3d1),_0x11c2df=>{const _0x5ed5f3=_0x2546c9;if(!SceneManager[_0x5ed5f3(0x671)]())return;const _0x3398af=BattleManager['_logWindow'];_0x3398af[_0x5ed5f3(0x77e)]();}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x5fc),_0x318365=>{const _0x2ff2d6=_0x2546c9;if(!SceneManager[_0x2ff2d6(0x671)]())return;const _0x287095=BattleManager['_logWindow'];_0x287095[_0x2ff2d6(0x48c)]();}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x9fb),_0x29bdb4=>{const _0xf8ddb3=_0x2546c9;if(!SceneManager[_0xf8ddb3(0x671)]())return;VisuMZ[_0xf8ddb3(0x96)](_0x29bdb4,_0x29bdb4),SceneManager[_0xf8ddb3(0x465)][_0xf8ddb3(0xac)](_0x29bdb4[_0xf8ddb3(0x4cf)]);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x2e5),_0xb9eae1=>{const _0x3a120c=_0x2546c9;if(!SceneManager[_0x3a120c(0x671)]())return;const _0x5383aa=$gameTemp[_0x3a120c(0x3fb)]();_0x5383aa[_0x3a120c(0x58f)](_0x3a120c(0x1d2));}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x73d),_0x337d02=>{const _0x23fb32=_0x2546c9;if(!SceneManager[_0x23fb32(0x671)]())return;const _0x1e3c74=$gameTemp[_0x23fb32(0x3fb)](),_0x3a6f19=BattleManager[_0x23fb32(0x8e5)];_0x3a6f19['waitForNewLine'](),_0x1e3c74[_0x23fb32(0x58f)](_0x23fb32(0x1d2));}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_Camera_Clamp',_0x2f82ec=>{const _0x41d245=_0x2546c9;if(!SceneManager[_0x41d245(0x671)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x41d245(0x96)](_0x2f82ec,_0x2f82ec);const _0x3b2e16=$gameScreen['battleCameraData']();_0x3b2e16[_0x41d245(0x30b)]=_0x2f82ec['Setting'];}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0xb32),_0x1059bf=>{const _0x94cdf9=_0x2546c9;if(!SceneManager[_0x94cdf9(0x671)]())return;if(!Imported[_0x94cdf9(0x87b)])return;VisuMZ['ConvertParams'](_0x1059bf,_0x1059bf);const _0x4b39f1=$gameTemp[_0x94cdf9(0x3fb)](),_0x587941=_0x1059bf[_0x94cdf9(0x47a)];$gameScreen['setBattleCameraPoint'](_0x1059bf[_0x94cdf9(0x73c)],_0x1059bf[_0x94cdf9(0xa7d)],_0x1059bf['Duration'],_0x1059bf['EasingType']);if(_0x587941)_0x4b39f1[_0x94cdf9(0x58f)](_0x94cdf9(0xb04));}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],'ActSeq_Camera_FocusTarget',_0x5e2e34=>{const _0x463033=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x463033(0x87b)])return;VisuMZ['ConvertParams'](_0x5e2e34,_0x5e2e34);const _0x2c3b53=$gameTemp[_0x463033(0x3fb)](),_0x631ac2=VisuMZ['CreateActionSequenceTargets'](_0x5e2e34[_0x463033(0x21e)]),_0x2f2e68=_0x5e2e34[_0x463033(0x47a)];$gameScreen[_0x463033(0x714)](_0x631ac2,_0x5e2e34[_0x463033(0xa6a)],_0x5e2e34[_0x463033(0xc2)]);if(_0x2f2e68)_0x2c3b53[_0x463033(0x58f)]('battleCamera');}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x982),_0x1760b4=>{const _0x4a8c7b=_0x2546c9;if(!SceneManager[_0x4a8c7b(0x671)]())return;if(!Imported[_0x4a8c7b(0x87b)])return;VisuMZ[_0x4a8c7b(0x96)](_0x1760b4,_0x1760b4);const _0x3a4db5=$gameTemp[_0x4a8c7b(0x3fb)](),_0x1e6d1c=_0x1760b4[_0x4a8c7b(0x47a)];$gameScreen['setBattleCameraOffset'](_0x1760b4['OffsetX'],_0x1760b4[_0x4a8c7b(0x97)],_0x1760b4[_0x4a8c7b(0xa6a)],_0x1760b4[_0x4a8c7b(0xc2)]);if(_0x1e6d1c)_0x3a4db5[_0x4a8c7b(0x58f)](_0x4a8c7b(0xb04));}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],'ActSeq_Camera_Reset',_0x5c5ecf=>{const _0x1f6ed1=_0x2546c9;if(!SceneManager[_0x1f6ed1(0x671)]())return;if(!Imported[_0x1f6ed1(0x87b)])return;VisuMZ[_0x1f6ed1(0x96)](_0x5c5ecf,_0x5c5ecf);const _0x796ab2=$gameTemp[_0x1f6ed1(0x3fb)](),_0xf37ff3=_0x5c5ecf[_0x1f6ed1(0x7c7)],_0x244652=_0x5c5ecf[_0x1f6ed1(0x867)],_0x1be811=_0x5c5ecf[_0x1f6ed1(0x47a)];if(_0xf37ff3){if('Yuvze'!==_0x1f6ed1(0x7d4))_0x5567e8['BattleCore']['Game_Battler_performEvasion'][_0x1f6ed1(0x40c)](this),this[_0x1f6ed1(0x2a2)]();else{const _0x15d5e6=Math[_0x1f6ed1(0x19b)](Graphics['width']/0x2),_0x2c9b79=Math[_0x1f6ed1(0x19b)](Graphics[_0x1f6ed1(0x3de)]/0x2);$gameScreen[_0x1f6ed1(0x4de)](_0x15d5e6,_0x2c9b79,_0x5c5ecf[_0x1f6ed1(0xa6a)],_0x5c5ecf[_0x1f6ed1(0xc2)]);}}_0x244652&&$gameScreen[_0x1f6ed1(0x787)](0x0,0x0,_0x5c5ecf[_0x1f6ed1(0xa6a)],_0x5c5ecf[_0x1f6ed1(0xc2)]);if(_0x1be811)_0x796ab2['setWaitMode'](_0x1f6ed1(0xb04));}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x2ab),_0x35a178=>{const _0x2a34cc=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x288f42=$gameTemp[_0x2a34cc(0x3fb)]();if(!_0x288f42)return;_0x288f42['setWaitMode']('battleCamera');}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x46a),_0x11e49b=>{const _0x2c9a37=_0x2546c9;if(!SceneManager[_0x2c9a37(0x671)]())return;if(!Imported[_0x2c9a37(0xb25)])return;VisuMZ['ConvertParams'](_0x11e49b,_0x11e49b);const _0x3632fa=VisuMZ[_0x2c9a37(0x2ed)](_0x11e49b[_0x2c9a37(0x21e)]),_0x3b7428=_0x11e49b[_0x2c9a37(0x8e3)][_0x2c9a37(0x917)]()[_0x2c9a37(0xb19)]();for(const _0x5b1c20 of _0x3632fa){if(_0x2c9a37(0x975)===_0x2c9a37(0x9b6))return 0x0;else{if(!_0x5b1c20)continue;_0x5b1c20[_0x2c9a37(0x252)](_0x3b7428);}}}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],'ActSeq_DB_DragonbonesTimeScale',_0x57e6f=>{const _0xbd699e=_0x2546c9;if(!SceneManager[_0xbd699e(0x671)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0xbd699e(0x96)](_0x57e6f,_0x57e6f);const _0x33defd=VisuMZ['CreateActionSequenceTargets'](_0x57e6f[_0xbd699e(0x21e)]),_0x1bffd6=_0x57e6f[_0xbd699e(0x263)];for(const _0x245156 of _0x33defd){if(!_0x245156)continue;_0x245156['dragonbonesData']()['timeScale']=_0x1bffd6;}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x16c),_0x50aca5=>{const _0x110fdc=_0x2546c9;if(!SceneManager[_0x110fdc(0x671)]())return;if(!Imported[_0x110fdc(0xb4d)])return;VisuMZ[_0x110fdc(0x96)](_0x50aca5,_0x50aca5);const _0x35b3e9=BattleManager[_0x110fdc(0x8c0)],_0x218c86=_0x50aca5[_0x110fdc(0x4eb)];if(!_0x35b3e9)return;_0x35b3e9[_0x110fdc(0x214)]=_0x218c86;}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_Element_Clear',_0x4fb384=>{const _0x55320a=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x55320a(0xb4d)])return;const _0x3301ef=BattleManager[_0x55320a(0x8c0)];if(!_0x3301ef)return;_0x3301ef[_0x55320a(0x576)]();}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x7bc),_0x12fd5f=>{const _0x1ca0d5=_0x2546c9;if(!SceneManager[_0x1ca0d5(0x671)]())return;if(!Imported[_0x1ca0d5(0xb4d)])return;VisuMZ[_0x1ca0d5(0x96)](_0x12fd5f,_0x12fd5f);const _0x4db980=BattleManager[_0x1ca0d5(0x8c0)],_0x349e28=_0x12fd5f[_0x1ca0d5(0x4eb)];if(!_0x4db980)return;_0x4db980[_0x1ca0d5(0xab5)]=_0x349e28;}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x10e),_0xbca30b=>{const _0x4ed248=_0x2546c9;if(!SceneManager[_0x4ed248(0x671)]())return;if(!Imported[_0x4ed248(0xb4d)])return;const _0x18e114=BattleManager[_0x4ed248(0x8c0)];if(!_0x18e114)return;_0x18e114['_battleCoreNoElement']=!![];}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x626),_0x1aa17b=>{const _0x217768=_0x2546c9;if(!Imported[_0x217768(0x68b)])return;if(!SceneManager[_0x217768(0x671)]())return;VisuMZ[_0x217768(0x96)](_0x1aa17b,_0x1aa17b);const _0x518c42=VisuMZ['CreateActionSequenceTargets'](_0x1aa17b[_0x217768(0x21e)]);for(const _0x21cc96 of _0x518c42){if(!_0x21cc96)continue;_0x21cc96[_0x217768(0x8cb)](_0x217768(0x877)),_0x21cc96[_0x217768(0x8cb)](_0x217768(0x60e)),_0x21cc96[_0x217768(0x8cb)]('tv'),_0x21cc96[_0x217768(0x2cd)]();}$gamePlayer[_0x217768(0x48c)]();}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x192),_0x9c6991=>{const _0x3732d7=_0x2546c9;if(!Imported[_0x3732d7(0x68b)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3732d7(0x96)](_0x9c6991,_0x9c6991);const _0x49d8f=VisuMZ[_0x3732d7(0x2ed)](_0x9c6991['Targets']),_0x35c154=_0x3732d7(0x60e);_0x9c6991[_0x3732d7(0x29f)]=Math[_0x3732d7(0x57f)](_0x9c6991[_0x3732d7(0x959)]/0x2),_0x9c6991[_0x3732d7(0x72e)]=_0x9c6991[_0x3732d7(0x959)],_0x9c6991[_0x3732d7(0x301)]=!![];for(const _0x90b6df of _0x49d8f){if(!_0x90b6df)continue;_0x90b6df[_0x3732d7(0x179)](_0x35c154,_0x9c6991);}$gamePlayer[_0x3732d7(0x48c)]();}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x69c),_0xe58b7=>{const _0x14ce8a=_0x2546c9;if(!Imported[_0x14ce8a(0x68b)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xe58b7,_0xe58b7);const _0x2a424c=VisuMZ['CreateActionSequenceTargets'](_0xe58b7[_0x14ce8a(0x21e)]);for(const _0x31babe of _0x2a424c){if(!_0x31babe)continue;_0x31babe[_0x14ce8a(0x8cb)](_0x14ce8a(0x60e));}$gamePlayer[_0x14ce8a(0x48c)]();}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Horror_NoiseCreate',_0x46cf17=>{const _0x456603=_0x2546c9;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x456603(0x671)]())return;VisuMZ[_0x456603(0x96)](_0x46cf17,_0x46cf17);const _0xa7a361=VisuMZ[_0x456603(0x2ed)](_0x46cf17[_0x456603(0x21e)]),_0x5da9ab=_0x456603(0x877);for(const _0x3b96ac of _0xa7a361){if(_0x456603(0xb37)===_0x456603(0xb37)){if(!_0x3b96ac)continue;_0x3b96ac[_0x456603(0x179)](_0x5da9ab,_0x46cf17);}else{const _0x3918bf=_0x731231['format'](_0x1374ba[_0x456603(0x395)](),_0x7ac369['param'](_0x381566));this[_0x456603(0x40b)]('popBaseLine'),this[_0x456603(0x40b)](_0x456603(0x77e)),this[_0x456603(0x40b)](_0x456603(0x9d6),_0x3918bf),this[_0x456603(0x40b)]('wait');}}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],_0x2546c9(0x704),_0x338f7d=>{const _0x573e59=_0x2546c9;if(!Imported[_0x573e59(0x68b)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x573e59(0x96)](_0x338f7d,_0x338f7d);const _0x5da2df=VisuMZ[_0x573e59(0x2ed)](_0x338f7d[_0x573e59(0x21e)]);for(const _0x285a8a of _0x5da2df){if(!_0x285a8a)continue;_0x285a8a['removeHorrorEffect'](_0x573e59(0x877));}$gamePlayer[_0x573e59(0x48c)]();}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Horror_TVCreate',_0x5a8904=>{const _0x12e1ec=_0x2546c9;if(!Imported[_0x12e1ec(0x68b)])return;if(!SceneManager[_0x12e1ec(0x671)]())return;VisuMZ[_0x12e1ec(0x96)](_0x5a8904,_0x5a8904);const _0x871be3=VisuMZ[_0x12e1ec(0x2ed)](_0x5a8904[_0x12e1ec(0x21e)]),_0x16eb9d='tv';for(const _0x31f3d7 of _0x871be3){if('RxWgq'==='QkKMw'){const _0x18dea4=_0x5a786a[_0x12e1ec(0x6ff)]()?-0x1:0x1;let _0x1dd5ba=this[_0x12e1ec(0xa2f)];_0x1dd5ba+=this[_0x12e1ec(0x21b)]();let _0x57c904=this['_baseY'];const _0x317b2c=this['_distortionSprite']['scale']['y'];_0x57c904+=this['extraPositionY']();const _0x32d54b=_0xc3b818[_0x12e1ec(0x465)][_0x12e1ec(0x432)];if(_0x32d54b&&this[_0x12e1ec(0x59a)]===_0x32d54b){_0x1dd5ba+=_0x32d54b['x']-this[_0x12e1ec(0x337)]();const _0x24a975=_0x32d54b[_0x12e1ec(0x7e8)]()*0x3/0x4;_0x57c904=_0x32d54b['y']+_0x24a975,_0x57c904=_0x47d5cb[_0x12e1ec(0xaaa)](_0x57c904,_0x32d54b['y']+this['y']-this[_0x12e1ec(0x3de)]+_0x24a975);}_0xa9c469['x']=_0x259568[_0x12e1ec(0x19b)](_0x1dd5ba+this[_0x12e1ec(0x337)]()*_0x18dea4),_0x29bf8b['y']=_0x5a47ba[_0x12e1ec(0x19b)](_0x57c904+this[_0x12e1ec(0xad8)]());}else{if(!_0x31f3d7)continue;_0x31f3d7[_0x12e1ec(0x179)](_0x16eb9d,_0x5a8904);}}$gamePlayer[_0x12e1ec(0x48c)]();}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x613),_0x585eb5=>{const _0x3a11aa=_0x2546c9;if(!Imported[_0x3a11aa(0x68b)])return;if(!SceneManager[_0x3a11aa(0x671)]())return;VisuMZ[_0x3a11aa(0x96)](_0x585eb5,_0x585eb5);const _0x145ee0=VisuMZ['CreateActionSequenceTargets'](_0x585eb5[_0x3a11aa(0x21e)]);for(const _0x480b65 of _0x145ee0){if(_0x3a11aa(0x86c)!==_0x3a11aa(0x86c)){const _0x5a1d22=this['isAlive']();this[_0x3a11aa(0x555)]=![],_0x5a1d22&&this['_deathStateApplied']&&this['die'](),this[_0x3a11aa(0x7c3)]=![],this[_0x3a11aa(0x48c)](),this[_0x3a11aa(0x4ca)]()&&_0x5a1d22&&(this['performCollapse'](),this[_0x3a11aa(0x32f)]());}else{if(!_0x480b65)continue;_0x480b65[_0x3a11aa(0x8cb)]('tv');}}$gamePlayer[_0x3a11aa(0x48c)]();}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],'ActSeq_Impact_BlueRedInvert',_0x28bf36=>{const _0x2740ab=_0x2546c9;if(!Imported[_0x2740ab(0x63d)])return;const _0xb57296=SceneManager[_0x2740ab(0x465)]['_spriteset'];if(!_0xb57296)return;if(VisuMZ[_0x2740ab(0x4b4)][_0x2740ab(0xa05)]<=1.04){alert(_0x2740ab(0x892)),SceneManager[_0x2740ab(0x510)]();return;}VisuMZ[_0x2740ab(0x96)](_0x28bf36,_0x28bf36);const _0x503602=_0x28bf36['Enable'];_0xb57296['setupBlueRedInvertImpactFilter'](_0x503602);}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x44a),_0x391b15=>{const _0x955be4=_0x2546c9;if(!SceneManager[_0x955be4(0x671)]())return;if(!Imported[_0x955be4(0x63d)])return;const _0x3df970=SceneManager[_0x955be4(0x465)][_0x955be4(0x5a6)];if(!_0x3df970)return;VisuMZ[_0x955be4(0x96)](_0x391b15,_0x391b15);const _0x455907=_0x391b15[_0x955be4(0x4d2)]||0x1,_0xdd09c=_0x391b15['Duration']||0x1,_0x255422=_0x391b15[_0x955be4(0xc2)]||_0x955be4(0x695);_0x3df970[_0x955be4(0xa94)](_0x455907,_0xdd09c,_0x255422);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x6a8),_0x542d60=>{const _0x5c49be=_0x2546c9;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3b47b9=SceneManager[_0x5c49be(0x465)]['_spriteset'];if(!_0x3b47b9)return;if(VisuMZ[_0x5c49be(0x4b4)][_0x5c49be(0xa05)]<=1.04){alert(_0x5c49be(0x892)),SceneManager[_0x5c49be(0x510)]();return;}VisuMZ[_0x5c49be(0x96)](_0x542d60,_0x542d60);const _0x5be793=_0x542d60[_0x5c49be(0x7c)];_0x3b47b9[_0x5c49be(0x668)](_0x5be793);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Impact_MotionBlurScreen',_0x509dbf=>{const _0x50e35d=_0x2546c9;if(!SceneManager[_0x50e35d(0x671)]())return;if(!Imported[_0x50e35d(0x63d)])return;const _0x3727a7=SceneManager[_0x50e35d(0x465)][_0x50e35d(0x5a6)];if(!_0x3727a7)return;VisuMZ[_0x50e35d(0x96)](_0x509dbf,_0x509dbf);const _0x558d4b=Number(_0x509dbf['Angle'])||0x0,_0x5585d9=Number(_0x509dbf[_0x50e35d(0x241)]),_0x173748=_0x509dbf[_0x50e35d(0xa6a)]||0x1,_0x382d6e=_0x509dbf[_0x50e35d(0xc2)]||'Linear';_0x3727a7[_0x50e35d(0x749)](_0x558d4b,_0x5585d9,_0x173748,_0x382d6e);}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_Impact_MotionBlurTarget',_0x306f47=>{const _0x7ec981=_0x2546c9;if(!SceneManager[_0x7ec981(0x671)]())return;if(!Imported[_0x7ec981(0x63d)])return;const _0x3f24cd=SceneManager[_0x7ec981(0x465)][_0x7ec981(0x5a6)];if(!_0x3f24cd)return;VisuMZ['ConvertParams'](_0x306f47,_0x306f47);const _0x4f0769=Number(_0x306f47['Angle'])||0x0,_0x3fbf1a=Number(_0x306f47[_0x7ec981(0x241)]),_0x196e50=_0x306f47['Duration']||0x1,_0x53f02e=_0x306f47['EasingType']||'Linear',_0x3e4b7d=VisuMZ[_0x7ec981(0x2ed)](_0x306f47['Targets']);for(const _0x44cea5 of _0x3e4b7d){if('FLepN'!==_0x7ec981(0x2f4))return _0xe01d45[_0x7ec981(0x2d5)]&&_0x11854d['description'][_0x7ec981(0xa7e)]('['+_0x4c44e7+']');else{if(!_0x44cea5)continue;if(!_0x44cea5['battler']())continue;_0x44cea5[_0x7ec981(0x2dc)]()[_0x7ec981(0x749)](_0x4f0769,_0x3fbf1a,_0x196e50,_0x53f02e);}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0xa48),_0x497ffc=>{const _0x4e37e3=_0x2546c9;if(!SceneManager[_0x4e37e3(0x671)]())return;if(!Imported[_0x4e37e3(0x63d)])return;VisuMZ[_0x4e37e3(0x96)](_0x497ffc,_0x497ffc);const _0x3aee5c={'delay':_0x497ffc[_0x4e37e3(0x95c)],'duration':_0x497ffc['duration'],'hue':_0x497ffc['hue'],'opacityStart':_0x497ffc[_0x4e37e3(0x254)],'tone':_0x497ffc[_0x4e37e3(0xb14)],'visible':!![]},_0x2ceb57=VisuMZ[_0x4e37e3(0x2ed)](_0x497ffc[_0x4e37e3(0x21e)]);for(const _0x18ed58 of _0x2ceb57){if(_0x4e37e3(0xa9e)===_0x4e37e3(0xa9e)){if(!_0x18ed58)continue;_0x18ed58[_0x4e37e3(0xf1)](_0x3aee5c);}else{const _0x3121e5=_0x442993[_0x4e37e3(0x895)][_0x4e37e3(0x4b7)][_0x4e37e3(0xafe)],_0x551b2d=_0x3121e5['BattleStartEvent'];_0x551b2d&&_0x2fc3d3[_0x4e37e3(0x895)]['CheckMapBattleEventValid'](_0x551b2d)&&(this[_0x4e37e3(0x80c)]=!![],_0x5882f6[_0x4e37e3(0x93c)](_0x3121e5[_0x4e37e3(0x60f)]),_0x2507a1[_0x4e37e3(0x8f6)](),_0x3a8c39['_interpreter']['_preBattleCommonEvent']=!![]),_0x3121e5[_0x4e37e3(0x203)]>0x0&&(this[_0x4e37e3(0x974)]=!![]);}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Impact_MotionTrailRemove',_0x160666=>{const _0x47307d=_0x2546c9;if(!SceneManager[_0x47307d(0x671)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x47307d(0x96)](_0x160666,_0x160666);const _0x3c2efa=VisuMZ[_0x47307d(0x2ed)](_0x160666['Targets']);for(const _0x33afe0 of _0x3c2efa){if(_0x47307d(0x859)!==_0x47307d(0x212)){if(!_0x33afe0)continue;_0x33afe0[_0x47307d(0x589)]();}else this[_0x47307d(0x47e)](_0x32bc51[_0x47307d(0x223)],0x0);}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x364),_0x2a657f=>{const _0x5103df=_0x2546c9;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xe5885d=SceneManager[_0x5103df(0x465)]['_spriteset'];if(!_0xe5885d)return;if(VisuMZ[_0x5103df(0x4b4)][_0x5103df(0xa05)]<=1.04){alert(_0x5103df(0x892)),SceneManager[_0x5103df(0x510)]();return;}VisuMZ[_0x5103df(0x96)](_0x2a657f,_0x2a657f);const _0x214fa5=_0x2a657f[_0x5103df(0x7c)];_0xe5885d[_0x5103df(0xaf)](_0x214fa5);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x9a1),_0x383fc5=>{const _0x53ecdc=_0x2546c9;if(!Imported[_0x53ecdc(0x63d)])return;const _0x5d8be6=SceneManager[_0x53ecdc(0x465)][_0x53ecdc(0x5a6)];if(!_0x5d8be6)return;if(VisuMZ[_0x53ecdc(0x4b4)][_0x53ecdc(0xa05)]<=1.04){alert(_0x53ecdc(0x892)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x383fc5,_0x383fc5);const _0x429a35=_0x383fc5[_0x53ecdc(0x7c)];_0x5d8be6['setupOversaturateImpactFilter'](_0x429a35);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Impact_ShockwavePoint',_0x263072=>{const _0x1899c2=_0x2546c9;if(!Imported[_0x1899c2(0x63d)])return;const _0x3d9c72=SceneManager[_0x1899c2(0x465)][_0x1899c2(0x5a6)];if(!_0x3d9c72)return;VisuMZ[_0x1899c2(0x96)](_0x263072,_0x263072);const _0x20dc91=_0x263072['X']||0x0,_0x40c657=_0x263072['Y']||0x0,_0x2a5aee=_0x263072[_0x1899c2(0x13a)]||0x0,_0x4eea90=_0x263072[_0x1899c2(0xb0e)]||0x0,_0x3926c7=_0x263072['Duration']||0x1;_0x3d9c72[_0x1899c2(0x876)](_0x20dc91,_0x40c657,_0x2a5aee,_0x4eea90,_0x3926c7);}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x83e),_0x1ba8d6=>{const _0x575322=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x449202=SceneManager[_0x575322(0x465)][_0x575322(0x5a6)];if(!_0x449202)return;VisuMZ[_0x575322(0x96)](_0x1ba8d6,_0x1ba8d6);const _0x260613=VisuMZ['CreateActionSequenceTargets'](_0x1ba8d6[_0x575322(0x21e)]),_0x4c32d2=_0x1ba8d6[_0x575322(0x872)],_0x4824cf=_0x1ba8d6[_0x575322(0x43d)]||0x0,_0x5e2cc1=_0x1ba8d6['OffsetY']||0x0,_0x1407a2=_0x1ba8d6[_0x575322(0x13a)]||0x0,_0x44f19e=_0x1ba8d6[_0x575322(0xb0e)]||0x0,_0x4f3ba1=_0x1ba8d6[_0x575322(0xa6a)]||0x1;for(const _0x9bd5f5 of _0x260613){if(!_0x9bd5f5)continue;if(!_0x9bd5f5['battler']())continue;const _0x497ded=_0x9bd5f5[_0x575322(0x2dc)]();let _0x2e1ded=_0x497ded[_0x575322(0xa2f)],_0x41396f=_0x497ded[_0x575322(0x38a)];_0x2e1ded+=(Graphics[_0x575322(0x9f9)]-Graphics[_0x575322(0x8e7)])/0x2,_0x41396f+=(Graphics[_0x575322(0x3de)]-Graphics[_0x575322(0x73)])/0x2;if(_0x4c32d2[_0x575322(0x1e0)](/front/i)){if('JxBSW'!==_0x575322(0x1ad))_0x2e1ded+=(_0x9bd5f5[_0x575322(0x2e4)]()?0x1:-0x1)*_0x497ded[_0x575322(0x62e)]()/0x2;else return this[_0x575322(0x798)];}else _0x4c32d2[_0x575322(0x1e0)](/back/i)&&(_0x2e1ded+=(_0x9bd5f5[_0x575322(0x2e4)]()?-0x1:0x1)*_0x497ded['mainSpriteWidth']()/0x2);if(_0x4c32d2[_0x575322(0x1e0)](/head/i))_0x575322(0x988)!==_0x575322(0x988)?(_0x5b2430[_0x575322(0x895)][_0x575322(0x8e4)][_0x575322(0x40c)](this),_0x54ef06[_0x575322(0x262)]()):_0x41396f-=_0x497ded['mainSpriteHeight']();else _0x4c32d2['match'](/center/i)&&(_0x41396f-=_0x497ded['mainSpriteHeight']()/0x2);_0x2e1ded+=_0x4824cf,_0x41396f+=_0x5e2cc1,_0x449202[_0x575322(0x876)](_0x2e1ded,_0x41396f,_0x1407a2,_0x44f19e,_0x4f3ba1);}}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x97c),_0x26832f=>{const _0x45f102=_0x2546c9;if(!SceneManager[_0x45f102(0x671)]())return;if(!Imported[_0x45f102(0x63d)])return;const _0x30890a=SceneManager[_0x45f102(0x465)][_0x45f102(0x5a6)];if(!_0x30890a)return;VisuMZ[_0x45f102(0x96)](_0x26832f,_0x26832f);const _0x404082=VisuMZ[_0x45f102(0x2ed)](_0x26832f[_0x45f102(0x21e)]),_0xda101e=_0x26832f[_0x45f102(0x872)],_0x5b6e2b=_0x26832f['OffsetX']||0x0,_0x5c2ff4=_0x26832f[_0x45f102(0x97)]||0x0,_0x15efb3=_0x26832f[_0x45f102(0x13a)]||0x0,_0x42d277=_0x26832f[_0x45f102(0xb0e)]||0x0,_0x107d49=_0x26832f[_0x45f102(0xa6a)]||0x1,_0x205dce=Math['min'](..._0x404082[_0x45f102(0x1b0)](_0x16063a=>_0x16063a[_0x45f102(0x2dc)]()[_0x45f102(0xa2f)]-_0x16063a[_0x45f102(0x2dc)]()['mainSpriteWidth']()/0x2)),_0x27bb6b=Math[_0x45f102(0x556)](..._0x404082[_0x45f102(0x1b0)](_0x2bc2a0=>_0x2bc2a0[_0x45f102(0x2dc)]()[_0x45f102(0xa2f)]+_0x2bc2a0['battler']()[_0x45f102(0x62e)]()/0x2)),_0x5540af=Math[_0x45f102(0xaaa)](..._0x404082[_0x45f102(0x1b0)](_0xb0af38=>_0xb0af38[_0x45f102(0x2dc)]()[_0x45f102(0x38a)]-_0xb0af38['battler']()[_0x45f102(0x617)]())),_0x388631=Math[_0x45f102(0x556)](..._0x404082[_0x45f102(0x1b0)](_0x1a7766=>_0x1a7766[_0x45f102(0x2dc)]()[_0x45f102(0x38a)])),_0x5f1f46=_0x404082[_0x45f102(0xae4)](_0x42bca9=>_0x42bca9[_0x45f102(0x55e)]())[_0x45f102(0x4ce)],_0x59362=_0x404082[_0x45f102(0xae4)](_0x1f4b6a=>_0x1f4b6a[_0x45f102(0x2e4)]())[_0x45f102(0x4ce)];let _0x543e33=0x0,_0x2d10dc=0x0;if(_0xda101e['match'](/front/i))_0x543e33=_0x5f1f46>=_0x59362?_0x205dce:_0x27bb6b;else{if(_0xda101e[_0x45f102(0x1e0)](/middle/i)){if(_0x45f102(0xb41)!=='CqIfc')return _0x57b799(_0x492dae['$1'])[_0x45f102(0x24d)](/[\r\n]+/);else _0x543e33=(_0x205dce+_0x27bb6b)/0x2,melee=-0x1;}else _0xda101e[_0x45f102(0x1e0)](/back/i)&&(_0x543e33=_0x5f1f46>=_0x59362?_0x27bb6b:_0x205dce);}if(_0xda101e[_0x45f102(0x1e0)](/head/i))_0x2d10dc=_0x5540af;else{if(_0xda101e[_0x45f102(0x1e0)](/center/i))_0x2d10dc=(_0x5540af+_0x388631)/0x2;else _0xda101e['match'](/base/i)&&(_0x2d10dc=_0x388631);}_0x543e33+=(Graphics[_0x45f102(0x9f9)]-Graphics['boxWidth'])/0x2,_0x2d10dc+=(Graphics['height']-Graphics[_0x45f102(0x73)])/0x2,_0x543e33+=_0x5b6e2b,_0x2d10dc+=_0x5c2ff4,_0x30890a[_0x45f102(0x876)](_0x543e33,_0x2d10dc,_0x15efb3,_0x42d277,_0x107d49);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0xad5),_0x283091=>{const _0x276d70=_0x2546c9;if(!Imported[_0x276d70(0x63d)])return;const _0x578797=SceneManager[_0x276d70(0x465)]['_spriteset'];if(!_0x578797)return;if(VisuMZ['ActSeqImpact'][_0x276d70(0xa05)]<=1.04){if(_0x276d70(0x92b)!=='zEPli')this['subject']()&&this[_0x276d70(0x294)]()[_0x276d70(0xaa2)]()?_0xa9cb4a[_0x276d70(0x895)][_0x276d70(0x8bc)][_0x276d70(0x40c)](this):this['clear']();else{alert(_0x276d70(0x892)),SceneManager[_0x276d70(0x510)]();return;}}VisuMZ[_0x276d70(0x96)](_0x283091,_0x283091);const _0x5a25c6=$gameTemp[_0x276d70(0x3fb)](),_0x52e204=Math['max'](0.01,_0x283091[_0x276d70(0xb33)]);$gameTemp['setBattleImpactTimeScale'](_0x52e204,_0x5a25c6);}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x158),_0x4a8827=>{const _0x1f2871=_0x2546c9;if(!Imported[_0x1f2871(0x63d)])return;const _0x120c98=SceneManager[_0x1f2871(0x465)][_0x1f2871(0x5a6)];if(!_0x120c98)return;if(VisuMZ['ActSeqImpact'][_0x1f2871(0xa05)]<=1.04){alert(_0x1f2871(0x892)),SceneManager[_0x1f2871(0x510)]();return;}VisuMZ[_0x1f2871(0x96)](_0x4a8827,_0x4a8827);const _0xbcef6=$gameTemp['getLastPluginCommandInterpreter'](),_0x47b42b=_0x4a8827['ms']||0x1;VisuMZ[_0x1f2871(0x4b4)][_0x1f2871(0xa34)](_0x47b42b,_0xbcef6);}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x801),_0x2cc76c=>{const _0x4ad294=_0x2546c9;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x46830e=SceneManager[_0x4ad294(0x465)][_0x4ad294(0x5a6)];if(!_0x46830e)return;VisuMZ[_0x4ad294(0x96)](_0x2cc76c,_0x2cc76c);const _0x50e232=_0x2cc76c['X']||0x0,_0x402c99=_0x2cc76c['Y']||0x0,_0x11318d=_0x2cc76c[_0x4ad294(0x448)]||0x0,_0xf5151b=_0x2cc76c[_0x4ad294(0x56e)]||0x0,_0x3a54b0=_0x2cc76c[_0x4ad294(0xa6a)]||0x1,_0xb59f52=_0x2cc76c[_0x4ad294(0xc2)]||_0x4ad294(0x695);_0x46830e[_0x4ad294(0x779)](_0x11318d,_0x50e232,_0x402c99,_0xf5151b,_0x3a54b0,_0xb59f52);}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0xd0),_0x19b39e=>{const _0x270368=_0x2546c9;if(!Imported[_0x270368(0x63d)])return;const _0x30fb1d=SceneManager[_0x270368(0x465)][_0x270368(0x5a6)];if(!_0x30fb1d)return;VisuMZ[_0x270368(0x96)](_0x19b39e,_0x19b39e);const _0x878b17=VisuMZ[_0x270368(0x2ed)](_0x19b39e[_0x270368(0x21e)]),_0x3f4e59=_0x19b39e['TargetLocation'],_0xe596ff=_0x19b39e[_0x270368(0x43d)]||0x0,_0x1e1ab1=_0x19b39e[_0x270368(0x97)]||0x0,_0x323670=_0x19b39e[_0x270368(0x448)]||0x0,_0x24ec24=_0x19b39e[_0x270368(0x56e)]||0x0,_0x3f6e5f=_0x19b39e[_0x270368(0xa6a)]||0x1,_0x45a7a5=_0x19b39e[_0x270368(0xc2)]||'Linear',_0x47a464=Math[_0x270368(0xaaa)](..._0x878b17['map'](_0x366df4=>_0x366df4[_0x270368(0x2dc)]()[_0x270368(0xa2f)]-_0x366df4[_0x270368(0x2dc)]()[_0x270368(0x62e)]()/0x2)),_0x3d16b5=Math[_0x270368(0x556)](..._0x878b17[_0x270368(0x1b0)](_0x59d76c=>_0x59d76c['battler']()[_0x270368(0xa2f)]+_0x59d76c['battler']()[_0x270368(0x62e)]()/0x2)),_0x8afa8e=Math['min'](..._0x878b17['map'](_0x374c18=>_0x374c18[_0x270368(0x2dc)]()[_0x270368(0x38a)]-_0x374c18['battler']()[_0x270368(0x617)]())),_0x23f54e=Math['max'](..._0x878b17[_0x270368(0x1b0)](_0x298eb0=>_0x298eb0[_0x270368(0x2dc)]()[_0x270368(0x38a)])),_0x5220fb=_0x878b17[_0x270368(0xae4)](_0x2cd941=>_0x2cd941[_0x270368(0x55e)]())[_0x270368(0x4ce)],_0x52fb6c=_0x878b17[_0x270368(0xae4)](_0x201439=>_0x201439[_0x270368(0x2e4)]())[_0x270368(0x4ce)];let _0x3a02e1=0x0,_0x56b628=0x0;if(_0x3f4e59[_0x270368(0x1e0)](/front/i))'DrilO'!==_0x270368(0x9d7)?this['push'](_0x270368(0xb13),_0x1c7ef9,_0x22bc6c):_0x3a02e1=_0x5220fb>=_0x52fb6c?_0x47a464:_0x3d16b5;else{if(_0x3f4e59[_0x270368(0x1e0)](/middle/i))_0x3a02e1=(_0x47a464+_0x3d16b5)/0x2,melee=-0x1;else _0x3f4e59[_0x270368(0x1e0)](/back/i)&&(_0x270368(0x9f2)!==_0x270368(0x9f2)?this[_0x270368(0x774)]='default':_0x3a02e1=_0x5220fb>=_0x52fb6c?_0x3d16b5:_0x47a464);}if(_0x3f4e59['match'](/head/i))_0x56b628=_0x8afa8e;else{if(_0x3f4e59['match'](/center/i))_0x56b628=(_0x8afa8e+_0x23f54e)/0x2;else _0x3f4e59[_0x270368(0x1e0)](/base/i)&&(_0x56b628=_0x23f54e);}_0x3a02e1+=(Graphics[_0x270368(0x9f9)]-Graphics['boxWidth'])/0x2,_0x56b628+=(Graphics[_0x270368(0x3de)]-Graphics[_0x270368(0x73)])/0x2,_0x3a02e1+=_0xe596ff,_0x56b628+=_0x1e1ab1,_0x30fb1d['setupZoomBlurImpactFilter'](_0x323670,_0x3a02e1,_0x56b628,_0x24ec24,_0x3f6e5f,_0x45a7a5);}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x433),_0x4d3357=>{const _0x1c0f69=_0x2546c9;if(!Imported[_0x1c0f69(0x63d)])return;const _0x235fd7=SceneManager[_0x1c0f69(0x465)][_0x1c0f69(0x5a6)];if(!_0x235fd7)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){alert(_0x1c0f69(0x892)),SceneManager[_0x1c0f69(0x510)]();return;}VisuMZ[_0x1c0f69(0x96)](_0x4d3357,_0x4d3357);const _0x155c3e=VisuMZ[_0x1c0f69(0x2ed)](_0x4d3357[_0x1c0f69(0x21e)]),_0x4ce1d4={'filename':_0x4d3357['Filename'],'horzCells':_0x4d3357[_0x1c0f69(0xa17)]||0x1,'vertCells':_0x4d3357[_0x1c0f69(0x4e7)]||0x1,'frameDelay':_0x4d3357[_0x1c0f69(0x8cc)]||0x1,'smooth':_0x4d3357[_0x1c0f69(0xac1)]||![],'anchorX':_0x4d3357['anchorX']||0x0,'anchorY':_0x4d3357[_0x1c0f69(0x5ae)]||0x0,'offsetX':_0x4d3357['offsetX']||0x0,'offsetY':_0x4d3357[_0x1c0f69(0xa0b)]||0x0};for(const _0x1ff8ae of _0x155c3e){if(_0x1c0f69(0x881)==='RshRT')return _0x1a6292[_0x1c0f69(0x895)][_0x1c0f69(0x4b7)][_0x1c0f69(0x2fa)][_0x1c0f69(0x27b)];else{if(!_0x1ff8ae)continue;if(!_0x1ff8ae[_0x1c0f69(0x2dc)]())continue;_0x1ff8ae[_0x1c0f69(0x2dc)]()[_0x1c0f69(0x646)](_0x4ce1d4);}}const _0x5e16ff=$gameTemp[_0x1c0f69(0x3fb)]();_0x5e16ff&&_0x5e16ff[_0x1c0f69(0x58f)](_0x1c0f69(0xa50));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Inject_AnimationEnd',_0x2c44fb=>{const _0x270f90=_0x2546c9;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x192956=SceneManager['_scene'][_0x270f90(0x5a6)];if(!_0x192956)return;if(VisuMZ[_0x270f90(0x4b4)][_0x270f90(0xa05)]<=1.05){alert(_0x270f90(0x892)),SceneManager[_0x270f90(0x510)]();return;}VisuMZ['ConvertParams'](_0x2c44fb,_0x2c44fb);const _0x52e5eb=VisuMZ[_0x270f90(0x2ed)](_0x2c44fb[_0x270f90(0x21e)]);for(const _0x3a3278 of _0x52e5eb){if(!_0x3a3278)continue;if(!_0x3a3278[_0x270f90(0x2dc)]())continue;_0x3a3278[_0x270f90(0x2dc)]()[_0x270f90(0x6c0)]();}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x7b2),_0x299046=>{const _0x1d02ed=_0x2546c9;if(!Imported[_0x1d02ed(0x63d)])return;const _0x273cf2=SceneManager[_0x1d02ed(0x465)][_0x1d02ed(0x5a6)];if(!_0x273cf2)return;if(VisuMZ[_0x1d02ed(0x4b4)]['version']<=1.05){if(_0x1d02ed(0x882)==='Lnsmz'){alert(_0x1d02ed(0x892)),SceneManager['exit']();return;}else{const _0x1319d8=_0x563c68[_0x1d02ed(0x4c1)];if(_0x1319d8['match'](_0x5ef191[_0x1d02ed(0x895)]['RegExp'][_0x584dd5])){const _0x36a146=_0x1419ea['$1'],_0x45eb6b=_0x1d02ed(0x70b)[_0x1d02ed(0xa3e)](_0x36a146),_0x58405d=_0x17c240[_0x1d02ed(0x895)][_0x1d02ed(0x3c6)](_0x41794c,_0x2a84cf);_0x34e5d9[_0x1d02ed(0x895)]['JS'][_0x58405d]=new _0x4c7593(_0x45eb6b);}}}VisuMZ[_0x1d02ed(0x96)](_0x299046,_0x299046);const _0x17bac4=VisuMZ[_0x1d02ed(0x2ed)](_0x299046[_0x1d02ed(0x21e)]),_0x3d6648=_0x299046[_0x1d02ed(0x7ef)];for(const _0x363cb4 of _0x17bac4){if(!_0x363cb4)continue;if(!_0x363cb4[_0x1d02ed(0x2dc)]())continue;_0x363cb4[_0x1d02ed(0x2dc)]()['pauseInjectAnimation'](_0x3d6648);}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x6f7),_0x3905ef=>{const _0xe9d16=_0x2546c9;if(!SceneManager[_0xe9d16(0x671)]())return;const _0x551227=$gameTemp[_0xe9d16(0x3fb)]();if(!_0x551227)return;_0x551227['setWaitMode']('battleInjectAni');}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Mechanics_ActionEffect',_0x2c047f=>{const _0x335846=_0x2546c9;if(!SceneManager[_0x335846(0x671)]())return;VisuMZ[_0x335846(0x96)](_0x2c047f,_0x2c047f);const _0xfee201=$gameTemp[_0x335846(0x3fb)](),_0x4c3c9a=BattleManager[_0x335846(0x8c0)],_0x183b3f=BattleManager[_0x335846(0x41d)],_0x571fee=BattleManager[_0x335846(0x8e5)];if(!_0xfee201||!_0x4c3c9a||!_0x183b3f)return;if(!_0x4c3c9a[_0x335846(0x1ff)]())return;const _0x2c84a8=VisuMZ['CreateActionSequenceTargets'](_0x2c047f[_0x335846(0x21e)]);for(const _0x194215 of _0x2c84a8){if(!_0x194215)continue;_0x571fee['push']('actionEffect',_0x183b3f,_0x194215);}_0xfee201[_0x335846(0x58f)](_0x335846(0x1d2));}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_Mechanics_AddBuffDebuff',_0x424f37=>{const _0xd6f52a=_0x2546c9;if(!SceneManager[_0xd6f52a(0x671)]())return;VisuMZ[_0xd6f52a(0x96)](_0x424f37,_0x424f37);const _0x3b9450=['MAXHP',_0xd6f52a(0x4e6),_0xd6f52a(0x121),_0xd6f52a(0x625),_0xd6f52a(0x1da),_0xd6f52a(0x145),_0xd6f52a(0x4c7),'LUK'],_0x1bed84=_0x424f37[_0xd6f52a(0x84c)],_0x138f61=_0x424f37['Debuffs'],_0x16d3fb=_0x424f37[_0xd6f52a(0x7b9)],_0x45899e=VisuMZ[_0xd6f52a(0x2ed)](_0x424f37[_0xd6f52a(0x21e)]);for(const _0x200e93 of _0x45899e){if(!_0x200e93)continue;for(const _0x397747 of _0x1bed84){if(_0xd6f52a(0x762)!==_0xd6f52a(0x639)){const _0x383bc9=_0x3b9450[_0xd6f52a(0x402)](_0x397747[_0xd6f52a(0x13e)]()[_0xd6f52a(0xb19)]());_0x383bc9>=0x0&&_0x383bc9<=0x7&&_0x200e93[_0xd6f52a(0x12e)](_0x383bc9,_0x16d3fb);}else _0x429df1[_0xd6f52a(0x8ad)](this[_0xd6f52a(0x294)]());}for(const _0x4a4f92 of _0x138f61){if('lPzJq'===_0xd6f52a(0x20b))_0x3b086c['BattleCore'][_0xd6f52a(0x941)][_0xd6f52a(0x40c)](this),this['onEncounterBattleCore']();else{const _0x8d94e0=_0x3b9450['indexOf'](_0x4a4f92[_0xd6f52a(0x13e)]()['trim']());_0x8d94e0>=0x0&&_0x8d94e0<=0x7&&_0x200e93['addDebuff'](_0x8d94e0,_0x16d3fb);}}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x4d1),_0x20aa64=>{const _0x370a4b=_0x2546c9;if(!SceneManager[_0x370a4b(0x671)]())return;VisuMZ[_0x370a4b(0x96)](_0x20aa64,_0x20aa64);const _0x2fcf30=_0x20aa64['States'],_0x1c0d91=VisuMZ[_0x370a4b(0x2ed)](_0x20aa64[_0x370a4b(0x21e)]);for(const _0x45bb20 of _0x1c0d91){if(!_0x45bb20)continue;for(const _0x20cc7f of _0x2fcf30){_0x45bb20[_0x370a4b(0x4b0)](_0x20cc7f);}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x764),_0x450ba8=>{const _0x24698a=_0x2546c9;if(!SceneManager[_0x24698a(0x671)]())return;VisuMZ[_0x24698a(0x96)](_0x450ba8,_0x450ba8);const _0x2257d5=BattleManager[_0x24698a(0x8c0)],_0x9d12b7={'arPenRate':_0x450ba8['ArPenRate'],'arPenFlat':_0x450ba8[_0x24698a(0x705)],'arRedRate':_0x450ba8[_0x24698a(0x1fa)],'arRedFlat':_0x450ba8[_0x24698a(0x306)]};_0x2257d5['_armorPenetration']=_0x9d12b7;}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Mechanics_AnalyzeWeakness',_0x401add=>{const _0x258f6d=_0x2546c9;if(!SceneManager[_0x258f6d(0x671)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x258f6d(0x96)](_0x401add,_0x401add);const _0x3bc6d4=VisuMZ[_0x258f6d(0x2ed)](_0x401add[_0x258f6d(0x21e)]),_0x36ec6d=_0x401add[_0x258f6d(0xb0)]||0x1;for(const _0x20de15 of _0x3bc6d4){if(_0x258f6d(0x875)===_0x258f6d(0x140))_0x4bf9e9[_0x258f6d(0x895)]['BattleManager_startInput']['call'](this),this['isDTB']()&&this[_0x258f6d(0x7dc)]()&&!this[_0x258f6d(0xf8)]&&_0x266a2f[_0x258f6d(0x962)]()&&this[_0x258f6d(0x814)]();else{if(!_0x20de15)continue;if(!_0x20de15['isEnemy']())continue;_0x20de15[_0x258f6d(0x6ec)](_0x36ec6d);}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x940),_0x54e455=>{const _0x1064e2=_0x2546c9;if(!SceneManager[_0x1064e2(0x671)]())return;if(!Imported[_0x1064e2(0xab3)])return;if(!BattleManager[_0x1064e2(0xab0)]())return;VisuMZ[_0x1064e2(0x96)](_0x54e455,_0x54e455);const _0x4a017d=VisuMZ[_0x1064e2(0x2ed)](_0x54e455[_0x1064e2(0x21e)]),_0x5adf6a=_0x54e455[_0x1064e2(0x6df)],_0x3ba361=_0x54e455[_0x1064e2(0x6df)],_0x203934=_0x54e455[_0x1064e2(0x122)];for(const _0x2b06e0 of _0x4a017d){if(!_0x2b06e0)continue;if(_0x2b06e0[_0x1064e2(0x70c)]())_0x2b06e0[_0x1064e2(0x6b4)](_0x5adf6a);else{if(_0x2b06e0[_0x1064e2(0x94f)]()){if('fJmSb'!==_0x1064e2(0x65a)){_0x2b06e0[_0x1064e2(0x491)](_0x3ba361);if(_0x203934)_0x2b06e0[_0x1064e2(0x10f)]();}else{if(!_0x2b3605[_0x1064e2(0x165)]())return;const _0x47fe5d=this[_0x1064e2(0x2dc)]();if(!_0x47fe5d)return;if(_0x138e6c)this['setBattlerFacePoint'](_0x151c5b+_0x47fe5d['_baseX'],_0x438be6+_0x47fe5d['_baseY'],![]);_0x3af205+=_0x47fe5d[_0x1064e2(0x493)],_0x2a862e+=_0x47fe5d[_0x1064e2(0x450)],_0x47fe5d[_0x1064e2(0x791)](_0x14c5f5,_0x14445d,_0x5c2d75,_0x4aab09),this[_0x1064e2(0x684)]=_0x549bfe,this['_forcedHomeY']=_0x959aa;}}}}}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x9cd),_0x100c84=>{const _0x345c02=_0x2546c9;if(!SceneManager[_0x345c02(0x671)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0x345c02(0x96)](_0x100c84,_0x100c84);const _0x1f2e82=VisuMZ[_0x345c02(0x2ed)](_0x100c84['Targets']),_0x46bd42=_0x100c84[_0x345c02(0x95f)];for(const _0x835117 of _0x1f2e82){if(!_0x835117)continue;_0x835117['gainStoredBoostPoints'](_0x46bd42);}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x5a9),_0x20bd8a=>{const _0x1d0745=_0x2546c9;if(!SceneManager[_0x1d0745(0x671)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x1d0745(0x41d)])return;VisuMZ[_0x1d0745(0x96)](_0x20bd8a,_0x20bd8a);const _0x346dd9=_0x20bd8a['VariableID'];$gameVariables[_0x1d0745(0x7a5)](_0x346dd9,BattleManager[_0x1d0745(0x41d)][_0x1d0745(0x722)]());}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Mechanics_BreakShieldChange',_0xa784aa=>{const _0xa096ba=_0x2546c9;if(!SceneManager[_0xa096ba(0x671)]())return;if(!Imported[_0xa096ba(0x53e)])return;VisuMZ[_0xa096ba(0x96)](_0xa784aa,_0xa784aa);const _0x5ef2bf=VisuMZ[_0xa096ba(0x2ed)](_0xa784aa['Targets']),_0x3d2f1a=_0xa784aa[_0xa096ba(0xadf)];for(const _0x37da9a of _0x5ef2bf){if(!_0x37da9a)continue;if(_0x37da9a[_0xa096ba(0x766)]())continue;if(!_0x37da9a['isAffectedByBreakShield']())continue;_0x37da9a[_0xa096ba(0x9a4)](_0x3d2f1a);}}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x6aa),_0x502ddc=>{const _0x147008=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x147008(0x53e)])return;VisuMZ[_0x147008(0x96)](_0x502ddc,_0x502ddc);const _0x3d60e0=VisuMZ[_0x147008(0x2ed)](_0x502ddc['Targets']);for(const _0x522181 of _0x3d60e0){if(_0x147008(0x8d6)==='Azpdx')_0x36c882['BattleCore'][_0x147008(0x880)][_0x147008(0x40c)](this),this[_0x147008(0x644)]();else{if(!_0x522181)continue;if(_0x522181[_0x147008(0x766)]())continue;if(!_0x522181[_0x147008(0x618)]())continue;_0x522181[_0x147008(0x5f7)]();}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x9c1),_0x31f912=>{const _0x529e17=_0x2546c9;if(!SceneManager[_0x529e17(0x671)]())return;if(!Imported[_0x529e17(0x190)])return;if(!BattleManager[_0x529e17(0x5dd)]())return;VisuMZ[_0x529e17(0x96)](_0x31f912,_0x31f912);const _0x20ca59=VisuMZ[_0x529e17(0x2ed)](_0x31f912[_0x529e17(0x21e)]),_0x329e42=_0x31f912['BravePoints'];for(const _0x6be1f6 of _0x20ca59){if(!_0x6be1f6)continue;_0x6be1f6['gainBravePoints'](_0x329e42);}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Mechanics_Collapse',_0x58b222=>{const _0x25644a=_0x2546c9;if(!SceneManager[_0x25644a(0x671)]())return;VisuMZ['ConvertParams'](_0x58b222,_0x58b222);const _0x3e9498=$gameTemp[_0x25644a(0x3fb)](),_0x599186=BattleManager[_0x25644a(0x8c0)],_0x1fd35f=BattleManager['_subject'];if(!_0x3e9498||!_0x599186||!_0x1fd35f)return;if(!_0x599186['item']())return;const _0x4c7bac=VisuMZ[_0x25644a(0x2ed)](_0x58b222[_0x25644a(0x21e)]);for(const _0x6f4aae of _0x4c7bac){if(!_0x6f4aae)continue;_0x58b222[_0x25644a(0x351)]&&(_0x25644a(0x724)!==_0x25644a(0x61d)?(_0x6f4aae['removeImmortal'](),_0x6f4aae['addState'](_0x6f4aae[_0x25644a(0x91)]())):(this[_0x25644a(0x6ee)]['x']=this['x'],this['_effectsContainer']['y']=this['y'])),_0x6f4aae[_0x25644a(0xa97)]()&&_0x6f4aae[_0x25644a(0x5ff)]();}_0x3e9498[_0x25644a(0x58f)](_0x25644a(0x796));}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x7ec),_0x170a51=>{const _0x172933=_0x2546c9;if(!SceneManager[_0x172933(0x671)]())return;if(!Imported[_0x172933(0xaa9)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x172933(0x96)](_0x170a51,_0x170a51);const _0x2dcac7=VisuMZ['CreateActionSequenceTargets'](_0x170a51[_0x172933(0x21e)]),_0x9e7de6=_0x170a51['ChangeOrderBy'];for(const _0xa8e097 of _0x2dcac7){if(!_0xa8e097)continue;_0xa8e097[_0x172933(0x9db)](_0x9e7de6);}}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x4cb),_0x14b72a=>{const _0x3d3c41=_0x2546c9;if(!SceneManager[_0x3d3c41(0x671)]())return;if(!Imported[_0x3d3c41(0xaa9)])return;if(!BattleManager[_0x3d3c41(0x5fe)]())return;VisuMZ[_0x3d3c41(0x96)](_0x14b72a,_0x14b72a);const _0x29f729=VisuMZ[_0x3d3c41(0x2ed)](_0x14b72a[_0x3d3c41(0x21e)]),_0x23991f=_0x14b72a[_0x3d3c41(0x6df)],_0x8304db=_0x14b72a['ChargeRate'];for(const _0x351acf of _0x29f729){if(_0x3d3c41(0x498)===_0x3d3c41(0x63c))this[_0x3d3c41(0x946)]=(this[_0x3d3c41(0x946)]*(_0x25e45f-0x1)+this['_targetFloatHeight'])/_0x4a5088;else{if(!_0x351acf)continue;if(_0x351acf[_0x3d3c41(0x403)]===_0x3d3c41(0xb51))'RcfSL'!==_0x3d3c41(0xb18)?_0x351acf[_0x3d3c41(0xa80)](_0x23991f):this['addWeaponSwapCommand'](!![]);else _0x351acf[_0x3d3c41(0x403)]==='casting'&&_0x351acf[_0x3d3c41(0x136)](_0x8304db);}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Mechanics_CustomDmgFormula',_0x328d92=>{const _0x46c0b1=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x46c0b1(0x96)](_0x328d92,_0x328d92);const _0x59fb29=BattleManager[_0x46c0b1(0x8c0)];if(!_0x59fb29)return;let _0x2dff06=_0x328d92['Formula'];_0x59fb29[_0x46c0b1(0x7a4)](_0x2dff06);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x50f),_0x5baafc=>{const _0x4cae44=_0x2546c9;if(!SceneManager[_0x4cae44(0x671)]())return;VisuMZ[_0x4cae44(0x96)](_0x5baafc,_0x5baafc);const _0x597176=VisuMZ['CreateActionSequenceTargets'](_0x5baafc[_0x4cae44(0x21e)]);for(const _0x342e43 of _0x597176){if(_0x4cae44(0x1a2)!==_0x4cae44(0x1a2))this[_0x4cae44(0x2ff)][_0x4cae44(0x40b)](_0x242c7a);else{if(!_0x342e43)continue;if(_0x342e43[_0x4cae44(0x891)]())_0x342e43[_0x4cae44(0x2d0)]();}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_DeathBreak',_0x3bf8b0=>{const _0x282c75=_0x2546c9;if(!SceneManager[_0x282c75(0x671)]())return;VisuMZ[_0x282c75(0x96)](_0x3bf8b0,_0x3bf8b0);const _0x376fb4=$gameTemp[_0x282c75(0x3fb)](),_0x12cd37=BattleManager['_subject'],_0x111c6c=_0x3bf8b0[_0x282c75(0x6f4)];if(!_0x376fb4)return;if(!_0x12cd37)return;_0x12cd37&&_0x12cd37['isDead']()&&_0x111c6c[_0x282c75(0x13e)]()[_0x282c75(0xb19)]()!=='UNTITLED'&&_0x376fb4['command119']([_0x111c6c]);}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x307),_0x3de82e=>{const _0x4b530c=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3de82e,_0x3de82e);const _0xa32cd3=VisuMZ['CreateActionSequenceTargets'](_0x3de82e[_0x4b530c(0x21e)]);for(const _0x477814 of _0xa32cd3){if(!_0x477814)continue;if(!_0x477814[_0x4b530c(0x2e4)]())continue;_0x477814[_0x4b530c(0x208)]();}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x7e0),_0x5b4ccd=>{const _0x4266ad=_0x2546c9;if(!SceneManager[_0x4266ad(0x671)]())return;if(!Imported[_0x4266ad(0x645)])return;if(!BattleManager[_0x4266ad(0xa96)]())return;VisuMZ[_0x4266ad(0x96)](_0x5b4ccd,_0x5b4ccd);const _0x2248fd=_0x5b4ccd[_0x4266ad(0x39f)];BattleManager[_0x4266ad(0x41d)]&&(_0x4266ad(0x406)===_0x4266ad(0x406)?BattleManager['_subject']['friendsUnit']()[_0x4266ad(0x23b)](_0x2248fd):this[_0x4266ad(0x731)][_0x4266ad(0x2a1)](0x0,0x0,0x0,0x0));}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0xeb),_0x4e594c=>{const _0x6b171f=_0x2546c9;if(!SceneManager[_0x6b171f(0x671)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x6b171f(0x96)](_0x4e594c,_0x4e594c);const _0x409a28=_0x4e594c[_0x6b171f(0x39f)];BattleManager[_0x6b171f(0x41d)]&&BattleManager[_0x6b171f(0x41d)][_0x6b171f(0x408)]()[_0x6b171f(0xa65)](_0x409a28);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x435),_0x2c7c35=>{const _0x4a86ac=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4a86ac(0x96)](_0x2c7c35,_0x2c7c35);const _0x539e82=VisuMZ[_0x4a86ac(0x2ed)](_0x2c7c35['Targets']),_0x2edbb2=_0x2c7c35[_0x4a86ac(0x920)],_0x34bc95=_0x2c7c35[_0x4a86ac(0x885)],_0x4d37c3=_0x2c7c35[_0x4a86ac(0x44d)],_0x2b8549=_0x2c7c35[_0x4a86ac(0x4ed)],_0x40915c=_0x2c7c35['TP_Rate'],_0x148d44=_0x2c7c35[_0x4a86ac(0x63e)],_0x4385e6=_0x2c7c35[_0x4a86ac(0x7ed)];for(const _0x522e37 of _0x539e82){if(!_0x522e37)continue;const _0xe9a515=_0x522e37['isAlive'](),_0x3a3ffe=Math[_0x4a86ac(0x19b)](_0x2edbb2*_0x522e37[_0x4a86ac(0x773)]+_0x34bc95),_0x2d9bad=Math[_0x4a86ac(0x19b)](_0x4d37c3*_0x522e37[_0x4a86ac(0x7c6)]+_0x2b8549),_0x37482c=Math[_0x4a86ac(0x19b)](_0x40915c*_0x522e37[_0x4a86ac(0xabe)]()+_0x148d44);if(_0x3a3ffe!==0x0)_0x522e37[_0x4a86ac(0x3b5)](_0x3a3ffe);if(_0x2d9bad!==0x0)_0x522e37[_0x4a86ac(0x90f)](_0x2d9bad);if(_0x37482c!==0x0)_0x522e37[_0x4a86ac(0x770)](_0x37482c);if(_0x4385e6)_0x522e37[_0x4a86ac(0x2d0)]();_0xe9a515&&_0x522e37['isDead']()&&_0x522e37[_0x4a86ac(0x5ff)]();}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0xfe),_0x672beb=>{const _0x34eccf=_0x2546c9;if(!SceneManager[_0x34eccf(0x671)]())return;VisuMZ['ConvertParams'](_0x672beb,_0x672beb);const _0x28dc0a=VisuMZ['CreateActionSequenceTargets'](_0x672beb[_0x34eccf(0x21e)]);for(const _0x48708f of _0x28dc0a){if(_0x34eccf(0x706)===_0x34eccf(0x1d8))this['recoverAll']();else{if(!_0x48708f)continue;_0x48708f[_0x34eccf(0x43f)](_0x672beb[_0x34eccf(0x5c9)]);}}}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_Mechanics_Multipliers',_0x50833c=>{const _0x4fd82e=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4fd82e(0x96)](_0x50833c,_0x50833c);const _0x74d0fe=BattleManager[_0x4fd82e(0x8c0)],_0x4fe64b={'criticalHitRate':_0x50833c['CriticalHitRate'],'criticalHitFlat':_0x50833c[_0x4fd82e(0x7f2)],'criticalDmgRate':_0x50833c['CriticalDmgRate'],'criticalDmgFlat':_0x50833c['CriticalDmgFlat'],'damageRate':_0x50833c['DamageRate'],'damageFlat':_0x50833c[_0x4fd82e(0x6ae)],'hitRate':_0x50833c[_0x4fd82e(0x2aa)],'hitFlat':_0x50833c['HitFlat']};_0x74d0fe[_0x4fd82e(0x14b)]=_0x4fe64b;}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x2c3),_0x5ef677=>{const _0x6b038c=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x6b038c(0x96)](_0x5ef677,_0x5ef677);const _0x56c1ef=_0x5ef677[_0x6b038c(0x78)];SceneManager[_0x6b038c(0x465)][_0x6b038c(0x513)](_0x56c1ef);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x10c),_0x3d0988=>{const _0x5dd4b3=_0x2546c9;if(!SceneManager[_0x5dd4b3(0x671)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x5dd4b3(0x2f7)]())return;VisuMZ[_0x5dd4b3(0x96)](_0x3d0988,_0x3d0988);const _0x3c7bcc=VisuMZ[_0x5dd4b3(0x2ed)](_0x3d0988[_0x5dd4b3(0x21e)]);for(const _0xfdc753 of _0x3c7bcc){if(!_0xfdc753)continue;let _0x35f660=_0x3d0988[_0x5dd4b3(0x696)],_0x301152=_0x3d0988[_0x5dd4b3(0x849)],_0x562577=_0x3d0988[_0x5dd4b3(0x470)];BattleManager[_0x5dd4b3(0x52c)][_0x5dd4b3(0xa7e)](_0xfdc753)?_0x35f660+=_0x562577:_0x301152+=_0x562577,BattleManager[_0x5dd4b3(0x525)](_0xfdc753,-_0x35f660,![]),BattleManager[_0x5dd4b3(0x525)](_0xfdc753,-_0x301152,!![]);}}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x22a),_0x35c465=>{const _0xed6a40=_0x2546c9;if(!SceneManager[_0xed6a40(0x671)]())return;if(!Imported[_0xed6a40(0x3ae)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0xed6a40(0x96)](_0x35c465,_0x35c465);const _0x1c4c45=BattleManager[_0xed6a40(0x41d)][_0xed6a40(0x408)](),_0x76da18=_0x35c465[_0xed6a40(0x127)],_0x1a6c49=_0x35c465[_0xed6a40(0xb3d)]||'unchanged',_0x3fdaf6=_0x35c465[_0xed6a40(0x65f)]||_0xed6a40(0x89),_0x459441=_0x35c465[_0xed6a40(0xaa4)]||0x0,_0x281df0=_0x35c465[_0xed6a40(0x8a)]||0x0;if(_0x1c4c45[_0xed6a40(0x7f8)]()||_0x76da18){if(_0xed6a40(0x1af)!==_0xed6a40(0x176)){if(_0x76da18){if(_0xed6a40(0x3e1)===_0xed6a40(0x24b))return _0x70d2db=_0xaa83c3[_0xed6a40(0x13e)]()[_0xed6a40(0xb19)](),this[_0xed6a40(0x6c2)]()===_0x218200;else _0x1c4c45['_ptbActionCost']=_0x1c4c45[_0xed6a40(0x654)]||{},_0x1c4c45[_0xed6a40(0x654)][_0xed6a40(0x444)]=0x0;}_0x1c4c45[_0xed6a40(0xf4)](_0x1a6c49,_0x3fdaf6,_0x459441,_0x281df0);}else return _0x4a31ac[_0xed6a40(0x93b)](this),_0x554c17[_0xed6a40(0x895)]['Game_Interpreter_PluginCommand'][_0xed6a40(0x40c)](this,_0xab34ea);}}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x6ea),_0x57d916=>{const _0x588d5d=_0x2546c9;if(!SceneManager[_0x588d5d(0x671)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x588d5d(0x96)](_0x57d916,_0x57d916);const _0x1dac30=BattleManager['_subject'][_0x588d5d(0x408)]();let _0x33d63c=Math[_0x588d5d(0x556)](_0x57d916[_0x588d5d(0x54a)],0x0),_0x58cec5=_0x1dac30[_0x588d5d(0xb1c)](),_0x35c950=_0x1dac30[_0x588d5d(0x936)]();while(_0x33d63c--){if(_0x588d5d(0x5e7)==='KYdZX'){if(this[_0x588d5d(0x54d)]>0x0)this['contentsOpacity']-=0x10;}else{if(_0x58cec5<=0x0&&_0x35c950<=0x0)break;else{if(_0x58cec5>0x0){if(_0x588d5d(0x901)==='hhwtN')_0x58cec5--,_0x35c950++;else{if(!_0x399f86[_0x588d5d(0x671)]())return;_0x4477d2['ConvertParams'](_0x213727,_0x8aa2ca);const _0x275985=_0x1e7624['getLastPluginCommandInterpreter'](),_0x4c76df=_0x25b9d1[_0x588d5d(0x8c0)],_0x14b808=_0x5844ac[_0x588d5d(0x41d)],_0x4bfed8=_0x2356bc['_allTargets']?_0x3747a1[_0x588d5d(0xb4)][_0x588d5d(0x699)](0x0):[],_0x576558=_0x21e27b[_0x588d5d(0x8e5)];if(!_0x275985||!_0x4c76df||!_0x14b808)return;if(!_0x4c76df['item']())return;if(_0x3e36fe[_0x588d5d(0xb4e)])_0x576558['push'](_0x588d5d(0x380),_0x14b808,_0x4bfed8,![]);if(_0x2a0959[_0x588d5d(0x5a5)])_0x576558[_0x588d5d(0x40b)](_0x588d5d(0x310));if(_0x5d741a[_0x588d5d(0x6ce)])_0x576558[_0x588d5d(0x40b)](_0x588d5d(0x7d3));if(_0x5ec45e[_0x588d5d(0x998)])_0x576558[_0x588d5d(0x40b)](_0x588d5d(0x3b6));if(_0x332646[_0x588d5d(0x693)])_0x576558['push'](_0x588d5d(0x896),_0x14b808);if(_0x1324f8['WaitForMovement'])_0x576558[_0x588d5d(0x40b)](_0x588d5d(0x7b3));_0x275985[_0x588d5d(0x58f)](_0x588d5d(0x1d2));}}else _0x35c950--;}}}_0x1dac30[_0x588d5d(0x672)](_0x58cec5),_0x1dac30['setHalfActionsPTB'](_0x35c950);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0xa0d),_0x444878=>{const _0x2b9830=_0x2546c9;if(!SceneManager[_0x2b9830(0x671)]())return;if(!Imported[_0x2b9830(0x3ae)])return;if(!BattleManager[_0x2b9830(0x341)]())return;VisuMZ[_0x2b9830(0x96)](_0x444878,_0x444878);const _0x289e17=BattleManager[_0x2b9830(0x41d)][_0x2b9830(0x408)]();let _0x3031cb=_0x444878[_0x2b9830(0x348)],_0x12d19d=_0x444878['HalfActions'];_0x289e17['gainFullActionsPTB'](_0x3031cb),_0x289e17['gainHalfActionsPTB'](_0x12d19d);}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x325),_0x51932a=>{const _0x4d3ccc=_0x2546c9;if(!SceneManager[_0x4d3ccc(0x671)]())return;VisuMZ[_0x4d3ccc(0x96)](_0x51932a,_0x51932a);const _0x5e913d=[_0x4d3ccc(0x3e0),_0x4d3ccc(0x4e6),_0x4d3ccc(0x121),'DEF','MAT',_0x4d3ccc(0x145),_0x4d3ccc(0x4c7),_0x4d3ccc(0x9e2)],_0xbbc489=_0x51932a[_0x4d3ccc(0x84c)],_0x2c36f4=_0x51932a['Debuffs'],_0x273c1f=VisuMZ[_0x4d3ccc(0x2ed)](_0x51932a['Targets']);for(const _0x3e0c53 of _0x273c1f){if(_0x4d3ccc(0x682)!==_0x4d3ccc(0x5df)){if(!_0x3e0c53)continue;for(const _0xdface9 of _0xbbc489){const _0x3fdb03=_0x5e913d['indexOf'](_0xdface9['toUpperCase']()[_0x4d3ccc(0xb19)]());_0x3fdb03>=0x0&&_0x3fdb03<=0x7&&_0x3e0c53['isBuffAffected'](_0x3fdb03)&&('ulymC'!=='ulymC'?(this[_0x4d3ccc(0x64f)](),this['_requestRefresh']=![],_0x2a1d2e['clearBattleRefreshRequest']()):_0x3e0c53[_0x4d3ccc(0x2d4)](_0x3fdb03));}for(const _0x2fd9ad of _0x2c36f4){if(_0x4d3ccc(0x2ee)==='SQqhB')this[_0x4d3ccc(0x4c3)](...arguments);else{const _0x499a4d=_0x5e913d[_0x4d3ccc(0x402)](_0x2fd9ad[_0x4d3ccc(0x13e)]()[_0x4d3ccc(0xb19)]());_0x499a4d>=0x0&&_0x499a4d<=0x7&&_0x3e0c53[_0x4d3ccc(0x538)](_0x499a4d)&&_0x3e0c53[_0x4d3ccc(0x2d4)](_0x499a4d);}}}else{if(!this[_0x4d3ccc(0x53a)])return;if(!this[_0x4d3ccc(0x731)])return;this['updateShadowVisibility'](),this[_0x4d3ccc(0x497)]();}}}),PluginManager['registerCommand'](pluginData['name'],_0x2546c9(0x3ff),_0x5ae1ee=>{const _0xf01fcd=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xf01fcd(0x96)](_0x5ae1ee,_0x5ae1ee);const _0x5c12a9=_0x5ae1ee[_0xf01fcd(0x7f0)],_0x5e875c=VisuMZ[_0xf01fcd(0x2ed)](_0x5ae1ee[_0xf01fcd(0x21e)]);for(const _0x4ffc1a of _0x5e875c){if(!_0x4ffc1a)continue;for(const _0x1a7181 of _0x5c12a9){_0xf01fcd(0x5d9)!==_0xf01fcd(0x778)?_0x4ffc1a[_0xf01fcd(0x9b4)](_0x1a7181):this['addSkillTypeCommand'](_0x259096);}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Mechanics_StbExploit',_0x1dfe92=>{const _0x74add4=_0x2546c9;if(!SceneManager[_0x74add4(0x671)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x74add4(0xa06)]())return;VisuMZ[_0x74add4(0x96)](_0x1dfe92,_0x1dfe92);const _0x366582=_0x1dfe92[_0x74add4(0x41a)],_0x13b072=VisuMZ[_0x74add4(0x2ed)](_0x1dfe92[_0x74add4(0x21e)]),_0x344fe7=_0x1dfe92[_0x74add4(0x414)],_0x195b27=_0x1dfe92[_0x74add4(0xa7a)],_0x4fbba8=_0x1dfe92['ForceExploiter'],_0x198218=BattleManager[_0x74add4(0x8c0)];if(_0x366582){if(_0x74add4(0xa5d)!==_0x74add4(0xa5d))this[_0x74add4(0x244)]=_0x4bcb12,this['_targetHomeY']=_0x33c262,this['_homeDuration']=_0x33d23e,this[_0x74add4(0x26c)]=_0xf711fa,this[_0x74add4(0x13c)]=_0x5100cf,_0x3f23cd<=0x0&&this[_0x74add4(0x6da)]();else for(const _0x90b570 of _0x13b072){if(!_0x90b570)continue;if(_0x90b570===user)continue;if(_0x344fe7)_0x90b570[_0x74add4(0xa61)](![]);_0x90b570[_0x74add4(0x3e9)](BattleManager['_subject'],_0x198218);}}if(_0x195b27&&BattleManager['_subject']){if(_0x4fbba8)BattleManager[_0x74add4(0x41d)][_0x74add4(0xa61)](![]);const _0x2604cc=_0x13b072[0x0];BattleManager[_0x74add4(0x5c0)](_0x2604cc,_0x198218);}}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x61e),_0x3588ff=>{const _0x587bc4=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x587bc4(0x739)])return;if(!BattleManager[_0x587bc4(0xa06)]())return;VisuMZ[_0x587bc4(0x96)](_0x3588ff,_0x3588ff);const _0x3e083b=_0x3588ff[_0x587bc4(0x976)];BattleManager[_0x587bc4(0x41d)]&&BattleManager['_subject'][_0x587bc4(0x2b6)](_0x3e083b);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x860),_0x46fe31=>{const _0x4bcd77=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x4bcd77(0xa06)]())return;VisuMZ[_0x4bcd77(0x96)](_0x46fe31,_0x46fe31);let _0x3abf90=_0x46fe31['Actions'];if(BattleManager['_subject']){BattleManager['_subject'][_0x4bcd77(0x829)]=BattleManager[_0x4bcd77(0x41d)][_0x4bcd77(0x829)]||[];while(_0x3abf90--){if(BattleManager[_0x4bcd77(0x41d)][_0x4bcd77(0x829)][_0x4bcd77(0x4ce)]<=0x0)break;BattleManager[_0x4bcd77(0x41d)][_0x4bcd77(0x829)][_0x4bcd77(0x3b9)]();}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0xa51),_0x104ea1=>{const _0x2fdd34=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2fdd34(0x2ac)])return;VisuMZ[_0x2fdd34(0x96)](_0x104ea1,_0x104ea1);const _0x35456c=VisuMZ[_0x2fdd34(0x2ed)](_0x104ea1[_0x2fdd34(0x21e)]),_0x45adb6=_0x104ea1['WeaponTypeID'];for(const _0x2d01e3 of _0x35456c){if(!_0x2d01e3)continue;if(!_0x2d01e3[_0x2fdd34(0x55e)]())continue;_0x2d01e3['switchToWeaponType'](_0x45adb6);}}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x324),_0x38517f=>{const _0x13824c=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x13824c(0x96)](_0x38517f,_0x38517f);const _0x50b2ac=VisuMZ['CreateActionSequenceTargets'](_0x38517f[_0x13824c(0x21e)]),_0x364e70=_0x38517f['Text'],_0x6272ea={'textColor':ColorManager[_0x13824c(0x3b4)](_0x38517f['TextColor']),'flashColor':_0x38517f['FlashColor'],'flashDuration':_0x38517f[_0x13824c(0x1c6)]};for(const _0x2575ea of _0x50b2ac){if(_0x13824c(0x61b)==='zNHJU'){if(!_0x2575ea)continue;_0x2575ea[_0x13824c(0x5b6)](_0x364e70,_0x6272ea);}else _0x3d7972=_0x315833['boxWidth']/0x2,_0x50b003=_0x249a25[_0x13824c(0x73)]/0x2;}}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x299),_0x553f5b=>{const _0xb1c00a=_0x2546c9;if(!SceneManager[_0xb1c00a(0x671)]())return;VisuMZ[_0xb1c00a(0x96)](_0x553f5b,_0x553f5b);const _0x4141e5=VisuMZ[_0xb1c00a(0x2ed)](_0x553f5b['Targets']);let _0x26e388=$gameVariables['value'](_0x553f5b[_0xb1c00a(0xaea)]);if(Imported[_0xb1c00a(0x53c)]&&_0x553f5b['DigitGrouping']){if(_0xb1c00a(0x7cc)===_0xb1c00a(0xaa8)){if(this[_0xb1c00a(0x1ff)]()['note']['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x427b88=_0x48c581(_0x2a36f4['$1'])[_0xb1c00a(0x13e)]()[_0xb1c00a(0xb19)]();return _0x427b88;}return _0xb1c00a(0x511);}else _0x26e388=VisuMZ[_0xb1c00a(0x80d)](_0x26e388);}const _0x2ca718=String(_0x26e388),_0x11f99c={'textColor':ColorManager[_0xb1c00a(0x3b4)](_0x553f5b[_0xb1c00a(0x15b)]),'flashColor':_0x553f5b['FlashColor'],'flashDuration':_0x553f5b['FlashDuration']};for(const _0x167cba of _0x4141e5){if(!_0x167cba)continue;_0x167cba[_0xb1c00a(0x5b6)](_0x2ca718,_0x11f99c);}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x280),_0x359ef0=>{const _0xf9c06a=_0x2546c9;if(!SceneManager['isSceneBattle']())return;const _0x5af69e=$gameTemp[_0xf9c06a(0x3fb)]();if(!_0x5af69e)return;_0x5af69e[_0xf9c06a(0x58f)](_0xf9c06a(0x796));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Motion_ClearFreezeFrame',_0x10c17e=>{const _0x3a09f3=_0x2546c9;if(!SceneManager[_0x3a09f3(0x671)]())return;VisuMZ[_0x3a09f3(0x96)](_0x10c17e,_0x10c17e);const _0x2eb37f=VisuMZ[_0x3a09f3(0x2ed)](_0x10c17e[_0x3a09f3(0x21e)]);for(const _0x22eade of _0x2eb37f){if(!_0x22eade)continue;_0x22eade[_0x3a09f3(0x43c)]();}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x4e0),_0x757d1e=>{const _0xd9414d=_0x2546c9;if(!SceneManager[_0xd9414d(0x671)]())return;VisuMZ[_0xd9414d(0x96)](_0x757d1e,_0x757d1e);const _0x15dd01=VisuMZ['CreateActionSequenceTargets'](_0x757d1e[_0xd9414d(0x21e)]),_0x45e310=_0x757d1e[_0xd9414d(0x1ca)][_0xd9414d(0x917)]()[_0xd9414d(0xb19)]();let _0x4f05c6=_0x757d1e[_0xd9414d(0x15c)];const _0x2af4f5=_0x757d1e['Frame'];!['attack','thrust',_0xd9414d(0x6cd),_0xd9414d(0xaff)][_0xd9414d(0xa7e)](_0x45e310)&&(_0x4f05c6=![]);for(const _0x2a3aff of _0x15dd01){if(!_0x2a3aff)continue;_0x2a3aff['freezeMotion'](_0x45e310,_0x4f05c6,_0x2af4f5);}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x99c),_0x4fea29=>{const _0x9bc78a=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x9bc78a(0x96)](_0x4fea29,_0x4fea29);const _0x2d7efc=VisuMZ['CreateActionSequenceTargets'](_0x4fea29['Targets']),_0x2f7265=_0x4fea29[_0x9bc78a(0x1ca)][_0x9bc78a(0x917)]()[_0x9bc78a(0xb19)](),_0x415114=_0x4fea29[_0x9bc78a(0x15c)];for(const _0x4abbc4 of _0x2d7efc){if(_0x9bc78a(0x1bb)==='ZyZom')_0x554bdc['result']()[_0x9bc78a(0x61a)]?this[_0x9bc78a(0x40b)](_0x9bc78a(0xaec),_0x31c8c9):this[_0x9bc78a(0x40b)](_0x9bc78a(0x8fe),_0x16db8b);else{if(!_0x4abbc4)continue;if(_0x2f7265[_0x9bc78a(0x1e0)](/ATTACK[ ](\d+)/i))_0x4abbc4[_0x9bc78a(0xa8a)](Number(RegExp['$1']));else{if(_0x2f7265==='attack')_0x4abbc4[_0x9bc78a(0x211)]();else{if(_0x9bc78a(0x84)===_0x9bc78a(0xa95)){if(this[_0x9bc78a(0x912)]===_0x1eb522)this[_0x9bc78a(0xac5)]();return this[_0x9bc78a(0x912)];}else _0x4abbc4[_0x9bc78a(0x5a8)](_0x2f7265);}}if(!_0x415114)_0x4abbc4['startWeaponAnimation'](0x0);else{if(_0x415114&&[_0x9bc78a(0x921),_0x9bc78a(0x6cd),_0x9bc78a(0x552)]['includes'](_0x2f7265)){}}}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x271),_0x1ad1cf=>{const _0x5a5e39=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5a5e39(0x96)](_0x1ad1cf,_0x1ad1cf);const _0x561521=BattleManager[_0x5a5e39(0x8c0)];if(!_0x561521)return;if(!_0x561521[_0x5a5e39(0x1ff)]())return;const _0x595c5d=VisuMZ['CreateActionSequenceTargets'](_0x1ad1cf[_0x5a5e39(0x21e)]);for(const _0x202683 of _0x595c5d){if(_0x5a5e39(0xa76)!==_0x5a5e39(0x8ab)){if(!_0x202683)continue;_0x202683['performAction'](_0x561521);}else _0x33cfc2+=_0x2f65be;}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0xa07),_0x1d9969=>{const _0x499d20=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1d9969,_0x1d9969);const _0xe8507c=VisuMZ[_0x499d20(0x2ed)](_0x1d9969[_0x499d20(0x21e)]);for(const _0x33f95f of _0xe8507c){if('pCPFM'!=='LoSiv'){if(!_0x33f95f)continue;if(!_0x33f95f[_0x499d20(0x2dc)]())continue;_0x33f95f[_0x499d20(0x2dc)]()[_0x499d20(0xc5)]();}else this[_0x499d20(0x53a)][_0x499d20(0x2c4)]['smooth']!==this[_0x499d20(0xe2)][_0x499d20(0x4bb)]()&&(this[_0x499d20(0x53a)][_0x499d20(0x2c4)][_0x499d20(0xac1)]=this[_0x499d20(0xe2)]['battlerSmoothImage']());}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x478),_0x559fc7=>{const _0x31a899=_0x2546c9;if(!SceneManager[_0x31a899(0x671)]())return;VisuMZ[_0x31a899(0x96)](_0x559fc7,_0x559fc7);const _0x2b9a3a=$gameTemp[_0x31a899(0x3fb)](),_0x428bc7=_0x559fc7[_0x31a899(0x382)]*Sprite_Battler[_0x31a899(0x436)];_0x2b9a3a[_0x31a899(0x532)](_0x428bc7);}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Movement_BattleStep',_0x34c532=>{const _0xd858a5=_0x2546c9;if(!SceneManager[_0xd858a5(0x671)]())return;VisuMZ['ConvertParams'](_0x34c532,_0x34c532);const _0x226dd0=$gameTemp[_0xd858a5(0x3fb)](),_0x5bf7be=BattleManager[_0xd858a5(0x8c0)];if(!_0x226dd0||!_0x5bf7be)return;if(!_0x5bf7be[_0xd858a5(0x1ff)]())return;const _0x34550e=VisuMZ[_0xd858a5(0x2ed)](_0x34c532['Targets']);for(const _0x263e25 of _0x34550e){if('QJkLL'!==_0xd858a5(0xb23)){if(!_0x263e25)continue;_0x263e25['performActionStart'](_0x5bf7be);}else{if(!_0x3e7b80[_0xd858a5(0x465)]['_uiContainer'])return;_0x399e10[_0xd858a5(0x465)][_0xd858a5(0xac3)]['addChild'](_0x132054);}}if(_0x34c532[_0xd858a5(0x9ce)])_0x226dd0[_0xd858a5(0x58f)](_0xd858a5(0xa6e));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x608),_0x261470=>{const _0x42e5f6=_0x2546c9;if(!SceneManager[_0x42e5f6(0x671)]())return;if(!$gameSystem[_0x42e5f6(0x165)]())return;VisuMZ[_0x42e5f6(0x96)](_0x261470,_0x261470);const _0x40727d=$gameTemp[_0x42e5f6(0x3fb)](),_0x217b26=VisuMZ['CreateActionSequenceTargets'](_0x261470[_0x42e5f6(0x21e)]),_0x3bd195=_0x261470[_0x42e5f6(0x763)],_0x14c14a=_0x261470['DistanceX'],_0x37171c=_0x261470[_0x42e5f6(0x6b5)],_0x1752cc=_0x261470['Duration'],_0x37e562=_0x261470['FaceDirection'],_0x46a36f=_0x261470[_0x42e5f6(0xc2)],_0x1b2657=_0x261470[_0x42e5f6(0x1ca)],_0x343ce8=_0x261470[_0x42e5f6(0x9ce)];if(!_0x40727d)return;for(const _0x3b79a4 of _0x217b26){if(!_0x3b79a4)continue;let _0xcd97f2=_0x14c14a,_0x4ebc6e=_0x37171c;if(_0x3bd195[_0x42e5f6(0x1e0)](/horz/i))_0xcd97f2*=_0x3b79a4[_0x42e5f6(0x55e)]()?-0x1:0x1;if(_0x3bd195[_0x42e5f6(0x1e0)](/vert/i))_0x4ebc6e*=_0x3b79a4[_0x42e5f6(0x55e)]()?-0x1:0x1;_0x3b79a4['moveBattlerHomeDistance'](_0xcd97f2,_0x4ebc6e,_0x1752cc,_0x37e562,_0x46a36f),_0x3b79a4[_0x42e5f6(0x5a8)](_0x1b2657);}if(_0x343ce8)_0x40727d[_0x42e5f6(0x58f)](_0x42e5f6(0xa6e));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x15f),_0x130153=>{const _0x5f155a=_0x2546c9;if(!SceneManager[_0x5f155a(0x671)]())return;if(!$gameSystem[_0x5f155a(0x165)]())return;VisuMZ[_0x5f155a(0x96)](_0x130153,_0x130153);const _0x3c344e=$gameTemp['getLastPluginCommandInterpreter'](),_0x2a37ce=VisuMZ[_0x5f155a(0x2ed)](_0x130153[_0x5f155a(0x21e)]),_0x4043fd=_0x130153['Destination'],_0x4bc77d=_0x130153[_0x5f155a(0x7f4)],_0xdd0dfa=_0x130153['OffsetX'],_0x33c955=_0x130153[_0x5f155a(0x97)],_0x29402f=_0x130153['Duration'],_0x26c44a=_0x130153[_0x5f155a(0xa1)],_0x2a428e=_0x130153[_0x5f155a(0xc2)],_0x8ea547=_0x130153[_0x5f155a(0x1ca)],_0x3abebd=_0x130153[_0x5f155a(0x9ce)];if(!_0x3c344e)return;for(const _0x54ad69 of _0x2a37ce){if(!_0x54ad69)continue;let _0x574834=_0x54ad69[_0x5f155a(0x2dc)]()['_baseX'],_0x362942=_0x54ad69[_0x5f155a(0x2dc)]()[_0x5f155a(0x38a)];if(_0x4043fd[_0x5f155a(0x1e0)](/home/i)){if(_0x5f155a(0x793)===_0x5f155a(0x269))return _0x5f0245=_0x35e8a1(_0x47a59f),_0x1444eb[_0x5f155a(0x1e0)](/#(.*)/i)?_0x5f155a(0x112)['format'](_0x757c33(_0xce420f['$1'])):this[_0x5f155a(0x484)](_0x3ffccb(_0x3cf7dd));else _0x574834=_0x54ad69[_0x5f155a(0x2dc)]()['_homeX'],_0x362942=_0x54ad69[_0x5f155a(0x2dc)]()[_0x5f155a(0x450)];}else{if(_0x4043fd[_0x5f155a(0x1e0)](/center/i))_0x574834=Graphics['boxWidth']/0x2,_0x362942=Graphics[_0x5f155a(0x73)]/0x2;else _0x4043fd[_0x5f155a(0x1e0)](/point (\d+), (\d+)/i)&&('xunSJ'===_0x5f155a(0x844)?(_0x4ad88f[_0x5f155a(0x3e5)]||_0x3e8457['battleback2Name'])&&_0x58e8b8[_0x5f155a(0x9d3)]():(_0x574834=Number(RegExp['$1']),_0x362942=Number(RegExp['$2'])));}if(_0x4bc77d[_0x5f155a(0x1e0)](/none/i))_0x574834+=_0xdd0dfa,_0x362942+=_0x33c955;else{if(_0x4bc77d['match'](/horz/i)&&_0x4bc77d[_0x5f155a(0x1e0)](/vert/i))_0x574834+=_0x54ad69[_0x5f155a(0x55e)]()?-_0xdd0dfa:_0xdd0dfa,_0x362942+=_0x54ad69['isActor']()?-_0x33c955:_0x33c955;else{if(_0x4bc77d['match'](/horz/i))_0x574834+=_0x54ad69[_0x5f155a(0x55e)]()?-_0xdd0dfa:_0xdd0dfa,_0x362942+=_0x33c955;else _0x4bc77d[_0x5f155a(0x1e0)](/vert/i)&&(_0x5f155a(0xfd)===_0x5f155a(0x81)?_0x5d618d[_0x5f155a(0x895)][_0x5f155a(0x8b3)][_0x5f155a(0x40c)](this):(_0x574834+=_0xdd0dfa,_0x362942+=_0x54ad69['isActor']()?-_0x33c955:_0x33c955));}}_0x54ad69['moveBattlerHomeToPoint'](_0x574834,_0x362942,_0x29402f,_0x26c44a,_0x2a428e,-0x1),_0x54ad69[_0x5f155a(0x5a8)](_0x8ea547);}if(_0x3abebd)_0x3c344e['setWaitMode'](_0x5f155a(0xa6e));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x2c8),_0x5ab6ae=>{const _0x1f7d51=_0x2546c9;if(!SceneManager[_0x1f7d51(0x671)]())return;if(!$gameSystem[_0x1f7d51(0x165)]())return;VisuMZ[_0x1f7d51(0x96)](_0x5ab6ae,_0x5ab6ae);const _0xfca85d=$gameTemp[_0x1f7d51(0x3fb)](),_0x296478=VisuMZ['CreateActionSequenceTargets'](_0x5ab6ae[_0x1f7d51(0x852)]),_0x2e6ae6=VisuMZ[_0x1f7d51(0x2ed)](_0x5ab6ae['Targets2']),_0x44bc43=_0x5ab6ae[_0x1f7d51(0x872)];let _0x4e2066=_0x5ab6ae['MeleeDistance'];const _0x5a0017=_0x5ab6ae[_0x1f7d51(0x7f4)],_0x58c434=_0x5ab6ae['OffsetX'],_0x4de1e6=_0x5ab6ae[_0x1f7d51(0x97)],_0x19d734=_0x5ab6ae[_0x1f7d51(0xa6a)],_0x3409e9=_0x5ab6ae[_0x1f7d51(0xa1)],_0xecaf5=_0x5ab6ae['EasingType'],_0x37f702=_0x5ab6ae[_0x1f7d51(0x1ca)],_0x3ce233=_0x5ab6ae[_0x1f7d51(0x9ce)],_0x4678d5=Math['min'](..._0x2e6ae6[_0x1f7d51(0x1b0)](_0x183ce8=>_0x183ce8[_0x1f7d51(0x2dc)]()['_baseX']-_0x183ce8[_0x1f7d51(0x2dc)]()[_0x1f7d51(0x62e)]()/0x2)),_0x5f44b3=Math['max'](..._0x2e6ae6[_0x1f7d51(0x1b0)](_0x28b75c=>_0x28b75c[_0x1f7d51(0x2dc)]()['_baseX']+_0x28b75c[_0x1f7d51(0x2dc)]()[_0x1f7d51(0x62e)]()/0x2)),_0x3defe9=Math[_0x1f7d51(0xaaa)](..._0x2e6ae6['map'](_0x4275c3=>_0x4275c3[_0x1f7d51(0x2dc)]()[_0x1f7d51(0x38a)]-_0x4275c3[_0x1f7d51(0x2dc)]()['mainSpriteHeight']())),_0x1ba974=Math['max'](..._0x2e6ae6[_0x1f7d51(0x1b0)](_0x93bff4=>_0x93bff4[_0x1f7d51(0x2dc)]()['_baseY'])),_0xf7b3ab=_0x2e6ae6[_0x1f7d51(0xae4)](_0x107cad=>_0x107cad[_0x1f7d51(0x55e)]())['length'],_0x13963c=_0x2e6ae6[_0x1f7d51(0xae4)](_0x3b01e1=>_0x3b01e1[_0x1f7d51(0x2e4)]())['length'];let _0x1dde90=0x0,_0x4cc6c7=0x0;if(_0x44bc43[_0x1f7d51(0x1e0)](/front/i))_0x1dde90=_0xf7b3ab>=_0x13963c?_0x4678d5:_0x5f44b3;else{if(_0x44bc43[_0x1f7d51(0x1e0)](/middle/i))_0x1dde90=(_0x4678d5+_0x5f44b3)/0x2,_0x4e2066=-0x1;else _0x44bc43[_0x1f7d51(0x1e0)](/back/i)&&(_0x1dde90=_0xf7b3ab>=_0x13963c?_0x5f44b3:_0x4678d5);}if(_0x44bc43[_0x1f7d51(0x1e0)](/head/i))_0x4cc6c7=_0x3defe9;else{if(_0x44bc43[_0x1f7d51(0x1e0)](/center/i)){if(_0x1f7d51(0x993)!==_0x1f7d51(0x993))return _0x447d6f['BattleCore'][_0x1f7d51(0x788)][_0x1f7d51(0x40c)](this,_0x36615f);else _0x4cc6c7=(_0x3defe9+_0x1ba974)/0x2;}else{if(_0x44bc43['match'](/base/i)){if(_0x1f7d51(0x2e9)!=='VdIlG')_0x4cc6c7=_0x1ba974;else return this[_0x1f7d51(0xe1)]()[_0x1f7d51(0x4c1)][_0x1f7d51(0x1e0)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x483ac0(_0x56b2b5['$1'])[_0x1f7d51(0x24d)](/[\r\n]+/):_0xd597e9[_0x1f7d51(0x895)][_0x1f7d51(0x4b7)][_0x1f7d51(0x702)][_0x1f7d51(0x7c4)];}}}if(!_0xfca85d)return;for(const _0x4aa26b of _0x296478){if(_0x1f7d51(0x199)!=='iYjzG'){if(!_0x4aa26b)continue;let _0x57c98b=_0x1dde90,_0x263c93=_0x4cc6c7;if(_0x5a0017[_0x1f7d51(0x1e0)](/none/i))_0x57c98b+=_0x58c434,_0x263c93+=_0x4de1e6;else{if(_0x5a0017['match'](/horz/i)&&_0x5a0017[_0x1f7d51(0x1e0)](/vert/i)){if(_0x1f7d51(0xbb)===_0x1f7d51(0x16b))return this[_0x1f7d51(0x5de)]()['some'](_0xb4b2ce=>_0xb4b2ce[_0x1f7d51(0x39a)]());else _0x57c98b+=_0x4aa26b[_0x1f7d51(0x55e)]()?-_0x58c434:_0x58c434,_0x263c93+=_0x4aa26b[_0x1f7d51(0x55e)]()?-_0x4de1e6:_0x4de1e6;}else{if(_0x5a0017['match'](/horz/i))_0x57c98b+=_0x4aa26b[_0x1f7d51(0x55e)]()?-_0x58c434:_0x58c434,_0x263c93+=_0x4de1e6;else _0x5a0017[_0x1f7d51(0x1e0)](/vert/i)&&(_0x57c98b+=_0x58c434,_0x263c93+=_0x4aa26b[_0x1f7d51(0x55e)]()?-_0x4de1e6:_0x4de1e6);}}_0x4aa26b[_0x1f7d51(0xacf)](_0x57c98b,_0x263c93,_0x19d734,_0x3409e9,_0xecaf5,_0x4e2066),_0x4aa26b[_0x1f7d51(0x5a8)](_0x37f702);}else _0x5b7cbd[_0x1f7d51(0x465)][_0x1f7d51(0x5a6)]['updatePointAnimations'](),_0x3ec57b[_0x1f7d51(0x58f)](_0x1f7d51(0x128));}if(_0x3ce233)_0xfca85d['setWaitMode']('battleMove');}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x6a2),_0x11843d=>{const _0x5ef91f=_0x2546c9;if(!SceneManager[_0x5ef91f(0x671)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x5ef91f(0x96)](_0x11843d,_0x11843d);const _0x2067fb=VisuMZ[_0x5ef91f(0x2ed)](_0x11843d[_0x5ef91f(0x21e)]);let _0x3f9dc3=_0x11843d[_0x5ef91f(0x985)][_0x5ef91f(0x1e0)](/back/i);for(const _0x48df71 of _0x2067fb){if('Seoez'!==_0x5ef91f(0x761)){if(!_0x406f98['isPhysical']())return![];if(!_0x22373c['isForOne']())return![];if(!_0x305607[_0x5ef91f(0x5bd)]())return![];return _0x501d82[_0x5ef91f(0x895)]['Settings'][_0x5ef91f(0x950)]['AutoMeleeSolo'];}else{if(!_0x48df71)continue;if(_0x11843d[_0x5ef91f(0x985)][_0x5ef91f(0x1e0)](/rand/i))_0x3f9dc3=Math[_0x5ef91f(0x66)](0x2);_0x48df71[_0x5ef91f(0x6a9)](!!_0x3f9dc3);}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Movement_FacePoint',_0x43da5c=>{const _0xcd4176=_0x2546c9;if(!SceneManager[_0xcd4176(0x671)]())return;if(!$gameSystem[_0xcd4176(0x165)]())return;VisuMZ['ConvertParams'](_0x43da5c,_0x43da5c);const _0x519bd8=VisuMZ[_0xcd4176(0x2ed)](_0x43da5c[_0xcd4176(0x21e)]);let _0x23c1ec=_0x43da5c[_0xcd4176(0x5da)];const _0x1ced3e=_0x43da5c[_0xcd4176(0x12f)];for(const _0x135548 of _0x519bd8){if(!_0x135548)continue;let _0x45f783=_0x135548[_0xcd4176(0x2dc)]()[_0xcd4176(0xa2f)],_0x5f5234=_0x135548[_0xcd4176(0x2dc)]()['_baseY'];if(_0x23c1ec['match'](/home/i))_0x45f783=_0x135548[_0xcd4176(0x2dc)]()[_0xcd4176(0x493)],_0x5f5234=_0x135548[_0xcd4176(0x2dc)]()[_0xcd4176(0x450)];else{if(_0x23c1ec[_0xcd4176(0x1e0)](/center/i))_0x45f783=Graphics[_0xcd4176(0x8e7)]/0x2,_0x5f5234=Graphics[_0xcd4176(0x73)]/0x2;else _0x23c1ec[_0xcd4176(0x1e0)](/point (\d+), (\d+)/i)&&(_0xcd4176(0x21d)!==_0xcd4176(0x21d)?(_0x8c6ce8=_0x5f56cf[_0xcd4176(0x795)](/\x1I\[(\d+)\]/gi,''),_0x3bf685=_0x2d1381[_0xcd4176(0x795)](/\\I\[(\d+)\]/gi,'')):(_0x45f783=Number(RegExp['$1']),_0x5f5234=Number(RegExp['$2'])));}_0x135548[_0xcd4176(0x461)](Math[_0xcd4176(0x19b)](_0x45f783),Math[_0xcd4176(0x19b)](_0x5f5234),!!_0x1ced3e);}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Movement_FaceTarget',_0x451e51=>{const _0x55a094=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x55a094(0x96)](_0x451e51,_0x451e51);const _0x18ad26=VisuMZ[_0x55a094(0x2ed)](_0x451e51['Targets1']),_0x28f64e=VisuMZ['CreateActionSequenceTargets'](_0x451e51['Targets2']),_0x23c9a6=_0x28f64e[_0x55a094(0x1b0)](_0x5dfe4d=>_0x5dfe4d&&_0x5dfe4d[_0x55a094(0x2dc)]()?_0x5dfe4d['battler']()[_0x55a094(0xa2f)]:0x0)/(_0x28f64e[_0x55a094(0x4ce)]||0x1),_0x580053=_0x28f64e[_0x55a094(0x1b0)](_0x24132f=>_0x24132f&&_0x24132f[_0x55a094(0x2dc)]()?_0x24132f[_0x55a094(0x2dc)]()[_0x55a094(0x38a)]:0x0)/(_0x28f64e[_0x55a094(0x4ce)]||0x1),_0x571917=_0x451e51['FaceAway'];for(const _0x7f46e of _0x18ad26){if(!_0x7f46e)continue;_0x7f46e[_0x55a094(0x461)](Math[_0x55a094(0x19b)](_0x23c9a6),Math[_0x55a094(0x19b)](_0x580053),!!_0x571917);}}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_Movement_Float',_0x3d5176=>{const _0x1b6b56=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1b6b56(0x96)](_0x3d5176,_0x3d5176);const _0x3201be=$gameTemp[_0x1b6b56(0x3fb)](),_0x523bd=VisuMZ[_0x1b6b56(0x2ed)](_0x3d5176[_0x1b6b56(0x21e)]),_0xb35acf=_0x3d5176['Height'],_0x39a50a=_0x3d5176[_0x1b6b56(0xa6a)],_0x16d0aa=_0x3d5176['EasingType'],_0x2220f6=_0x3d5176[_0x1b6b56(0x2f6)];if(!_0x3201be)return;for(const _0x194684 of _0x523bd){if(!_0x194684)continue;_0x194684[_0x1b6b56(0x84e)](_0xb35acf,_0x39a50a,_0x16d0aa);}if(_0x2220f6)_0x3201be[_0x1b6b56(0x58f)](_0x1b6b56(0x4db));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Movement_HomeReset',_0x17420=>{const _0x847785=_0x2546c9;if(!SceneManager[_0x847785(0x671)]())return;VisuMZ[_0x847785(0x96)](_0x17420,_0x17420);const _0x515e49=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x515e49)return;const _0x296ba9=VisuMZ[_0x847785(0x2ed)](_0x17420[_0x847785(0x21e)]);for(const _0x147a94 of _0x296ba9){if('zWPiO'===_0x847785(0x7b1)){if(!_0x147a94)continue;_0x147a94[_0x847785(0x519)]();}else{const _0x55a207=this[_0x847785(0x4ff)](_0x3d7dd9),_0x3b5126=this['textSizeEx'](_0x3af4a8)['width'];return _0x3b5126<=_0x55a207['width']?'iconText':'icon';}}if(BattleManager['_subject']){if('palnO'===_0x847785(0x588))BattleManager['_subject'][_0x847785(0x896)]();else{if(!this[_0x847785(0x5eb)])return;this['_battler']!==this[_0x847785(0x5eb)][_0x847785(0xe2)]&&this[_0x847785(0x5eb)][_0x847785(0x47e)](this[_0x847785(0xe2)]);const _0x1247a2=this['textWidth']();this[_0x847785(0x3d8)]=this[_0x847785(0x3d8)]||_0x3de543[_0x847785(0x79f)][_0x847785(0x7e8)](),this['_stateIconSprite']['x']=_0x2a0860[_0x847785(0x19b)]((_0x1247a2+_0x153176[_0x847785(0x7d)])/0x2)+0x8,this[_0x847785(0x5eb)]['y']=this[_0x847785(0x3d8)]/0x2;const _0x413735=_0x5c63ff['BattleCore']['Settings'][_0x847785(0x862)];this['_stateIconSprite']['x']+=_0x413735[_0x847785(0x5b0)]||0x0,this['_stateIconSprite']['y']+=_0x413735[_0x847785(0x42a)]||0x0;}}if(_0x17420['WaitForMovement'])_0x515e49[_0x847785(0x58f)](_0x847785(0xa6e));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x638),_0x374cbd=>{const _0x22bad4=_0x2546c9;if(!SceneManager[_0x22bad4(0x671)]())return;VisuMZ[_0x22bad4(0x96)](_0x374cbd,_0x374cbd);const _0x50f7eb=$gameTemp[_0x22bad4(0x3fb)](),_0x311ea8=VisuMZ['CreateActionSequenceTargets'](_0x374cbd[_0x22bad4(0x21e)]),_0x451dd4=_0x374cbd[_0x22bad4(0x6fe)],_0x5a2363=_0x374cbd[_0x22bad4(0xa6a)],_0x2f6704=_0x374cbd[_0x22bad4(0x8f)];if(!_0x50f7eb)return;for(const _0x2bd2af of _0x311ea8){if(!_0x2bd2af)continue;_0x2bd2af[_0x22bad4(0x6ed)](_0x451dd4,_0x5a2363);}if(_0x2f6704)_0x50f7eb[_0x22bad4(0x58f)]('battleJump');}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x2cc),_0x43cf30=>{const _0x3eb4ef=_0x2546c9;if(!SceneManager[_0x3eb4ef(0x671)]())return;if(!$gameSystem[_0x3eb4ef(0x165)]())return;VisuMZ[_0x3eb4ef(0x96)](_0x43cf30,_0x43cf30);const _0x5bc019=$gameTemp[_0x3eb4ef(0x3fb)](),_0x51c046=VisuMZ[_0x3eb4ef(0x2ed)](_0x43cf30[_0x3eb4ef(0x21e)]),_0x3fcad1=_0x43cf30[_0x3eb4ef(0x763)],_0x350c59=_0x43cf30[_0x3eb4ef(0x6b9)],_0x561e20=_0x43cf30[_0x3eb4ef(0x6b5)],_0x31ce07=_0x43cf30['Duration'],_0x39785=_0x43cf30[_0x3eb4ef(0xa1)],_0x9f3587=_0x43cf30[_0x3eb4ef(0xc2)],_0x1edfd1=_0x43cf30[_0x3eb4ef(0x1ca)],_0x574164=_0x43cf30[_0x3eb4ef(0x9ce)];if(!_0x5bc019)return;for(const _0x52de24 of _0x51c046){if(!_0x52de24)continue;let _0x4eb3f8=_0x350c59,_0x8b1cbf=_0x561e20;if(_0x3fcad1['match'](/horz/i))_0x4eb3f8*=_0x52de24[_0x3eb4ef(0x55e)]()?-0x1:0x1;if(_0x3fcad1['match'](/vert/i))_0x8b1cbf*=_0x52de24[_0x3eb4ef(0x55e)]()?-0x1:0x1;_0x52de24[_0x3eb4ef(0x42f)](_0x4eb3f8,_0x8b1cbf,_0x31ce07,_0x39785,_0x9f3587),_0x52de24[_0x3eb4ef(0x5a8)](_0x1edfd1);}if(_0x574164)_0x5bc019[_0x3eb4ef(0x58f)](_0x3eb4ef(0xa6e));}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x995),_0x808bfa=>{const _0x212dc4=_0x2546c9;if(!SceneManager[_0x212dc4(0x671)]())return;if(!$gameSystem[_0x212dc4(0x165)]())return;VisuMZ['ConvertParams'](_0x808bfa,_0x808bfa);const _0x105af4=$gameTemp[_0x212dc4(0x3fb)](),_0x5f50e5=VisuMZ['CreateActionSequenceTargets'](_0x808bfa[_0x212dc4(0x21e)]),_0x1e3009=_0x808bfa[_0x212dc4(0x107)],_0x50db74=_0x808bfa['OffsetAdjust'],_0xa7bd8f=_0x808bfa[_0x212dc4(0x43d)],_0x38de85=_0x808bfa['OffsetY'],_0x262a6f=_0x808bfa[_0x212dc4(0xa6a)],_0x29b8f1=_0x808bfa[_0x212dc4(0xa1)],_0x4c52b8=_0x808bfa[_0x212dc4(0xc2)],_0x46de3d=_0x808bfa[_0x212dc4(0x1ca)],_0x3a07c5=_0x808bfa['WaitForMovement'];if(!_0x105af4)return;for(const _0x3922a5 of _0x5f50e5){if(!_0x3922a5)continue;let _0x1e95b7=_0x3922a5[_0x212dc4(0x2dc)]()[_0x212dc4(0xa2f)],_0x26ba87=_0x3922a5[_0x212dc4(0x2dc)]()['_baseY'];if(_0x1e3009['match'](/home/i))_0x1e95b7=_0x3922a5[_0x212dc4(0x2dc)]()[_0x212dc4(0x493)],_0x26ba87=_0x3922a5[_0x212dc4(0x2dc)]()[_0x212dc4(0x450)];else{if(_0x1e3009[_0x212dc4(0x1e0)](/center/i))_0x1e95b7=Graphics[_0x212dc4(0x8e7)]/0x2,_0x26ba87=Graphics[_0x212dc4(0x73)]/0x2;else{if(_0x1e3009[_0x212dc4(0x1e0)](/point (\d+), (\d+)/i)){if(_0x212dc4(0x2e8)===_0x212dc4(0xb46)){if(!_0x221033[_0x212dc4(0x671)]())return;_0x2874ea[_0x212dc4(0x96)](_0x4a8558,_0x417377),_0x320242[_0x212dc4(0x465)][_0x212dc4(0xac)](_0x5385e9[_0x212dc4(0x4cf)]);}else _0x1e95b7=Number(RegExp['$1']),_0x26ba87=Number(RegExp['$2']);}}}if(_0x50db74[_0x212dc4(0x1e0)](/none/i))_0x1e95b7+=_0xa7bd8f,_0x26ba87+=_0x38de85;else{if(_0x50db74['match'](/horz/i)&&_0x50db74[_0x212dc4(0x1e0)](/vert/i))_0x212dc4(0x1c5)!==_0x212dc4(0xa8e)?(_0x1e95b7+=_0x3922a5[_0x212dc4(0x55e)]()?-_0xa7bd8f:_0xa7bd8f,_0x26ba87+=_0x3922a5[_0x212dc4(0x55e)]()?-_0x38de85:_0x38de85):_0x298af1=_0x1481fb;else{if(_0x50db74['match'](/horz/i))_0x1e95b7+=_0x3922a5[_0x212dc4(0x55e)]()?-_0xa7bd8f:_0xa7bd8f,_0x26ba87+=_0x38de85;else _0x50db74[_0x212dc4(0x1e0)](/vert/i)&&(_0x1e95b7+=_0xa7bd8f,_0x26ba87+=_0x3922a5[_0x212dc4(0x55e)]()?-_0x38de85:_0x38de85);}}_0x3922a5[_0x212dc4(0x78e)](_0x1e95b7,_0x26ba87,_0x262a6f,_0x29b8f1,_0x4c52b8,-0x1),_0x3922a5[_0x212dc4(0x5a8)](_0x46de3d);}if(_0x3a07c5)_0x105af4[_0x212dc4(0x58f)](_0x212dc4(0xa6e));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x449),_0x9d66df=>{const _0x58d4c2=_0x2546c9;if(!SceneManager[_0x58d4c2(0x671)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x58d4c2(0x96)](_0x9d66df,_0x9d66df);const _0x209319=$gameTemp[_0x58d4c2(0x3fb)](),_0x1c3807=VisuMZ[_0x58d4c2(0x2ed)](_0x9d66df[_0x58d4c2(0x852)]),_0x3f6ce0=VisuMZ[_0x58d4c2(0x2ed)](_0x9d66df[_0x58d4c2(0x94c)]),_0x274d08=_0x9d66df[_0x58d4c2(0x872)];let _0x39a637=_0x9d66df[_0x58d4c2(0x587)];const _0x1638fc=_0x9d66df[_0x58d4c2(0x7f4)],_0x592ce4=_0x9d66df[_0x58d4c2(0x43d)],_0x4cd46c=_0x9d66df['OffsetY'],_0x253c8f=_0x9d66df[_0x58d4c2(0xa6a)],_0x35bff8=_0x9d66df['FaceDirection'],_0x5d7200=_0x9d66df[_0x58d4c2(0xc2)],_0xfbdb88=_0x9d66df['MotionType'],_0x30bf25=_0x9d66df[_0x58d4c2(0x9ce)],_0x1acd57=Math[_0x58d4c2(0xaaa)](..._0x3f6ce0[_0x58d4c2(0x1b0)](_0xf1c770=>_0xf1c770[_0x58d4c2(0x2dc)]()[_0x58d4c2(0xa2f)]-_0xf1c770[_0x58d4c2(0x2dc)]()['mainSpriteWidth']()/0x2)),_0x18cfac=Math['max'](..._0x3f6ce0[_0x58d4c2(0x1b0)](_0x5e1461=>_0x5e1461['battler']()['_baseX']+_0x5e1461['battler']()[_0x58d4c2(0x62e)]()/0x2)),_0x35e314=Math[_0x58d4c2(0xaaa)](..._0x3f6ce0[_0x58d4c2(0x1b0)](_0x205e85=>_0x205e85[_0x58d4c2(0x2dc)]()[_0x58d4c2(0x38a)]-_0x205e85['battler']()[_0x58d4c2(0x617)]())),_0x252441=Math[_0x58d4c2(0x556)](..._0x3f6ce0[_0x58d4c2(0x1b0)](_0x5a999f=>_0x5a999f['battler']()['_baseY'])),_0x3f1b07=_0x3f6ce0[_0x58d4c2(0xae4)](_0x32d321=>_0x32d321[_0x58d4c2(0x55e)]())[_0x58d4c2(0x4ce)],_0x30f9f8=_0x3f6ce0[_0x58d4c2(0xae4)](_0x29d520=>_0x29d520[_0x58d4c2(0x2e4)]())[_0x58d4c2(0x4ce)];let _0x375eb9=0x0,_0x560002=0x0;if(_0x274d08[_0x58d4c2(0x1e0)](/front/i))_0x375eb9=_0x3f1b07>=_0x30f9f8?_0x1acd57:_0x18cfac;else{if(_0x274d08[_0x58d4c2(0x1e0)](/middle/i))_0x375eb9=(_0x1acd57+_0x18cfac)/0x2,_0x39a637=-0x1;else _0x274d08[_0x58d4c2(0x1e0)](/back/i)&&(_0x58d4c2(0x4ab)==='QIXKm'?_0x375eb9=_0x3f1b07>=_0x30f9f8?_0x18cfac:_0x1acd57:this['push'](_0x58d4c2(0x9d6),this[_0x58d4c2(0x5fb)](_0x79961e)));}if(_0x274d08[_0x58d4c2(0x1e0)](/head/i)){if('iVNsu'!==_0x58d4c2(0xae0))_0x560002=_0x35e314;else{const _0x29c6ad=_0x25f121[_0x58d4c2(0x895)][_0x58d4c2(0x4b7)][_0x58d4c2(0x99a)],_0x3f206a=this[_0x58d4c2(0xe2)]&&this[_0x58d4c2(0xe2)][_0x58d4c2(0x55e)]()?0x1:-0x1,_0x5b46e2=this[_0x58d4c2(0xa2f)]-this[_0x58d4c2(0x493)]+_0x3f206a*_0x29c6ad['FlinchDistanceX'],_0xa06ff2=this['_baseY']-this[_0x58d4c2(0x450)]+_0x3f206a*_0x29c6ad['FlinchDistanceY'],_0x1bdc41=_0x29c6ad[_0x58d4c2(0x96e)];this[_0x58d4c2(0xc3)](_0x5b46e2,_0xa06ff2,_0x1bdc41);}}else{if(_0x274d08[_0x58d4c2(0x1e0)](/center/i))_0x560002=(_0x35e314+_0x252441)/0x2;else{if(_0x274d08[_0x58d4c2(0x1e0)](/base/i)){if('vJYEt'===_0x58d4c2(0x8c6))return _0x31c993['BattleCore']['Settings'][_0x58d4c2(0x2f3)]['VarianceFormulaJS'][_0x58d4c2(0x40c)](this,_0x266b03,_0x2d9e81);else _0x560002=_0x252441;}}}if(!_0x209319)return;for(const _0x133af3 of _0x1c3807){if(!_0x133af3)continue;let _0x2a558e=_0x375eb9,_0x54981b=_0x560002;if(_0x1638fc[_0x58d4c2(0x1e0)](/none/i))_0x58d4c2(0xb2d)===_0x58d4c2(0x1b1)?_0x4c95ef['actionBattleCoreJS']('PostStartActionJS'):(_0x2a558e+=_0x592ce4,_0x54981b+=_0x4cd46c);else{if(_0x1638fc[_0x58d4c2(0x1e0)](/horz/i)&&_0x1638fc[_0x58d4c2(0x1e0)](/vert/i)){if(_0x58d4c2(0x41e)!==_0x58d4c2(0x41e))return this[_0x58d4c2(0x267)]()?0x0:0xa;else _0x2a558e+=_0x133af3[_0x58d4c2(0x55e)]()?-_0x592ce4:_0x592ce4,_0x54981b+=_0x133af3[_0x58d4c2(0x55e)]()?-_0x4cd46c:_0x4cd46c;}else{if(_0x1638fc[_0x58d4c2(0x1e0)](/horz/i))_0x2a558e+=_0x133af3['isActor']()?-_0x592ce4:_0x592ce4,_0x54981b+=_0x4cd46c;else{if(_0x1638fc[_0x58d4c2(0x1e0)](/vert/i)){if(_0x58d4c2(0x363)!==_0x58d4c2(0x423))_0x2a558e+=_0x592ce4,_0x54981b+=_0x133af3['isActor']()?-_0x4cd46c:_0x4cd46c;else{const _0xa2b822=this[_0x58d4c2(0x1ff)]()[_0x58d4c2(0xb0c)];return _0xa2b822[_0x58d4c2(0x1e0)](/(?:RAND|RANDOM)/i);}}}}}_0x133af3[_0x58d4c2(0x78e)](_0x2a558e,_0x54981b,_0x253c8f,_0x35bff8,_0x5d7200,_0x39a637),_0x133af3['requestMotion'](_0xfbdb88);}if(_0x30bf25)_0x209319[_0x58d4c2(0x58f)](_0x58d4c2(0xa6e));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x43b),_0x5f126c=>{const _0x566e45=_0x2546c9;if(!SceneManager[_0x566e45(0x671)]())return;VisuMZ[_0x566e45(0x96)](_0x5f126c,_0x5f126c);const _0x5963d5=$gameTemp['getLastPluginCommandInterpreter'](),_0x357d42=VisuMZ[_0x566e45(0x2ed)](_0x5f126c[_0x566e45(0x21e)]),_0x3d9902=_0x5f126c[_0x566e45(0x8f7)],_0x42db87=_0x5f126c[_0x566e45(0xa6a)],_0x28c4e1=_0x5f126c[_0x566e45(0xc2)],_0x28093b=_0x5f126c[_0x566e45(0x41c)];if(!_0x5963d5)return;for(const _0xdc1130 of _0x357d42){if(!_0xdc1130)continue;_0xdc1130[_0x566e45(0x6e4)](_0x3d9902,_0x42db87,_0x28c4e1);}if(_0x28093b)_0x5963d5[_0x566e45(0x58f)](_0x566e45(0x9bd));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x84a),_0x27ad26=>{const _0x28bae8=_0x2546c9;if(!SceneManager[_0x28bae8(0x671)]())return;VisuMZ['ConvertParams'](_0x27ad26,_0x27ad26);const _0x1eba4a=$gameTemp[_0x28bae8(0x3fb)](),_0x1970e1=VisuMZ[_0x28bae8(0x2ed)](_0x27ad26[_0x28bae8(0x21e)]),_0x30d899=_0x27ad26[_0x28bae8(0x22c)],_0x55504f=_0x27ad26['ScaleY'],_0xef93db=_0x27ad26['Duration'],_0x5b1ac9=_0x27ad26[_0x28bae8(0xc2)],_0x51e2ce=_0x27ad26[_0x28bae8(0x21a)];if(!_0x1eba4a)return;for(const _0x6b4bbb of _0x1970e1){if(_0x28bae8(0x9c4)===_0x28bae8(0x9c4)){if(!_0x6b4bbb)continue;_0x6b4bbb['growBattler'](_0x30d899,_0x55504f,_0xef93db,_0x5b1ac9);}else return this[_0x28bae8(0x9a9)]();}if(_0x51e2ce)_0x1eba4a[_0x28bae8(0x58f)](_0x28bae8(0x4da));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x858),_0x2c0e9d=>{const _0xc287a1=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xc287a1(0x96)](_0x2c0e9d,_0x2c0e9d);const _0x2d743d=$gameTemp['getLastPluginCommandInterpreter'](),_0x6676f2=VisuMZ[_0xc287a1(0x2ed)](_0x2c0e9d[_0xc287a1(0x21e)]),_0x45653d=_0x2c0e9d[_0xc287a1(0x86d)],_0x12a2be=_0x2c0e9d[_0xc287a1(0xaad)],_0x56afa3=_0x2c0e9d['Duration'],_0x13b32e=_0x2c0e9d[_0xc287a1(0xc2)],_0x41e4f8=_0x2c0e9d[_0xc287a1(0xb8)];if(!_0x2d743d)return;for(const _0x1b0d59 of _0x6676f2){if(_0xc287a1(0xa11)!==_0xc287a1(0xa11))this[_0xc287a1(0xaba)][_0xc287a1(0xc5)]();else{if(!_0x1b0d59)continue;_0x1b0d59[_0xc287a1(0x49d)](_0x45653d,_0x12a2be,_0x56afa3,_0x13b32e);}}if(_0x41e4f8)_0x2d743d[_0xc287a1(0x58f)](_0xc287a1(0xad3));}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x245),_0x4289e5=>{const _0x43044a=_0x2546c9;if(!SceneManager[_0x43044a(0x671)]())return;VisuMZ[_0x43044a(0x96)](_0x4289e5,_0x4289e5);const _0x4ee6dd=$gameTemp['getLastPluginCommandInterpreter'](),_0x440ce7=VisuMZ[_0x43044a(0x2ed)](_0x4289e5[_0x43044a(0x21e)]),_0x1c6919=_0x4289e5[_0x43044a(0x7c0)],_0x42fe38=_0x4289e5['Duration'],_0x4fb857=_0x4289e5['EasingType'],_0x15dba7=_0x4289e5[_0x43044a(0x27f)],_0x29aa88=_0x4289e5[_0x43044a(0x855)];if(!_0x4ee6dd)return;for(const _0x703392 of _0x440ce7){if(_0x43044a(0x440)===_0x43044a(0x222))_0x2b5104[_0x43044a(0x407)]();else{if(!_0x703392)continue;_0x703392[_0x43044a(0x3d5)](_0x1c6919,_0x42fe38,_0x4fb857,_0x15dba7);}}if(_0x29aa88)_0x4ee6dd[_0x43044a(0x58f)](_0x43044a(0x647));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x405),_0x10e41d=>{const _0xc3543b=_0x2546c9;if(!SceneManager[_0xc3543b(0x671)]())return;const _0x1f8cd6=$gameTemp[_0xc3543b(0x3fb)]();if(!_0x1f8cd6)return;_0x1f8cd6['setWaitMode'](_0xc3543b(0x4db));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x81f),_0xb34dd1=>{const _0x218a00=_0x2546c9;if(!SceneManager[_0x218a00(0x671)]())return;const _0x49372d=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x49372d)return;_0x49372d[_0x218a00(0x58f)](_0x218a00(0x113));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x5b8),_0x1b4bc5=>{const _0xa930bb=_0x2546c9;if(!SceneManager[_0xa930bb(0x671)]())return;const _0xf76e6c=$gameTemp[_0xa930bb(0x3fb)]();if(!_0xf76e6c)return;_0xf76e6c[_0xa930bb(0x58f)](_0xa930bb(0xa6e));}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0xd5),_0x4941ba=>{if(!SceneManager['isSceneBattle']())return;const _0x37fa0b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x37fa0b)return;_0x37fa0b['setWaitMode']('battleOpacity');}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x32d),_0x3a8072=>{const _0x3d02dc=_0x2546c9;if(!SceneManager[_0x3d02dc(0x671)]())return;const _0x1bf882=$gameTemp[_0x3d02dc(0x3fb)]();if(!_0x1bf882)return;_0x1bf882[_0x3d02dc(0x58f)](_0x3d02dc(0x4da));}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0xb40),_0x5e56f8=>{const _0x2ed229=_0x2546c9;if(!SceneManager[_0x2ed229(0x671)]())return;const _0x5477ff=$gameTemp[_0x2ed229(0x3fb)]();if(!_0x5477ff)return;_0x5477ff[_0x2ed229(0x58f)](_0x2ed229(0xad3));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0xa47),_0x2fb2c0=>{const _0x2a6494=_0x2546c9;if(!SceneManager['isSceneBattle']())return;const _0x2ec3d8=$gameTemp[_0x2a6494(0x3fb)]();if(!_0x2ec3d8)return;_0x2ec3d8[_0x2a6494(0x58f)](_0x2a6494(0x647));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x69b),_0x1aa7ff=>{const _0xeb008=_0x2546c9;if(!SceneManager[_0xeb008(0x671)]())return;if(!Imported[_0xeb008(0x744)])return;VisuMZ[_0xeb008(0x96)](_0x1aa7ff,_0x1aa7ff);const _0x1ca608=$gameTemp[_0xeb008(0x3fb)](),_0x9a1573=_0x1aa7ff[_0xeb008(0x309)];if(!_0x1ca608)return;const _0x1a0c70=BattleManager['_spriteset'];if(!_0x1a0c70)return;_0x1a0c70[_0xeb008(0xa81)](_0x1aa7ff);if(_0x9a1573)_0x1ca608[_0xeb008(0x58f)](_0xeb008(0x676));}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x2bb),_0x24c018=>{const _0x4b6198=_0x2546c9;if(!SceneManager[_0x4b6198(0x671)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x4b6198(0x96)](_0x24c018,_0x24c018);const _0x355f91=$gameTemp['getLastPluginCommandInterpreter'](),_0x5a525c=_0x24c018[_0x4b6198(0x309)];if(!_0x355f91)return;const _0x29272e=BattleManager[_0x4b6198(0x5a6)];if(!_0x29272e)return;_0x29272e[_0x4b6198(0xa81)](_0x24c018);if(_0x5a525c)_0x355f91['setWaitMode'](_0x4b6198(0x676));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Projectile_Picture',_0x5c395d=>{const _0x4fdd4b=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4fdd4b(0x744)])return;VisuMZ[_0x4fdd4b(0x96)](_0x5c395d,_0x5c395d);const _0x4d65a6=$gameTemp[_0x4fdd4b(0x3fb)](),_0x5ce1e8=_0x5c395d[_0x4fdd4b(0x309)];if(!_0x4d65a6)return;const _0x5afd79=BattleManager['_spriteset'];if(!_0x5afd79)return;_0x5afd79[_0x4fdd4b(0xa81)](_0x5c395d);if(_0x5ce1e8)_0x4d65a6[_0x4fdd4b(0x58f)](_0x4fdd4b(0x676));}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_ChangeSkew',_0x4054dd=>{const _0x17fb3b=_0x2546c9;if(!SceneManager[_0x17fb3b(0x671)]())return;if(!Imported[_0x17fb3b(0x87b)])return;VisuMZ['ConvertParams'](_0x4054dd,_0x4054dd);const _0x27a842=$gameTemp[_0x17fb3b(0x3fb)](),_0x59a528=_0x4054dd[_0x17fb3b(0xb8)];if(!_0x27a842)return;$gameScreen[_0x17fb3b(0x670)](_0x4054dd[_0x17fb3b(0x86d)],_0x4054dd[_0x17fb3b(0xaad)],_0x4054dd[_0x17fb3b(0xa6a)],_0x4054dd[_0x17fb3b(0xc2)]);if(_0x59a528)_0x27a842[_0x17fb3b(0x58f)]('battleSkew');}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x3a1),_0x1feb16=>{const _0x38f8d8=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x38f8d8(0x87b)])return;VisuMZ[_0x38f8d8(0x96)](_0x1feb16,_0x1feb16);const _0x461be2=$gameTemp[_0x38f8d8(0x3fb)](),_0x1231e4=_0x1feb16[_0x38f8d8(0xb8)];if(!_0x461be2)return;$gameScreen[_0x38f8d8(0x670)](0x0,0x0,_0x1feb16[_0x38f8d8(0xa6a)],_0x1feb16[_0x38f8d8(0xc2)]);if(_0x1231e4)_0x461be2[_0x38f8d8(0x58f)](_0x38f8d8(0x3a6));}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0xcb),_0x4cd320=>{const _0x3bf2d2=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3bf2d2(0x87b)])return;const _0x226a66=$gameTemp[_0x3bf2d2(0x3fb)]();if(!_0x226a66)return;_0x226a66[_0x3bf2d2(0x58f)](_0x3bf2d2(0x3a6));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x67d),_0x4daf8d=>{const _0x5b6760=_0x2546c9;if(!SceneManager[_0x5b6760(0x671)]())return;VisuMZ[_0x5b6760(0x96)](_0x4daf8d,_0x4daf8d);const _0x866972=$gameTemp[_0x5b6760(0x3fb)](),_0x3c597b=_0x4daf8d[_0x5b6760(0x1b2)],_0x588697=_0x4daf8d[_0x5b6760(0x6f4)];if(!_0x866972)return;BattleManager[_0x5b6760(0xa43)]=_0x3c597b,BattleManager[_0x5b6760(0x500)]=BattleManager[_0x5b6760(0xb4)]?BattleManager['_allTargets'][BattleManager[_0x5b6760(0xa43)]]||null:null,BattleManager[_0x5b6760(0x500)]&&_0x588697['toUpperCase']()[_0x5b6760(0xb19)]()!==_0x5b6760(0x597)&&(_0x5b6760(0x37f)!==_0x5b6760(0xff)?_0x866972[_0x5b6760(0x810)]([_0x588697]):_0xb98c14[_0x5b6760(0x99a)][_0x5b6760(0xa52)]=![]);}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],'ActSeq_Target_NextTarget',_0x10b27b=>{const _0x4b8d9a=_0x2546c9;if(!SceneManager[_0x4b8d9a(0x671)]())return;VisuMZ[_0x4b8d9a(0x96)](_0x10b27b,_0x10b27b);const _0x35f5fd=$gameTemp[_0x4b8d9a(0x3fb)](),_0x44009d=_0x10b27b[_0x4b8d9a(0x6f4)];if(!_0x35f5fd)return;BattleManager[_0x4b8d9a(0xa43)]++,BattleManager['_target']=BattleManager[_0x4b8d9a(0xb4)][BattleManager[_0x4b8d9a(0xa43)]]||null,BattleManager[_0x4b8d9a(0x500)]&&_0x44009d[_0x4b8d9a(0x13e)]()['trim']()!=='UNTITLED'&&_0x35f5fd[_0x4b8d9a(0x810)]([_0x44009d]);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Target_PrevTarget',_0x2a5556=>{const _0x3aebaf=_0x2546c9;if(!SceneManager[_0x3aebaf(0x671)]())return;VisuMZ[_0x3aebaf(0x96)](_0x2a5556,_0x2a5556);const _0x1c0b56=$gameTemp[_0x3aebaf(0x3fb)](),_0x27f80d=_0x2a5556[_0x3aebaf(0x6f4)];if(!_0x1c0b56)return;BattleManager[_0x3aebaf(0xa43)]--,BattleManager['_target']=BattleManager['_allTargets'][BattleManager[_0x3aebaf(0xa43)]]||null;if(BattleManager[_0x3aebaf(0x500)]&&_0x27f80d[_0x3aebaf(0x13e)]()[_0x3aebaf(0xb19)]()!==_0x3aebaf(0x597)){if(_0x3aebaf(0xad9)==='LUaEJ')_0x1c0b56[_0x3aebaf(0x810)]([_0x27f80d]);else{const _0x1ca0c8=_0x2f378a[_0x599a00];if(_0x1ca0c8){if(_0x1ca0c8['note'][_0x3aebaf(0x1e0)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x4f5f53=_0x1714f2(_0x79e4e9['$1'])[_0x3aebaf(0x24d)](/[\r\n]+/)['remove'](''),_0x58fc58=this[_0x3aebaf(0x4ef)](_0x4f5f53);_0x222e10=this[_0x3aebaf(0x482)](_0x58fc58)||_0x5d797e,_0x31351f=_0x1367b2[_0x3aebaf(0xa10)](_0x21a1c5);}}return _0x24d6d9;}}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x888),_0x2d9ebd=>{const _0x49543a=_0x2546c9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x49543a(0x96)](_0x2d9ebd,_0x2d9ebd);const _0x1ce549=$gameTemp[_0x49543a(0x3fb)](),_0x415257=_0x2d9ebd[_0x49543a(0x992)],_0x261226=_0x2d9ebd[_0x49543a(0x6f4)];if(!_0x1ce549)return;const _0x2cfacb=BattleManager[_0x49543a(0xa43)];for(;;){BattleManager[_0x49543a(0xa43)]=Math[_0x49543a(0x66)](BattleManager[_0x49543a(0xb4)][_0x49543a(0x4ce)]);if(!_0x415257)break;if(BattleManager[_0x49543a(0xa43)]!==_0x2cfacb)break;if(BattleManager[_0x49543a(0xb4)][_0x49543a(0x4ce)]<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager['_target']=BattleManager[_0x49543a(0xb4)][BattleManager['_targetIndex']]||null,BattleManager[_0x49543a(0x500)]&&_0x261226[_0x49543a(0x13e)]()['trim']()!=='UNTITLED'&&_0x1ce549['command119']([_0x261226]);}),PluginManager['registerCommand'](pluginData[_0x2546c9(0x395)],_0x2546c9(0x62b),_0x204eb3=>{const _0x31d602=_0x2546c9;if(!SceneManager[_0x31d602(0x671)]())return;VisuMZ[_0x31d602(0x96)](_0x204eb3,_0x204eb3);const _0x3440db=VisuMZ[_0x31d602(0x2ed)](_0x204eb3['Targets']);for(const _0x4d75a9 of _0x3440db){if(!_0x4d75a9)continue;if(!_0x4d75a9[_0x31d602(0x55e)]())continue;_0x4d75a9[_0x31d602(0x687)]();}}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x63f),_0xf03ea8=>{const _0x990acb=_0x2546c9;if(!SceneManager[_0x990acb(0x671)]())return;VisuMZ[_0x990acb(0x96)](_0xf03ea8,_0xf03ea8);const _0x36a6f1=$gameTemp['getLastPluginCommandInterpreter']();let _0x56a09b=![];const _0x259b29=_0xf03ea8['JumpToLabel'],_0x220566=VisuMZ[_0x990acb(0x2ed)](_0xf03ea8['Targets']);for(const _0x9970dd of _0x220566){if(_0x990acb(0x2f8)===_0x990acb(0x732))return this['_damagePopupArray'][_0x990acb(0x36e)]();else{if(!_0x9970dd)continue;if(!_0x9970dd['isActor']())continue;_0x9970dd[_0x990acb(0xa14)](),_0x9970dd['weapons']()[_0x990acb(0x4ce)]>0x0?_0x56a09b=!![]:_0x990acb(0x4fc)===_0x990acb(0x4fc)?_0x9970dd[_0x990acb(0x687)]():(this[_0x990acb(0x53a)]=new _0x5e2366(),this[_0x990acb(0x53a)][_0x990acb(0x9a7)]['x']=0.5,this[_0x990acb(0x53a)][_0x990acb(0x9a7)]['y']=0x1,this[_0x990acb(0x8c8)](this['_mainSprite']),this['attachSpritesToDistortionSprite']());}}_0x56a09b&&_0x259b29[_0x990acb(0x13e)]()[_0x990acb(0xb19)]()!==_0x990acb(0x597)&&_0x36a6f1['command119']([_0x259b29]);}),PluginManager[_0x2546c9(0x2b4)](pluginData['name'],_0x2546c9(0x81e),_0xaf38f4=>{const _0x324488=_0x2546c9;if(!SceneManager[_0x324488(0x671)]())return;VisuMZ[_0x324488(0x96)](_0xaf38f4,_0xaf38f4);let _0xc02338=_0xaf38f4['SlotID'];_0xc02338--,_0xc02338=Math['max'](_0xc02338,0x0);const _0x5489fd=VisuMZ[_0x324488(0x2ed)](_0xaf38f4['Targets']);for(const _0x35975b of _0x5489fd){if('mzMan'===_0x324488(0x9f8)){if(!_0x35975b)continue;if(!_0x35975b[_0x324488(0x55e)]())continue;_0x35975b[_0x324488(0x286)](_0xc02338);}else this[_0x324488(0x5a8)](_0x324488(0x471));}}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],'ActSeq_Zoom_Scale',_0x85fae1=>{const _0x570d0e=_0x2546c9;if(!SceneManager[_0x570d0e(0x671)]())return;if(!Imported[_0x570d0e(0x87b)])return;VisuMZ[_0x570d0e(0x96)](_0x85fae1,_0x85fae1);const _0x450063=$gameTemp[_0x570d0e(0x3fb)](),_0x213c5c=_0x85fae1[_0x570d0e(0x87)];if(!_0x450063)return;$gameScreen['setBattleZoom'](_0x85fae1['Scale'],_0x85fae1[_0x570d0e(0xa6a)],_0x85fae1['EasingType']);if(_0x213c5c)_0x450063['setWaitMode']('battleZoom');}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x7ce),_0x824f52=>{const _0x4a01ee=_0x2546c9;if(!SceneManager[_0x4a01ee(0x671)]())return;if(!Imported[_0x4a01ee(0x87b)])return;VisuMZ['ConvertParams'](_0x824f52,_0x824f52);const _0x3f84ed=$gameTemp[_0x4a01ee(0x3fb)](),_0x531eb4=_0x824f52[_0x4a01ee(0x87)];if(!_0x3f84ed)return;$gameScreen['setBattleZoom'](0x1,_0x824f52[_0x4a01ee(0xa6a)],_0x824f52['EasingType']);if(_0x531eb4)_0x3f84ed['setWaitMode'](_0x4a01ee(0x5f6));}),PluginManager[_0x2546c9(0x2b4)](pluginData[_0x2546c9(0x395)],_0x2546c9(0x6d7),_0x34ebf9=>{const _0x1c895d=_0x2546c9;if(!SceneManager[_0x1c895d(0x671)]())return;if(!Imported[_0x1c895d(0x87b)])return;const _0x29c9df=$gameTemp[_0x1c895d(0x3fb)]();if(!_0x29c9df)return;_0x29c9df[_0x1c895d(0x58f)](_0x1c895d(0x5f6));}),VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xabd)]=Scene_Boot[_0x2546c9(0x79f)][_0x2546c9(0xa28)],Scene_Boot[_0x2546c9(0x79f)]['onDatabaseLoaded']=function(){const _0x104fdb=_0x2546c9;this[_0x104fdb(0x352)](),this['process_VisuMZ_BattleCore_PluginParams'](),this['process_VisuMZ_BattleCore_DamageStyles'](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ['BattleCore'][_0x104fdb(0xabd)][_0x104fdb(0x40c)](this),this[_0x104fdb(0x937)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x104fdb(0x681)](),this[_0x104fdb(0x7cb)]();},Scene_Boot[_0x2546c9(0x79f)][_0x2546c9(0x937)]=function(){const _0x495918=_0x2546c9;if(VisuMZ[_0x495918(0x6a0)])return;this[_0x495918(0x662)](),this[_0x495918(0x366)](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot['prototype'][_0x2546c9(0x352)]=function(){const _0x1a050a=_0x2546c9,_0xa860d3=$dataSystem[_0x1a050a(0x3e6)][_0x1a050a(0x4ce)];for(let _0x192a1e=0x0;_0x192a1e<_0xa860d3;_0x192a1e++){if(_0x1a050a(0x236)!=='IVfRt'){const _0x4b80a9=$dataSystem[_0x1a050a(0x97f)][_0x192a1e];if(_0x4b80a9)continue;$dataSystem[_0x1a050a(0x97f)][_0x192a1e]=JsonEx[_0x1a050a(0x785)]($dataSystem[_0x1a050a(0x97f)][0x0]);}else{const _0x420941=_0x4f3ab8[_0x1a050a(0x79f)][_0x1a050a(0x3fe)]()*0x2+0x4;let _0x446590=_0x1dcb61[_0x1a050a(0x8e7)]-_0x420941;_0x174a67[_0x1a050a(0x53c)]&&_0x5cee35[_0x1a050a(0x6fb)]()&&(_0x446590+=_0x420941);const _0x19f89c=this[_0x1a050a(0x7c2)](),_0x1a4147=_0xe27ae1[_0x1a050a(0x73)]-_0x19f89c-this[_0x1a050a(0x5a7)]()[_0x1a050a(0x3de)]+_0x12bf80[_0x1a050a(0x79f)][_0x1a050a(0x170)](),_0x65632=0x0;return new _0xddba60(_0x65632,_0x19f89c,_0x446590,_0x1a4147);}}},Scene_Boot[_0x2546c9(0x79f)][_0x2546c9(0xa7c)]=function(){const _0x5cc6bf=_0x2546c9,_0x453ca3=VisuMZ['BattleCore'][_0x5cc6bf(0x4b7)];_0x453ca3[_0x5cc6bf(0x2f3)][_0x5cc6bf(0x45a)]===undefined&&(_0x453ca3[_0x5cc6bf(0x2f3)][_0x5cc6bf(0x45a)]=_0x5cc6bf(0x4bf)),_0x453ca3[_0x5cc6bf(0x99a)][_0x5cc6bf(0xa52)]===undefined&&(_0x453ca3[_0x5cc6bf(0x99a)]['SmoothImage']=![]),_0x453ca3[_0x5cc6bf(0x862)]['SmoothImage']===undefined&&(_0x453ca3[_0x5cc6bf(0x862)]['SmoothImage']=!![]),_0x453ca3[_0x5cc6bf(0x99a)][_0x5cc6bf(0x28e)]===undefined&&(_0x5cc6bf(0x74d)!==_0x5cc6bf(0x74d)?_0x4eab98+=_0xa54e86:_0x453ca3[_0x5cc6bf(0x99a)]['PrioritySortActive']=![]),_0x453ca3[_0x5cc6bf(0x99a)][_0x5cc6bf(0x9e9)]===undefined&&(_0x453ca3['Actor'][_0x5cc6bf(0x9e9)]=!![]);},VisuMZ[_0x2546c9(0x3e3)]={},Scene_Boot[_0x2546c9(0x79f)][_0x2546c9(0x74)]=function(){const _0x362793=_0x2546c9;for(const _0xc0c6ac of VisuMZ[_0x362793(0x895)][_0x362793(0x4b7)][_0x362793(0x2f3)][_0x362793(0x534)]){if(!_0xc0c6ac)continue;const _0xbf60bf=_0xc0c6ac[_0x362793(0x38d)]['toUpperCase']()[_0x362793(0xb19)]();VisuMZ[_0x362793(0x3e3)][_0xbf60bf]=_0xc0c6ac;}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x65d)]={},Scene_Boot['prototype'][_0x2546c9(0x805)]=function(){const _0x289789=_0x2546c9,_0x1538ca=VisuMZ[_0x289789(0x895)][_0x289789(0x65d)],_0x3120c6=_0x289789(0x7dd),_0x5bae2b=[[_0x289789(0x5e6),'PRE-'],['Post','POST-']],_0x383edc=[[_0x289789(0x70f),_0x289789(0x4d3)],['%1Damage%2JS',_0x289789(0x2d9)]],_0x4e7a63=[['',''],[_0x289789(0x75f),_0x289789(0x17c)],[_0x289789(0x7ee),'AS\x20TARGET']];for(const _0x2d52db of _0x383edc){for(const _0x3069fd of _0x4e7a63){for(const _0x3ca2a6 of _0x5bae2b){const _0x107c8d=_0x2d52db[0x0][_0x289789(0xa3e)](_0x3ca2a6[0x0],_0x3069fd[0x0]),_0xaca5ed=_0x2d52db[0x1]['format'](_0x3ca2a6[0x1],_0x3069fd[0x1])['trim'](),_0x57256a=new RegExp(_0x3120c6[_0x289789(0xa3e)](_0xaca5ed),'i');_0x1538ca[_0x107c8d]=_0x57256a;}}}const _0x450742=[['%1StartActionJS',_0x289789(0x3d4)],[_0x289789(0x59d),_0x289789(0x453)]];for(const _0x318412 of _0x450742){for(const _0x26d2f4 of _0x5bae2b){const _0x1f2729=_0x318412[0x0]['format'](_0x26d2f4[0x0]),_0x39d973=_0x318412[0x1][_0x289789(0xa3e)](_0x26d2f4[0x1]),_0x440c72=new RegExp(_0x3120c6[_0x289789(0xa3e)](_0x39d973),'i');_0x1538ca[_0x1f2729]=_0x440c72;}}const _0x4b95ad=[[_0x289789(0xa62),'JS\x20%1START\x20BATTLE'],[_0x289789(0x9f3),_0x289789(0x15a)],[_0x289789(0x3ee),_0x289789(0x667)],['BattleDefeatJS',_0x289789(0xe6)],['EscapeSuccessJS',_0x289789(0x665)],[_0x289789(0x32e),_0x289789(0x78b)],['%1StartTurnJS',_0x289789(0x6bb)],[_0x289789(0x869),_0x289789(0x331)],[_0x289789(0xd1),_0x289789(0x2a3)]];for(const _0x17b896 of _0x4b95ad){if(_0x289789(0x673)==='Aayna')this['opacity']=this[_0x289789(0xac6)](this['opacity'],this[_0x289789(0x45c)],_0x14a56e,_0x203ccc,_0xd8590d);else for(const _0x12fb26 of _0x5bae2b){const _0x4d1a42=_0x17b896[0x0]['format'](_0x12fb26[0x0]),_0x1fc1ec=_0x17b896[0x1][_0x289789(0xa3e)](_0x12fb26[0x1]),_0x43298c=new RegExp(_0x3120c6[_0x289789(0xa3e)](_0x1fc1ec),'i');_0x1538ca[_0x4d1a42]=_0x43298c;}}},Scene_Boot[_0x2546c9(0x79f)][_0x2546c9(0x662)]=function(){const _0x22d607=_0x2546c9,_0x29ecdb=$dataSkills[_0x22d607(0x1ee)]($dataItems);for(const _0x3a9b5a of _0x29ecdb){if(!_0x3a9b5a)continue;VisuMZ[_0x22d607(0x895)][_0x22d607(0x9b5)](_0x3a9b5a);}},Scene_Boot[_0x2546c9(0x79f)][_0x2546c9(0x366)]=function(){const _0x30cfb4=_0x2546c9,_0x3ca979=$dataActors[_0x30cfb4(0x1ee)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0xf3182 of _0x3ca979){if('SFRFu'!==_0x30cfb4(0x1a4))_0x49f943[_0x30cfb4(0x58f)](_0x30cfb4(0x128));else{if(!_0xf3182)continue;VisuMZ['BattleCore'][_0x30cfb4(0x74f)](_0xf3182);}}},Scene_Boot['prototype'][_0x2546c9(0xa4c)]=function(){const _0x3dcf36=_0x2546c9,_0x133830=VisuMZ[_0x3dcf36(0x895)][_0x3dcf36(0x4b7)][_0x3dcf36(0xafe)]['BaseTroopIDs'],_0x25e489=[];for(const _0x31fa8b of _0x133830){if(_0x3dcf36(0x126)===_0x3dcf36(0x4b8))return 0x0;else{const _0x348a6b=$dataTroops[_0x31fa8b];if(_0x348a6b)_0x25e489['push'](JsonEx[_0x3dcf36(0x785)](_0x348a6b));}}for(const _0x1f7bac of $dataTroops){if('pfJdt'!==_0x3dcf36(0x35b))return _0x17b301[_0x3dcf36(0x895)]['Settings'][_0x3dcf36(0x8c9)]['SkillItemBorderCols'];else{if(!_0x1f7bac)continue;for(const _0x4f13cf of _0x25e489){if(_0x4f13cf['id']===_0x1f7bac['id'])continue;_0x1f7bac[_0x3dcf36(0x418)]=_0x1f7bac[_0x3dcf36(0x418)][_0x3dcf36(0x1ee)](_0x4f13cf['pages']);}}}},Scene_Boot[_0x2546c9(0x79f)][_0x2546c9(0x681)]=function(){const _0x39e499=_0x2546c9,_0x2aaeb0=VisuMZ['BattleCore'][_0x39e499(0x4b7)][_0x39e499(0xafe)];if(_0x2aaeb0[_0x39e499(0x60f)]>0x0&&$dataCommonEvents[_0x2aaeb0[_0x39e499(0x60f)]]){if(_0x39e499(0x780)===_0x39e499(0x4e9))return!![];else{const _0x5ba5ad=$dataCommonEvents[_0x2aaeb0[_0x39e499(0x60f)]],_0x4abe44=_0x5ba5ad[_0x39e499(0x223)][_0x39e499(0x4ce)]-0x2,_0x53254d=_0x5ba5ad[_0x39e499(0x223)][_0x4abe44];if(_0x53254d&&_0x53254d[_0x39e499(0x2a7)]!==0xe6){if('IWpPT'==='IWpPT'){const _0x3d1867={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x595b24=_0x5ba5ad[_0x39e499(0x223)]['pop']();_0x5ba5ad[_0x39e499(0x223)]['unshift'](_0x3d1867),_0x5ba5ad[_0x39e499(0x223)][_0x39e499(0x616)](_0x595b24);}else this[_0x39e499(0x800)]()?this[_0x39e499(0x911)]():_0x563b15[_0x39e499(0x895)][_0x39e499(0x2c6)]['call'](this);}}}},Scene_Boot[_0x2546c9(0x79f)][_0x2546c9(0x7cb)]=function(){const _0x5b4e33=_0x2546c9;VisuMZ[_0x5b4e33(0x895)]['CreateCommonEventKeys'](),VisuMZ[_0x5b4e33(0x895)][_0x5b4e33(0x319)]($dataSkills),VisuMZ[_0x5b4e33(0x895)][_0x5b4e33(0x319)]($dataItems);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x85)]=function(){const _0x49183a=_0x2546c9;VisuMZ[_0x49183a(0x895)][_0x49183a(0x8e9)]={};for(const _0x577ed9 of $dataCommonEvents){if(!_0x577ed9)continue;if(_0x577ed9[_0x49183a(0x395)][_0x49183a(0x1e0)](/\[(.*)\]/i)){let _0x2dd7a3=String(RegExp['$1'])['replace'](/,/g,'')[_0x49183a(0x13e)]()[_0x49183a(0xb19)]();VisuMZ[_0x49183a(0x895)][_0x49183a(0x8e9)][_0x2dd7a3]=_0x577ed9['id'];}}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x319)]=function(_0x2abb1f){const _0x579507=_0x2546c9;for(const _0xccb1e9 of _0x2abb1f){if(!_0xccb1e9)continue;VisuMZ[_0x579507(0x895)][_0x579507(0x837)](_0xccb1e9);}},VisuMZ['BattleCore']['BindCommonEventKeysForObj']=function(_0x45801a){const _0x226553=_0x2546c9;if(!_0x45801a)return;if(!_0x45801a[_0x226553(0xac8)])return;VisuMZ['BattleCore'][_0x226553(0x8e9)]=VisuMZ[_0x226553(0x895)][_0x226553(0x8e9)]||{};const _0x22172a=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x3443a7=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x418d17=[];const _0x2c64a0=_0x45801a[_0x226553(0x4c1)][_0x226553(0x1e0)](_0x22172a);if(_0x2c64a0){for(const _0x57efbd of _0x2c64a0){if(_0x226553(0x6a4)===_0x226553(0x54c))this[_0x226553(0x772)]++;else{_0x57efbd[_0x226553(0x1e0)](_0x22172a);const _0x3f8729=String(RegExp['$1'])[_0x226553(0x24d)](',')[_0x226553(0x1b0)](_0x465332=>String(_0x465332)[_0x226553(0x13e)]()[_0x226553(0xb19)]());_0x418d17=_0x418d17[_0x226553(0x1ee)](_0x3f8729);}}if(!_0x45801a[_0x226553(0x4c1)]['match'](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x226553(0x361)===_0x226553(0x361))_0x45801a[_0x226553(0x4c1)]+=_0x226553(0x78c);else{if(!_0x368367[_0x226553(0x671)]())return;_0x317e47[_0x226553(0x96)](_0x33da72,_0x49037e);const _0x15aab8=_0x51b8c0[_0x226553(0x3fb)](),_0x16bf9e=_0x35f208[_0x226553(0x1b2)],_0x1e2d81=_0x2bcad4[_0x226553(0x6f4)];if(!_0x15aab8)return;_0x9dfa12['_targetIndex']=_0x16bf9e,_0x58643f[_0x226553(0x500)]=_0x312a00['_allTargets']?_0x59527b[_0x226553(0xb4)][_0x18631f[_0x226553(0xa43)]]||null:null,_0x3d0d79[_0x226553(0x500)]&&_0x1e2d81[_0x226553(0x13e)]()[_0x226553(0xb19)]()!==_0x226553(0x597)&&_0x15aab8['command119']([_0x1e2d81]);}};}if(_0x45801a['note'][_0x226553(0x1e0)](_0x3443a7)){if(_0x226553(0xa33)===_0x226553(0xa33)){const _0x32ba7e=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x226553(0x1b0)](_0x29a58d=>String(_0x29a58d)[_0x226553(0x13e)]()[_0x226553(0xb19)]());_0x418d17=_0x418d17[_0x226553(0x1ee)](_0x32ba7e);!_0x45801a[_0x226553(0x4c1)][_0x226553(0x1e0)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x45801a[_0x226553(0x4c1)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}else _0x556b48[_0x226553(0x895)]['Window_BattleStatus_initialize'][_0x226553(0x40c)](this,_0x281c4f),this[_0x226553(0x400)](),this[_0x226553(0x8ae)]();}for(const _0x24ec90 of _0x418d17){if(VisuMZ['BattleCore']['_commonEventKey'][_0x24ec90]){if('MIqAr'!=='AOEhv'){const _0x22c9b5=VisuMZ[_0x226553(0x895)][_0x226553(0x8e9)][_0x24ec90],_0x54ad7a={'code':0x2c,'dataId':_0x22c9b5,'value1':0x1,'value2':0x0};_0x45801a['effects'][_0x226553(0x40b)](_0x54ad7a);}else _0x2525e0+=_0xb40701(_0x56bca2['$2']);}}},Scene_Boot[_0x2546c9(0x79f)][_0x2546c9(0x75)]=function(){const _0x3ed4bf=_0x2546c9,_0x39233d=$dataSkills[_0x3ed4bf(0x1ee)]($dataItems);for(const _0x50de12 of _0x39233d){if(_0x3ed4bf(0x91f)==='kFwlv'){if(!_0x50de12)continue;VisuMZ['BattleCore']['Parse_Notetags_Targets'](_0x50de12);}else{let _0x42ce6a=0x0;return this[_0x3ed4bf(0xe2)]&&!this['_battler'][_0x3ed4bf(0x3c0)]()&&(_0x42ce6a-=this[_0x3ed4bf(0x946)],_0x42ce6a-=this[_0x3ed4bf(0x4f9)]),_0x42ce6a;}}},VisuMZ[_0x2546c9(0x895)]['ParseActorNotetags']=VisuMZ[_0x2546c9(0x92f)],VisuMZ[_0x2546c9(0x92f)]=function(_0x2c4975){const _0x5a01c1=_0x2546c9;VisuMZ['BattleCore']['ParseActorNotetags']&&VisuMZ[_0x5a01c1(0x895)]['ParseActorNotetags'][_0x5a01c1(0x40c)](this,_0x2c4975),VisuMZ[_0x5a01c1(0x895)]['Parse_Notetags_TraitObjects'](_0x2c4975);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xa8f)]=VisuMZ[_0x2546c9(0xa8f)],VisuMZ[_0x2546c9(0xa8f)]=function(_0x42a99a){const _0x1c04a4=_0x2546c9;VisuMZ['BattleCore'][_0x1c04a4(0xa8f)]&&VisuMZ[_0x1c04a4(0x895)]['ParseClassNotetags'][_0x1c04a4(0x40c)](this,_0x42a99a),VisuMZ[_0x1c04a4(0x895)][_0x1c04a4(0x74f)](_0x42a99a);},VisuMZ[_0x2546c9(0x895)]['ParseSkillNotetags']=VisuMZ[_0x2546c9(0x5c1)],VisuMZ['ParseSkillNotetags']=function(_0x1b1c3f){const _0x23c1d5=_0x2546c9;if(VisuMZ[_0x23c1d5(0x895)]['ParseSkillNotetags']){if(_0x23c1d5(0xa16)===_0x23c1d5(0x2cb))return this[_0x23c1d5(0x425)]()[_0x23c1d5(0x395)];else VisuMZ['BattleCore'][_0x23c1d5(0x5c1)][_0x23c1d5(0x40c)](this,_0x1b1c3f);}VisuMZ[_0x23c1d5(0x895)]['Parse_Notetags_Action'](_0x1b1c3f),VisuMZ[_0x23c1d5(0x895)][_0x23c1d5(0x512)](_0x1b1c3f);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x1d7)]=VisuMZ[_0x2546c9(0x1d7)],VisuMZ['ParseItemNotetags']=function(_0x13871b){const _0x2ccbf7=_0x2546c9;VisuMZ[_0x2ccbf7(0x895)][_0x2ccbf7(0x1d7)]&&VisuMZ[_0x2ccbf7(0x895)][_0x2ccbf7(0x1d7)]['call'](this,_0x13871b),VisuMZ['BattleCore'][_0x2ccbf7(0x9b5)](_0x13871b),VisuMZ['BattleCore'][_0x2ccbf7(0x512)](_0x13871b);},VisuMZ['BattleCore'][_0x2546c9(0xb2b)]=VisuMZ[_0x2546c9(0xb2b)],VisuMZ[_0x2546c9(0xb2b)]=function(_0x15c28b){const _0x56e983=_0x2546c9;VisuMZ[_0x56e983(0x895)][_0x56e983(0xb2b)]&&VisuMZ[_0x56e983(0x895)][_0x56e983(0xb2b)][_0x56e983(0x40c)](this,_0x15c28b),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x15c28b);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x53d)]=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x2546c9(0x53d)]=function(_0x2a8970){const _0x59975d=_0x2546c9;VisuMZ['BattleCore'][_0x59975d(0x53d)]&&VisuMZ[_0x59975d(0x895)]['ParseArmorNotetags'][_0x59975d(0x40c)](this,_0x2a8970),VisuMZ[_0x59975d(0x895)]['Parse_Notetags_TraitObjects'](_0x2a8970);},VisuMZ['BattleCore'][_0x2546c9(0x1ab)]=VisuMZ[_0x2546c9(0x1ab)],VisuMZ[_0x2546c9(0x1ab)]=function(_0x12c3b3){const _0x43263d=_0x2546c9;VisuMZ[_0x43263d(0x895)][_0x43263d(0x1ab)]&&VisuMZ[_0x43263d(0x895)][_0x43263d(0x1ab)]['call'](this,_0x12c3b3),VisuMZ[_0x43263d(0x895)][_0x43263d(0x74f)](_0x12c3b3);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x93d)]=VisuMZ[_0x2546c9(0x93d)],VisuMZ[_0x2546c9(0x93d)]=function(_0x222526){const _0x4cd71e=_0x2546c9;VisuMZ[_0x4cd71e(0x895)][_0x4cd71e(0x93d)]&&VisuMZ[_0x4cd71e(0x895)][_0x4cd71e(0x93d)]['call'](this,_0x222526),VisuMZ['BattleCore'][_0x4cd71e(0x74f)](_0x222526);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x9b5)]=function(_0x598094){const _0xca9d37=_0x2546c9,_0x2a3850=[_0xca9d37(0x3c2),'PostApplyJS',_0xca9d37(0x583),_0xca9d37(0x300),'PreStartActionJS',_0xca9d37(0xea),_0xca9d37(0x906),_0xca9d37(0x2de)];for(const _0x59d552 of _0x2a3850){VisuMZ[_0xca9d37(0x895)][_0xca9d37(0x657)](_0x598094,_0x59d552);}const _0x9df284=_0x598094[_0xca9d37(0x4c1)];_0x9df284[_0xca9d37(0x1e0)](/<ALWAYS CRITICAL/i)&&(_0x598094['damage']['critical']=!![]);_0x9df284[_0xca9d37(0x1e0)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0xca9d37(0xa9a)!==_0xca9d37(0x2bc)?_0x598094[_0xca9d37(0x851)]=Math['max'](0x1,Number(RegExp['$1'])):this[_0xca9d37(0x1f5)][this[_0xca9d37(0x354)]]=_0x45787e);if(_0x9df284[_0xca9d37(0x1e0)](/<TARGET:[ ](.*)>/i)){if('IdCYF'!==_0xca9d37(0xa4f)){if(!_0x2d5592[_0xca9d37(0x671)]())return;const _0x42be65=_0x135683[_0xca9d37(0x8e5)];_0x42be65['pushBaseLine']();}else _0x598094['scope']=String(RegExp['$1'])[_0xca9d37(0x13e)]()[_0xca9d37(0xb19)]();}},VisuMZ['BattleCore']['Parse_Notetags_TraitObjects']=function(_0x3a021b){const _0x84a9a9=_0x2546c9,_0x42988c=[_0x84a9a9(0x812),_0x84a9a9(0x590),_0x84a9a9(0x168),_0x84a9a9(0xb27),_0x84a9a9(0x347),_0x84a9a9(0x754),_0x84a9a9(0x4a9),'PostDamageAsTargetJS',_0x84a9a9(0xab1),_0x84a9a9(0xea),'PreEndActionJS',_0x84a9a9(0x2de),'PreStartBattleJS',_0x84a9a9(0x256),_0x84a9a9(0x5b2),_0x84a9a9(0x72),_0x84a9a9(0x3ee),_0x84a9a9(0x3f5),_0x84a9a9(0x889),_0x84a9a9(0x32e),_0x84a9a9(0x76),_0x84a9a9(0xa89),_0x84a9a9(0x6a6),_0x84a9a9(0x50b),_0x84a9a9(0x4b5),_0x84a9a9(0x38c)];for(const _0x3e3338 of _0x42988c){if(_0x84a9a9(0x734)!==_0x84a9a9(0x734)){const _0x1f3f3b=_0x261c50[_0x84a9a9(0xb44)],_0xf57b24=_0x84a9a9(0x1c8);this['addCommand'](_0x1f3f3b,_0xf57b24);}else VisuMZ[_0x84a9a9(0x895)][_0x84a9a9(0x657)](_0x3a021b,_0x3e3338);}},VisuMZ['BattleCore'][_0x2546c9(0x512)]=function(_0x32b20b){const _0x47feab=_0x2546c9,_0x4c7c1=_0x32b20b['note'];if(_0x4c7c1[_0x47feab(0x1e0)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){if('gPwXr'!==_0x47feab(0x871)){if(_0x22a3b3[_0x47feab(0x4c1)][_0x47feab(0x1e0)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x29fb34=_0x341910(_0x503cda['$1'])[_0x47feab(0x13e)]()[_0x47feab(0xb19)]();if(_0x29fb34===_0x47feab(0x511))return _0x47feab(0x511);if(_0xd3564a[_0x47feab(0x3e3)][_0x29fb34])return _0x29fb34;}const _0x3faea7=_0x2b705e[_0x47feab(0x895)][_0x47feab(0x4b7)]['Damage'][_0x47feab(0x37a)]['toUpperCase']()[_0x47feab(0xb19)]();if(_0x5d8c2f[_0x47feab(0x3e3)][_0x3faea7])return _0x3faea7;return'MANUAL';}else{const _0x14f5a7=String(RegExp['$1']),_0x48afa1=VisuMZ[_0x47feab(0x895)]['createKeyJS'](_0x32b20b,_0x47feab(0x21e));VisuMZ['BattleCore'][_0x47feab(0x7b)](_0x14f5a7,_0x48afa1);}}if(_0x4c7c1[_0x47feab(0x1e0)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x1f8e3e=String(RegExp['$1']),_0xa39ade=VisuMZ[_0x47feab(0x895)][_0x47feab(0x3c6)](_0x32b20b,_0x47feab(0x5e9));VisuMZ['BattleCore'][_0x47feab(0x213)](_0x1f8e3e,_0xa39ade);}},VisuMZ['BattleCore']['JS']={},VisuMZ[_0x2546c9(0x895)]['createJS']=function(_0x2eed20,_0x1e641c){const _0x129e31=_0x2546c9,_0x5a2f0a=_0x2eed20[_0x129e31(0x4c1)];if(_0x5a2f0a[_0x129e31(0x1e0)](VisuMZ[_0x129e31(0x895)][_0x129e31(0x65d)][_0x1e641c])){const _0x191758=RegExp['$1'],_0x3ed176=_0x129e31(0x70b)[_0x129e31(0xa3e)](_0x191758),_0x2bd037=VisuMZ['BattleCore']['createKeyJS'](_0x2eed20,_0x1e641c);VisuMZ[_0x129e31(0x895)]['JS'][_0x2bd037]=new Function(_0x3ed176);}},VisuMZ[_0x2546c9(0x895)]['createKeyJS']=function(_0x357f56,_0x238480){const _0x298653=_0x2546c9;if(VisuMZ[_0x298653(0x3c6)])return VisuMZ[_0x298653(0x3c6)](_0x357f56,_0x238480);let _0x5c646f='';if($dataActors[_0x298653(0xa7e)](_0x357f56))_0x5c646f=_0x298653(0x76f)[_0x298653(0xa3e)](_0x357f56['id'],_0x238480);if($dataClasses[_0x298653(0xa7e)](_0x357f56))_0x5c646f=_0x298653(0x7cf)[_0x298653(0xa3e)](_0x357f56['id'],_0x238480);if($dataSkills[_0x298653(0xa7e)](_0x357f56))_0x5c646f=_0x298653(0x6bd)[_0x298653(0xa3e)](_0x357f56['id'],_0x238480);if($dataItems['includes'](_0x357f56))_0x5c646f=_0x298653(0x5a0)[_0x298653(0xa3e)](_0x357f56['id'],_0x238480);if($dataWeapons[_0x298653(0xa7e)](_0x357f56))_0x5c646f=_0x298653(0x694)[_0x298653(0xa3e)](_0x357f56['id'],_0x238480);if($dataArmors[_0x298653(0xa7e)](_0x357f56))_0x5c646f=_0x298653(0x225)[_0x298653(0xa3e)](_0x357f56['id'],_0x238480);if($dataEnemies[_0x298653(0xa7e)](_0x357f56))_0x5c646f=_0x298653(0x96d)[_0x298653(0xa3e)](_0x357f56['id'],_0x238480);if($dataStates[_0x298653(0xa7e)](_0x357f56))_0x5c646f=_0x298653(0x9f5)[_0x298653(0xa3e)](_0x357f56['id'],_0x238480);return _0x5c646f;},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x7b)]=function(_0x272e79,_0xf439f3){const _0x3cadbc=_0x2546c9,_0x5f4d44=_0x3cadbc(0x1b6)['format'](_0x272e79);VisuMZ[_0x3cadbc(0x895)]['JS'][_0xf439f3]=new Function(_0x5f4d44);},VisuMZ['BattleCore'][_0x2546c9(0x213)]=function(_0x1aab1f,_0x1ecc86){const _0x7540fc=_0x2546c9,_0x352449=_0x7540fc(0x52e)['format'](_0x1aab1f);VisuMZ[_0x7540fc(0x895)]['JS'][_0x1ecc86]=new Function(_0x352449);},TextManager[_0x2546c9(0x1b3)]=VisuMZ['BattleCore']['Settings'][_0x2546c9(0x1a3)][_0x2546c9(0x5f2)],TextManager['autoBattleStart']=VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x4b7)]['AutoBattle'][_0x2546c9(0x897)],TextManager[_0x2546c9(0xb44)]=VisuMZ[_0x2546c9(0x895)]['Settings']['AutoBattle']['StyleName'],TextManager[_0x2546c9(0xb0a)]=VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x4b7)][_0x2546c9(0x85b)][_0x2546c9(0x38d)],ColorManager[_0x2546c9(0x3b4)]=function(_0x3a127a){const _0x15649e=_0x2546c9;_0x3a127a=String(_0x3a127a);if(_0x3a127a[_0x15649e(0x1e0)](/#(.*)/i))return'iyiOs'===_0x15649e(0x2d7)?_0x54c123[_0x15649e(0x436)]:'#%1'[_0x15649e(0xa3e)](String(RegExp['$1']));else{if(_0x15649e(0x21c)!==_0x15649e(0x5ed))return this[_0x15649e(0x484)](Number(_0x3a127a));else this[_0x15649e(0xa2f)]=0x0,this[_0x15649e(0x38a)]=0x0,this[_0x15649e(0x946)]=0x0,this[_0x15649e(0xf3)]=0x0,this['_floatDuration']=0x0,this[_0x15649e(0x371)]=0x0,this['_floatEasing']=_0x15649e(0x695),this['_jumpHeight']=0x0,this['_jumpMaxHeight']=0x0,this[_0x15649e(0x9b1)]=0x0,this[_0x15649e(0x7fd)]=0x0,this[_0x15649e(0x45c)]=0xff,this['_opacityDuration']=0x0,this[_0x15649e(0x420)]=0x0,this[_0x15649e(0x349)]=_0x15649e(0x695),this[_0x15649e(0x3ef)]=0x0,this[_0x15649e(0x27a)]=0x0,this['_angleDuration']=0x0,this[_0x15649e(0x398)]=0x0,this[_0x15649e(0x1f2)]=_0x15649e(0x695),this['_angleRevertOnFinish']=!![],this[_0x15649e(0x207)]=0x0,this['_skewY']=0x0,this[_0x15649e(0x8de)]=0x0,this['_targetSkewY']=0x0,this[_0x15649e(0x468)]=0x0,this[_0x15649e(0x73e)]=0x0,this[_0x15649e(0x564)]=_0x15649e(0x695),this[_0x15649e(0x218)]=0x1,this['_growY']=0x1,this['_targetGrowX']=0x1,this[_0x15649e(0x8e8)]=0x1,this[_0x15649e(0xb4f)]=0x0,this[_0x15649e(0x845)]=0x0,this['_growEasing']=_0x15649e(0x695),this[_0x15649e(0x27e)]=0x1,this[_0x15649e(0x244)]=0x0,this[_0x15649e(0x4c9)]=0x0,this[_0x15649e(0x865)]=0x0,this[_0x15649e(0x26c)]=0x0,this[_0x15649e(0x13c)]=_0x15649e(0x695);}},DataManager[_0x2546c9(0x840)]=function(_0x2530d5){const _0x45a24d=_0x2546c9;if(_0x2530d5[_0x45a24d(0x4c1)][_0x45a24d(0x1e0)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x45a24d(0x6d8)===_0x45a24d(0x181))_0x444d39[_0x45a24d(0x637)]=![];else{const _0x1645e3=String(RegExp['$1'])[_0x45a24d(0x13e)]()['trim']();if(_0x1645e3===_0x45a24d(0x511))return _0x45a24d(0x511);if(VisuMZ['DamageStyles'][_0x1645e3])return _0x1645e3;}}const _0x11e097=VisuMZ[_0x45a24d(0x895)][_0x45a24d(0x4b7)][_0x45a24d(0x2f3)][_0x45a24d(0x37a)][_0x45a24d(0x13e)]()['trim']();if(VisuMZ[_0x45a24d(0x3e3)][_0x11e097])return _0x11e097;return _0x45a24d(0x511);},DataManager[_0x2546c9(0x2ef)]=function(_0x27dd64){const _0x446a89=_0x2546c9;_0x27dd64=_0x27dd64['toUpperCase']()[_0x446a89(0xb19)](),this[_0x446a89(0x8f2)]=this[_0x446a89(0x8f2)]||{};if(this[_0x446a89(0x8f2)][_0x27dd64])return this[_0x446a89(0x8f2)][_0x27dd64];for(let _0x3620f4=0x1;_0x3620f4<0x64;_0x3620f4++){if(!$dataSystem[_0x446a89(0x4d9)][_0x3620f4])continue;let _0x2ddad5=$dataSystem['skillTypes'][_0x3620f4][_0x446a89(0x13e)]()[_0x446a89(0xb19)]();_0x2ddad5=_0x2ddad5[_0x446a89(0x795)](/\x1I\[(\d+)\]/gi,''),_0x2ddad5=_0x2ddad5[_0x446a89(0x795)](/\\I\[(\d+)\]/gi,''),this[_0x446a89(0x8f2)][_0x2ddad5]=_0x3620f4;}return this['_stypeIDs'][_0x27dd64]||0x0;},DataManager[_0x2546c9(0xa49)]=function(_0x2f860a){const _0x6cdef5=_0x2546c9;_0x2f860a=_0x2f860a[_0x6cdef5(0x13e)]()[_0x6cdef5(0xb19)](),this[_0x6cdef5(0x329)]=this[_0x6cdef5(0x329)]||{};if(this[_0x6cdef5(0x329)][_0x2f860a])return this[_0x6cdef5(0x329)][_0x2f860a];for(const _0x1e3c37 of $dataSkills){if(!_0x1e3c37)continue;this[_0x6cdef5(0x329)][_0x1e3c37[_0x6cdef5(0x395)][_0x6cdef5(0x13e)]()['trim']()]=_0x1e3c37['id'];}return this[_0x6cdef5(0x329)][_0x2f860a]||0x0;},DataManager[_0x2546c9(0x482)]=function(_0x4f72e9){const _0x387af9=_0x2546c9;_0x4f72e9=_0x4f72e9[_0x387af9(0x13e)]()['trim'](),this[_0x387af9(0x9b3)]=this['_enemyIDs']||{};if(this[_0x387af9(0x9b3)][_0x4f72e9])return this['_enemyIDs'][_0x4f72e9];for(const _0x4d5748 of $dataEnemies){if('vMPrA'===_0x387af9(0xa46)){this[_0x387af9(0x338)]=this[_0x387af9(0x267)]();const _0x510b09=_0x5b8f16[_0x387af9(0x895)][_0x387af9(0x4b7)][_0x387af9(0x8c9)];_0x510b09[_0x387af9(0x95a)]&&(this['opacity']=0x0);}else{if(!_0x4d5748)continue;this[_0x387af9(0x9b3)][_0x4d5748['name']['toUpperCase']()[_0x387af9(0xb19)]()]=_0x4d5748['id'];}}return this[_0x387af9(0x9b3)][_0x4f72e9]||0x0;},DataManager[_0x2546c9(0x5af)]=function(_0x5e263c){const _0x5729bd=_0x2546c9;_0x5e263c=_0x5e263c[_0x5729bd(0x13e)]()[_0x5729bd(0xb19)](),this[_0x5729bd(0x73b)]=this[_0x5729bd(0x73b)]||{};if(this['_wtypeIDs'][_0x5e263c])return this[_0x5729bd(0x73b)][_0x5e263c];for(let _0x1208af=0x1;_0x1208af<0x64;_0x1208af++){if(!$dataSystem['weaponTypes'][_0x1208af])continue;let _0x14695e=$dataSystem[_0x5729bd(0x3e6)][_0x1208af][_0x5729bd(0x13e)]()['trim']();_0x14695e=_0x14695e[_0x5729bd(0x795)](/\x1I\[(\d+)\]/gi,''),_0x14695e=_0x14695e[_0x5729bd(0x795)](/\\I\[(\d+)\]/gi,''),this[_0x5729bd(0x73b)][_0x14695e]=_0x1208af;}return this[_0x5729bd(0x73b)][_0x5729bd(0x93f)]=0x0,this[_0x5729bd(0x73b)][_0x5e263c]||0x0;},DataManager['battleDisplayText']=function(_0x396372){const _0x505e96=_0x2546c9,_0x521293='\x5cI[%1]%2';let _0x179a9e=_0x396372[_0x505e96(0x9b7)],_0x47bcf5=_0x396372['name'];const _0x421f78=_0x396372[_0x505e96(0x4c1)];return _0x421f78[_0x505e96(0x1e0)](/<DISPLAY ICON: (\d+)>/i)&&(_0x179a9e=Number(RegExp['$1'])),_0x421f78[_0x505e96(0x1e0)](/<DISPLAY TEXT: (.*)>/i)&&(_0x47bcf5=String(RegExp['$1'])),_0x521293['format'](_0x179a9e,_0x47bcf5);},DataManager['battleCommandName']=function(_0x3f124f){const _0x4b9cf0=_0x2546c9;if(_0x3f124f[_0x4b9cf0(0x4c1)]['match'](/<COMMAND TEXT: (.*)>/i))return String(RegExp['$1']);else{if(_0x4b9cf0(0x33f)===_0x4b9cf0(0x33f))return _0x3f124f[_0x4b9cf0(0x395)];else{if(!_0x4a516b[_0x4b9cf0(0x165)]()&&this[_0x4b9cf0(0x150)]===_0x5a3fa3){const _0x4fad14=_0x254122[_0x4b9cf0(0x79f)]['battleLayoutStyle']();[_0x4b9cf0(0x304),_0x4b9cf0(0x223),'portrait',_0x4b9cf0(0x60d)][_0x4b9cf0(0xa7e)](_0x4fad14)&&(this[_0x4b9cf0(0x3fc)]=0x0);}}}},DataManager[_0x2546c9(0x8f9)]=function(_0x2c5cab){const _0x10ba2a=_0x2546c9;return _0x2c5cab['note']['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x2c5cab[_0x10ba2a(0x9b7)];},DataManager[_0x2546c9(0xa10)]=function(_0x289bbd){const _0x3c6ee=_0x2546c9,_0x53cbd8=$dataEnemies[_0x289bbd];if(_0x53cbd8){if('NhwbQ'!==_0x3c6ee(0x7ac)){if(_0x53cbd8[_0x3c6ee(0x4c1)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x504339=String(RegExp['$1'])[_0x3c6ee(0x24d)](/[\r\n]+/)[_0x3c6ee(0x8ad)](''),_0x1d4153=this[_0x3c6ee(0x4ef)](_0x504339);_0x289bbd=this[_0x3c6ee(0x482)](_0x1d4153)||_0x289bbd,_0x289bbd=DataManager[_0x3c6ee(0xa10)](_0x289bbd);}}else return!![];}return _0x289bbd;},DataManager[_0x2546c9(0x4ef)]=function(_0x2d9c3f){const _0x2d9a83=_0x2546c9;let _0x40af86=0x0;const _0x5606e5={};for(const _0x5c3329 of _0x2d9c3f){if(_0x5c3329['match'](/(.*):[ ](\d+)/i)){const _0x2620c2=String(RegExp['$1'])[_0x2d9a83(0xb19)](),_0x295d65=Number(RegExp['$2']);_0x5606e5[_0x2620c2]=_0x295d65,_0x40af86+=_0x295d65;}else{if(_0x5c3329[_0x2d9a83(0x1e0)](/(.*):[ ](\d+\.?\d+)/i)){const _0x4bdd37=String(RegExp['$1'])[_0x2d9a83(0xb19)](),_0xef1d02=Number(RegExp['$2']);_0x5606e5[_0x4bdd37]=_0xef1d02,_0x40af86+=_0xef1d02;}else _0x5c3329!==''&&(_0x2d9a83(0xa19)===_0x2d9a83(0xa19)?(_0x5606e5[_0x5c3329]=0x1,_0x40af86++):(_0x8a2e11[_0x2d9a83(0x895)]['ParseStateNotetags']&&_0x2572fb['BattleCore']['ParseStateNotetags'][_0x2d9a83(0x40c)](this,_0x1f790d),_0x503c1f['BattleCore'][_0x2d9a83(0x74f)](_0x256e24)));}}if(_0x40af86<=0x0)return'';let _0x312235=Math['random']()*_0x40af86;for(const _0x1169a6 in _0x5606e5){if(_0x2d9a83(0x3a3)!==_0x2d9a83(0x3a3))_0x34d58c=(_0x11a6ba+_0x3a0c1b)/0x2;else{_0x312235-=_0x5606e5[_0x1169a6];if(_0x312235<=0x0)return _0x1169a6;}}return'';},DataManager[_0x2546c9(0x25d)]=function(_0x1da5e1){const _0x3335ab=_0x2546c9;if(!_0x1da5e1)return![];if(!VisuMZ['BattleCore'][_0x3335ab(0x4b7)][_0x3335ab(0x950)][_0x3335ab(0x573)])return![];if(_0x1da5e1[_0x3335ab(0x4c1)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x1da5e1[_0x3335ab(0x4c1)][_0x3335ab(0x1e0)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x48a18b of _0x1da5e1[_0x3335ab(0xac8)]){if(_0x3335ab(0x8d5)!==_0x3335ab(0x537)){if(!_0x48a18b)continue;if(_0x48a18b['code']===Game_Action['EFFECT_COMMON_EVENT'])return!![];}else _0x33a83a[_0x3335ab(0x895)]['ParseClassNotetags'][_0x3335ab(0x40c)](this,_0x4c8aea);}return![];},DataManager[_0x2546c9(0x32a)]=function(_0x39d4d5){const _0x558cf3=_0x2546c9,_0xe0f83d=$dataTroops[_0x39d4d5];if(!_0xe0f83d)return'';let _0x49810d='';_0x49810d+=_0xe0f83d[_0x558cf3(0x395)];for(const _0x304005 of _0xe0f83d[_0x558cf3(0x418)]){if(_0x558cf3(0x237)==='IXGxT')_0x2d3392['prototype'][_0x558cf3(0x9c)][_0x558cf3(0x40c)](this),this[_0x558cf3(0xa79)](),this[_0x558cf3(0x554)]();else for(const _0x3d245c of _0x304005[_0x558cf3(0x223)]){[0x6c,0x198]['includes'](_0x3d245c['code'])&&(_0x558cf3(0x97a)===_0x558cf3(0xb06)?_0x268bdf[_0x558cf3(0x9d3)]():(_0x49810d+='\x0a',_0x49810d+=_0x3d245c[_0x558cf3(0xa9)][0x0]));}}return _0x49810d;},ConfigManager[_0x2546c9(0xd9)]=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x2546c9(0x1c8)]=ConfigManager[_0x2546c9(0x1c8)]??![],ConfigManager['visualHpGauge']=ConfigManager[_0x2546c9(0xb0a)]??!![],VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x9dc)]=ConfigManager['makeData'],ConfigManager[_0x2546c9(0x58e)]=function(){const _0x46a190=_0x2546c9,_0x4b5949=VisuMZ['BattleCore'][_0x46a190(0x9dc)]['call'](this);return _0x4b5949[_0x46a190(0xd9)]=this[_0x46a190(0xd9)],_0x4b5949['autoBattleUseSkills']=this[_0x46a190(0x1c8)],_0x4b5949['visualHpGauge']=this[_0x46a190(0xb0a)],_0x4b5949;},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x5b7)]=ConfigManager[_0x2546c9(0x9cf)],ConfigManager[_0x2546c9(0x9cf)]=function(_0x48f579){const _0x58634b=_0x2546c9;VisuMZ[_0x58634b(0x895)][_0x58634b(0x5b7)][_0x58634b(0x40c)](this,_0x48f579);_0x58634b(0xd9)in _0x48f579?this[_0x58634b(0xd9)]=_0x48f579[_0x58634b(0xd9)]:this['autoBattleAtStart']=![];if('autoBattleUseSkills'in _0x48f579)this[_0x58634b(0x1c8)]=_0x48f579[_0x58634b(0x1c8)];else{if(_0x58634b(0x23d)==='NUndN'){const _0x3dd981=_0x1d33ae(_0x23e341['$1']);return[_0x162216[_0x58634b(0x408)]()['members']()[_0x3dd981]];}else this['autoBattleUseSkills']=![];}_0x58634b(0xb0a)in _0x48f579?_0x58634b(0x164)!==_0x58634b(0x164)?_0x237ca5['BattleCore']['ParseItemNotetags']['call'](this,_0x5969ce):this[_0x58634b(0xb0a)]=_0x48f579[_0x58634b(0xb0a)]:this['visualHpGauge']=!![];},VisuMZ['BattleCore'][_0x2546c9(0x514)]=BattleManager[_0x2546c9(0x3b2)],BattleManager[_0x2546c9(0x3b2)]=function(){const _0x59d6e8=_0x2546c9;VisuMZ['BattleCore'][_0x59d6e8(0x514)][_0x59d6e8(0x40c)](this),this[_0x59d6e8(0x817)]=[];},BattleManager[_0x2546c9(0xa67)]=function(){const _0x315361=_0x2546c9;if(!SceneManager[_0x315361(0x671)]())return;const _0x11f410=SceneManager['_scene'][_0x315361(0x432)];if(_0x11f410)_0x11f410[_0x315361(0xb0f)]();},BattleManager[_0x2546c9(0x6c2)]=function(){const _0x21d6ef=_0x2546c9;if(BattleManager[_0x21d6ef(0x777)]())return _0x21d6ef(0x7ba);return _0x21d6ef(0x11f);},BattleManager[_0x2546c9(0x19e)]=function(_0x579251){const _0x4e7f64=_0x2546c9;return _0x579251=_0x579251[_0x4e7f64(0x13e)]()['trim'](),this[_0x4e7f64(0x6c2)]()===_0x579251;},BattleManager[_0x2546c9(0x4cc)]=function(){const _0x1d47ad=_0x2546c9;return this['isBattleSys'](_0x1d47ad(0x11f));},BattleManager[_0x2546c9(0x3a2)]=function(){const _0x36ed99=_0x2546c9;return this[_0x36ed99(0x4cc)]();},BattleManager[_0x2546c9(0x5e0)]=function(){return!this['isTurnBased']();},BattleManager['isTeamBased']=function(){const _0xb5a038=_0x2546c9;return!this[_0xb5a038(0x3a2)]()&&!this['isTickBased']();},BattleManager[_0x2546c9(0x133)]=function(_0x195756){const _0x83b815=_0x2546c9;$gameParty[_0x83b815(0x133)](_0x195756),$gameTroop[_0x83b815(0x133)](_0x195756);},VisuMZ['BattleCore'][_0x2546c9(0x572)]=BattleManager[_0x2546c9(0x142)],BattleManager[_0x2546c9(0x142)]=function(){const _0x514fde=_0x2546c9;this[_0x514fde(0x4f6)]=![],this[_0x514fde(0x278)]=ConfigManager['autoBattleAtStart'],this[_0x514fde(0x133)](_0x514fde(0x31f)),VisuMZ[_0x514fde(0x895)][_0x514fde(0x572)]['call'](this),this[_0x514fde(0x133)]('PostStartBattleJS');},BattleManager[_0x2546c9(0x105)]=function(_0x683406){const _0x58b79c=_0x2546c9,_0x253d9d=VisuMZ[_0x58b79c(0x895)]['Settings']['Mechanics'];_0x683406!==_0x58b79c(0xacd)&&_0x253d9d[_0x58b79c(0x255)]&&VisuMZ['BattleCore'][_0x58b79c(0x367)](_0x253d9d[_0x58b79c(0x255)])&&$gameTemp[_0x58b79c(0x93c)](_0x253d9d['BattleEndEvent']);const _0x512db2=_0x58b79c(0x6d1)[_0x58b79c(0xa3e)](_0x683406);_0x253d9d[_0x512db2]&&VisuMZ[_0x58b79c(0x895)][_0x58b79c(0x367)](_0x253d9d[_0x512db2])&&$gameTemp[_0x58b79c(0x93c)](_0x253d9d[_0x512db2]);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x569)]=BattleManager[_0x2546c9(0x827)],BattleManager['checkBattleEnd']=function(){const _0x1b69d3=_0x2546c9;if(this['_phase']===_0x1b69d3(0x850)){if('qLyvN'===_0x1b69d3(0x8c7))this['setBattlerFlip'](![]),this[_0x1b69d3(0x684)]=_0x24ec28,this[_0x1b69d3(0x80e)]=_0xb08548;else{if($gameTemp[_0x1b69d3(0x823)]())return![];}}return VisuMZ[_0x1b69d3(0x895)]['BattleManager_checkBattleEnd'][_0x1b69d3(0x40c)](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x4a5)]=BattleManager[_0x2546c9(0x9c0)],BattleManager[_0x2546c9(0x9c0)]=function(){const _0x1f96c3=_0x2546c9;this[_0x1f96c3(0x133)](_0x1f96c3(0x3ee)),VisuMZ[_0x1f96c3(0x895)][_0x1f96c3(0x4a5)]['call'](this),this[_0x1f96c3(0x105)](_0x1f96c3(0xa2a));},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x523)]=BattleManager['processDefeat'],BattleManager[_0x2546c9(0x956)]=function(){const _0x444186=_0x2546c9;this[_0x444186(0x133)](_0x444186(0x3f5)),VisuMZ[_0x444186(0x895)][_0x444186(0x523)]['call'](this),this[_0x444186(0x105)]('Defeat');},VisuMZ['BattleCore']['BattleManager_endBattle']=BattleManager[_0x2546c9(0xc8)],BattleManager[_0x2546c9(0xc8)]=function(_0x1db908){const _0x49bb86=_0x2546c9;this[_0x49bb86(0x4f6)]=!![],this['_autoBattle']=![],this[_0x49bb86(0x133)](_0x49bb86(0x5b2)),VisuMZ[_0x49bb86(0x895)][_0x49bb86(0xa18)]['call'](this,_0x1db908),this[_0x49bb86(0x133)](_0x49bb86(0x72));},VisuMZ['BattleCore'][_0x2546c9(0x8d7)]=BattleManager[_0x2546c9(0x5ba)],BattleManager[_0x2546c9(0x5ba)]=function(){const _0x19ddca=_0x2546c9;if(this[_0x19ddca(0x3a2)]())this[_0x19ddca(0x133)](_0x19ddca(0x76));VisuMZ['BattleCore'][_0x19ddca(0x8d7)][_0x19ddca(0x40c)](this);if(this['isTurnBased']())this[_0x19ddca(0x133)](_0x19ddca(0xa89));},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x9b)]=BattleManager[_0x2546c9(0xa26)],BattleManager[_0x2546c9(0xa26)]=function(){const _0x1ca032=_0x2546c9,_0x351954=this['_subject'][_0x1ca032(0xab2)](),_0xc9fbd8=this['_subject'];_0x351954&&_0x351954['subject']()===_0xc9fbd8&&_0x351954[_0x1ca032(0x76b)](_0x1ca032(0xab1)),VisuMZ['BattleCore'][_0x1ca032(0x9b)][_0x1ca032(0x40c)](this),_0x351954&&_0x351954[_0x1ca032(0x294)]()===_0xc9fbd8&&_0x351954[_0x1ca032(0x76b)](_0x1ca032(0xea));},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x792)]=BattleManager['endAction'],BattleManager[_0x2546c9(0xb3b)]=function(){const _0x3600ce=_0x2546c9,_0x5134d4=this[_0x3600ce(0x8c0)],_0x19514f=this['_subject'];_0x5134d4&&_0x5134d4!==this[_0x3600ce(0x8f5)]&&_0x5134d4['subject']()===_0x19514f&&_0x5134d4[_0x3600ce(0x76b)](_0x3600ce(0x906));if(this[_0x3600ce(0x41d)]){if(_0x3600ce(0x2e0)===_0x3600ce(0x472)){if(_0x55ccf0[_0x3600ce(0x777)]()){if(this['turnCount']()<=0x0)return;}else{if(_0x709bcd[_0x3600ce(0xa3a)]()<=0x0)return;}}else VisuMZ[_0x3600ce(0x895)]['BattleManager_endAction'][_0x3600ce(0x40c)](this);}else this[_0x3600ce(0x6a3)]='turn';_0x5134d4&&_0x5134d4!==this[_0x3600ce(0x8f5)]&&_0x5134d4[_0x3600ce(0x294)]()===_0x19514f&&_0x5134d4[_0x3600ce(0x76b)](_0x3600ce(0x2de)),this[_0x3600ce(0xaf2)](this[_0x3600ce(0xd3)]()),this[_0x3600ce(0x8f5)]=this['_action'];},BattleManager[_0x2546c9(0xaf2)]=function(_0x47c7da){const _0x36cc22=_0x2546c9;for(const _0x39636a of _0x47c7da){if(!_0x39636a)continue;if(!_0x39636a[_0x36cc22(0x2dc)]())continue;_0x39636a[_0x36cc22(0x2dc)]()[_0x36cc22(0xc5)]();}},BattleManager[_0x2546c9(0x53f)]=function(){const _0x31f047=_0x2546c9;!this[_0x31f047(0x8e5)][_0x31f047(0x303)]()&&this['endAction']();},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x205)]=function(){const _0x114719=_0x2546c9;this[_0x114719(0x7d9)]();if(Imported[_0x114719(0x1c2)]){const _0x448c27=VisuMZ[_0x114719(0x607)]['Settings']['States'];_0x448c27&&_0x448c27[_0x114719(0x8b6)]===![]&&this[_0x114719(0x2a8)](0x1);}else{if(_0x114719(0xf5)!==_0x114719(0xf5)){const _0x468ea4=_0x2a28e7(_0x39ba22['$1'])['split'](/[\r\n]+/)[_0x114719(0x8ad)]('');_0x234be9[_0x114719(0x66e)]=_0x2d3fda[_0x114719(0x4ef)](_0x468ea4);}else this[_0x114719(0x2a8)](0x1);}this[_0x114719(0x7df)]();},BattleManager[_0x2546c9(0x240)]=function(){const _0x29e1eb=_0x2546c9;this[_0x29e1eb(0x4dd)]=VisuMZ[_0x29e1eb(0x895)][_0x29e1eb(0x4b7)][_0x29e1eb(0xafe)][_0x29e1eb(0x4a4)][_0x29e1eb(0x40c)](this);},VisuMZ['BattleCore'][_0x2546c9(0x46e)]=BattleManager[_0x2546c9(0x7af)],BattleManager[_0x2546c9(0x7af)]=function(){const _0x1c4bed=_0x2546c9;this[_0x1c4bed(0x133)](_0x1c4bed(0x889)),BattleManager[_0x1c4bed(0x5a6)][_0x1c4bed(0x7e5)](),VisuMZ['BattleCore'][_0x1c4bed(0x46e)]['call'](this),this[_0x1c4bed(0x105)](_0x1c4bed(0xa8b));},VisuMZ['BattleCore'][_0x2546c9(0x5b5)]=BattleManager[_0x2546c9(0x8a2)],BattleManager[_0x2546c9(0x8a2)]=function(){const _0x34e96a=_0x2546c9;this[_0x34e96a(0x133)](_0x34e96a(0x32e));const _0x1e9e08=this[_0x34e96a(0x4dd)];VisuMZ[_0x34e96a(0x895)][_0x34e96a(0x5b5)]['call'](this),this[_0x34e96a(0x4dd)]=_0x1e9e08+VisuMZ[_0x34e96a(0x895)]['Settings']['Mechanics'][_0x34e96a(0xa20)][_0x34e96a(0x40c)](this),this['processPostBattleCommonEvents'](_0x34e96a(0xacd));},BattleManager[_0x2546c9(0x3b3)]=function(){const _0xd05bda=_0x2546c9;let _0x5038fd=![];if(this['isDisplayEmergedEnemies']())for(const _0x15139d of $gameTroop[_0xd05bda(0xb1f)]()){this[_0xd05bda(0x8e5)]['push'](_0xd05bda(0x9d6),TextManager[_0xd05bda(0x8db)][_0xd05bda(0xa3e)](_0x15139d)),this[_0xd05bda(0x8e5)][_0xd05bda(0x40b)](_0xd05bda(0x532)),_0x5038fd=!![];}if(this[_0xd05bda(0xab6)]){if(_0xd05bda(0x68e)!==_0xd05bda(0x68e)){const _0x1c796f=this[_0xd05bda(0x628)]['indexOf'](this[_0xd05bda(0x611)]);this[_0xd05bda(0x5ef)](_0x1c796f);}else this[_0xd05bda(0x8e5)][_0xd05bda(0x40b)](_0xd05bda(0x9d6),TextManager[_0xd05bda(0xb2a)][_0xd05bda(0xa3e)]($gameParty[_0xd05bda(0x395)]())),this['_logWindow'][_0xd05bda(0x40b)]('wait');}else{if(this[_0xd05bda(0xf8)]){if(_0xd05bda(0x540)===_0xd05bda(0x540))this[_0xd05bda(0x8e5)][_0xd05bda(0x40b)]('addText',TextManager[_0xd05bda(0x65b)][_0xd05bda(0xa3e)]($gameParty[_0xd05bda(0x395)]())),this[_0xd05bda(0x8e5)][_0xd05bda(0x40b)](_0xd05bda(0x532));else{const _0x5c0b43=this[_0xd05bda(0xc6)](),_0x15a1a5=_0x5c0b43[0x0]?_0x5c0b43[0x0][_0xd05bda(0x3ec)]:0x0;return _0x2c176a[_0xd05bda(0x97f)][_0x15a1a5];}}}_0x5038fd&&(this[_0xd05bda(0x8e5)][_0xd05bda(0x40b)](_0xd05bda(0x532)),this['_logWindow'][_0xd05bda(0x40b)](_0xd05bda(0x3b6))),this[_0xd05bda(0x777)]()&&this[_0xd05bda(0x7dc)]()&&(this[_0xd05bda(0x17a)]=![]);},BattleManager[_0x2546c9(0x843)]=function(){const _0x3f0df6=_0x2546c9;if(BattleManager[_0x3f0df6(0x278)])return![];return VisuMZ[_0x3f0df6(0x895)][_0x3f0df6(0x4b7)][_0x3f0df6(0x862)][_0x3f0df6(0x157)];},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x3d3)]=BattleManager[_0x2546c9(0x399)],BattleManager['startInput']=function(){const _0x4e0725=_0x2546c9;VisuMZ[_0x4e0725(0x895)][_0x4e0725(0x3d3)][_0x4e0725(0x40c)](this),this['isDTB']()&&this['isSkipPartyCommandWindow']()&&!this[_0x4e0725(0xf8)]&&$gameParty['canInput']()&&this[_0x4e0725(0x814)]();},BattleManager[_0x2546c9(0x7dc)]=function(){const _0x3507ec=_0x2546c9;return VisuMZ[_0x3507ec(0x895)][_0x3507ec(0x4b7)]['PartyCmd']['SkipPartyCmd'];},BattleManager[_0x2546c9(0xb29)]=function(){const _0x629216=_0x2546c9;this[_0x629216(0x221)]()&&(_0x629216(0x1fc)!==_0x629216(0x92c)?this[_0x629216(0x814)]():this[_0x629216(0x15e)](_0x50a798));},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x775)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x55b)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x55b)]=function(){const _0x1c46a3=_0x2546c9;VisuMZ[_0x1c46a3(0x895)][_0x1c46a3(0x775)][_0x1c46a3(0x40c)](this),BattleManager['isTpb']()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x1c46a3(0x17a)]=![],this[_0x1c46a3(0x760)]());},BattleManager[_0x2546c9(0x65c)]=function(_0x2ca995,_0x52db3d){const _0x4b91f6=_0x2546c9;this['_action']['_reflectionTarget']=_0x52db3d,this[_0x4b91f6(0x8e5)][_0x4b91f6(0x9ae)](_0x52db3d),this[_0x4b91f6(0x8e5)]['displayReflectionPlayBack'](_0x2ca995,this['_action']),this['_action']['apply'](_0x2ca995),this['_logWindow'][_0x4b91f6(0x8cf)](_0x2ca995,_0x2ca995);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xef)]=BattleManager[_0x2546c9(0x84b)],BattleManager['makeActionOrders']=function(){const _0x292dbb=_0x2546c9;VisuMZ[_0x292dbb(0x895)]['BattleManager_makeActionOrders'][_0x292dbb(0x40c)](this),this['_actionBattlers']=this['_actionBattlers']['filter'](_0x56e9fc=>_0x56e9fc&&_0x56e9fc[_0x292dbb(0xab4)]());},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x526)]=BattleManager[_0x2546c9(0xaee)],BattleManager['updatePhase']=function(_0x2c0c0b){const _0x1725e5=_0x2546c9;if(this[_0x1725e5(0x6a3)]===_0x1725e5(0x3cd))_0x1725e5(0x2e2)===_0x1725e5(0x78a)?this[_0x1725e5(0xbd)]():this[_0x1725e5(0x20a)]();else{if(this[_0x1725e5(0x6a3)]===_0x1725e5(0x2f9)){if(_0x1725e5(0x6d6)===_0x1725e5(0x6d6))this[_0x1725e5(0x6ad)]();else{const _0x21c87b=this[_0x1725e5(0x731)][_0x1725e5(0x2c4)];this[_0x1725e5(0x731)][_0x1725e5(0x2a1)](0x0,0x0,_0x21c87b[_0x1725e5(0x9f9)],_0x21c87b['height']);}}else VisuMZ[_0x1725e5(0x895)][_0x1725e5(0x526)][_0x1725e5(0x40c)](this,_0x2c0c0b);}},BattleManager[_0x2546c9(0x283)]=function(){const _0x4c6fd3=_0x2546c9;this['_allTargets']=this[_0x4c6fd3(0xc4)][_0x4c6fd3(0x699)](0x0),this[_0x4c6fd3(0xa43)]=0x0,this[_0x4c6fd3(0x500)]=this[_0x4c6fd3(0xb4)][0x0]||null,this[_0x4c6fd3(0x6a3)]=_0x4c6fd3(0x3cd);},BattleManager['updateCustomActionSequence']=function(){const _0x1dcb80=_0x2546c9;!this[_0x1dcb80(0x972)]()&&!this['_logWindow']['isBusy']()&&(this[_0x1dcb80(0x6a3)]=_0x1dcb80(0xa53));},BattleManager[_0x2546c9(0x2f9)]=function(_0x5425f1){const _0x15f9c3=_0x2546c9;this[_0x15f9c3(0x52c)][_0x15f9c3(0x8ad)](_0x5425f1);if(_0x5425f1===this[_0x15f9c3(0x41d)])return;const _0x367aee=JsonEx[_0x15f9c3(0x785)](_0x5425f1['currentAction']());this[_0x15f9c3(0x817)][_0x15f9c3(0x40b)]([_0x5425f1,_0x367aee]);},BattleManager[_0x2546c9(0x916)]=function(){},BattleManager['updateStart']=function(){const _0x1d6a12=_0x2546c9;if(this[_0x1d6a12(0x777)]())this[_0x1d6a12(0x6a3)]=_0x1d6a12(0x850);else this[_0x1d6a12(0x817)]['length']>0x0?this[_0x1d6a12(0x6a3)]=_0x1d6a12(0x850):this['startInput']();},BattleManager[_0x2546c9(0x91e)]=function(){const _0x250102=_0x2546c9,_0x5cd303=this['_subject'];_0x5cd303&&this[_0x250102(0x777)]()&&_0x5cd303[_0x250102(0x2f5)](_0x250102(0x34c));for(;;){if('qLcWs'!==_0x250102(0x66f)){const _0x397047=this[_0x250102(0x31d)]();if(!_0x397047)return null;if(_0x397047['isBattleMember']()&&_0x397047[_0x250102(0x21f)]())return _0x397047;}else _0x3c095f[_0x250102(0x79f)]['performCounter'][_0x250102(0x40c)](this),this[_0x250102(0x211)]();}},BattleManager['getNextSubjectFromPool']=function(){const _0x8bd39d=_0x2546c9;if(this['_forcedBattlers'][_0x8bd39d(0x4ce)]>0x0){const _0x234230=this[_0x8bd39d(0x817)][_0x8bd39d(0x3b9)](),_0x3d89a4=_0x234230[0x0];return _0x3d89a4[_0x8bd39d(0x829)]=_0x3d89a4['_actions']||[],_0x3d89a4[_0x8bd39d(0x829)][0x0]=_0x234230[0x1],_0x3d89a4;}else{if(_0x8bd39d(0xb1b)!=='EJxIn')return this['_actionBattlers'][_0x8bd39d(0x3b9)]();else{if(_0x5e802f===this['deathStateId']()&&this['isImmortal']())return!![];return _0x58460a['BattleCore'][_0x8bd39d(0x7d0)][_0x8bd39d(0x40c)](this,_0x46a6b9);}}},VisuMZ[_0x2546c9(0x895)]['Game_Battler_forceAction']=Game_Battler['prototype'][_0x2546c9(0x2f9)],Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x2f9)]=function(_0x395d66,_0x1475d3){const _0x308d3e=_0x2546c9;VisuMZ['BattleCore'][_0x308d3e(0x31a)][_0x308d3e(0x40c)](this,_0x395d66,_0x1475d3),this[_0x308d3e(0x829)][this[_0x308d3e(0x829)][_0x308d3e(0x4ce)]-0x1][_0x308d3e(0x1df)]=!![];},Game_Interpreter['prototype'][_0x2546c9(0x507)]=function(_0x3d25b0){const _0x46eba4=_0x2546c9;return this[_0x46eba4(0x735)](_0x3d25b0[0x0],_0x3d25b0[0x1],_0x141e65=>{const _0x313d9f=_0x46eba4;!_0x141e65[_0x313d9f(0xa97)]()&&(_0x141e65[_0x313d9f(0x2f9)](_0x3d25b0[0x2],_0x3d25b0[0x3]),BattleManager[_0x313d9f(0x2f9)](_0x141e65));}),!![];},VisuMZ[_0x2546c9(0x895)]['Game_Battler_makeSpeed']=Game_Battler['prototype']['makeSpeed'],Game_Battler['prototype'][_0x2546c9(0x2d3)]=function(){const _0xaa48eb=_0x2546c9;VisuMZ[_0xaa48eb(0x895)]['Game_Battler_makeSpeed'][_0xaa48eb(0x40c)](this),this['_actions'][_0xaa48eb(0x4ce)]<=0x0&&(this[_0xaa48eb(0x96c)]=Number[_0xaa48eb(0x5c2)]);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xe5)]=BattleManager['selectNextCommand'],BattleManager[_0x2546c9(0x814)]=function(){const _0x256871=_0x2546c9;this[_0x256871(0x777)]()?this[_0x256871(0x3ba)]():VisuMZ[_0x256871(0x895)]['BattleManager_selectNextCommand'][_0x256871(0x40c)](this);},BattleManager['selectNextCommandTpb']=function(){const _0xd496a2=_0x2546c9;if(this[_0xd496a2(0xb07)]){if(this['_currentActor'][_0xd496a2(0x814)]()){if(_0xd496a2(0x3dc)!=='MiShU')_0x1d2ad7['changeCtbCastTime'](_0x37ee95);else return;}this[_0xd496a2(0x94)](),this[_0xd496a2(0x698)](),!this[_0xd496a2(0x41d)]&&!this['_currentActor']&&SceneManager[_0xd496a2(0x465)][_0xd496a2(0x8b9)]();}else!this[_0xd496a2(0x41d)]&&this[_0xd496a2(0x12a)]();},BattleManager['checkTpbInputClose']=function(){const _0x25b6e8=_0x2546c9;if(!this[_0x25b6e8(0x221)]()||this[_0x25b6e8(0x5e4)]()){if(_0x25b6e8(0x738)!==_0x25b6e8(0xae2))this['_tpbSceneChangeCacheActor']&&(!$gameParty['battleMembers']()[_0x25b6e8(0xa7e)](this[_0x25b6e8(0xaab)])&&(this['_tpbSceneChangeCacheActor']=null)),!this[_0x25b6e8(0xaab)]?(this[_0x25b6e8(0x89b)](),this[_0x25b6e8(0xb07)]=null,this['_inputting']=![]):this[_0x25b6e8(0x1c9)]();else{if(this[_0x25b6e8(0x183)][_0x25b6e8(0x26f)]!==_0x2f4219)return this['_cache'][_0x25b6e8(0x26f)];return this['actor']()[_0x25b6e8(0x4c1)][_0x25b6e8(0x1e0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x25b6e8(0x183)]['svAnchorX']=_0xc154b8(_0x52e022['$1']),this[_0x25b6e8(0x183)][_0x25b6e8(0x26f)]=_0x558fe8(_0x1d66b9['$2'])):this[_0x25b6e8(0x183)]['svAnchorY']=_0x2ba51d[_0x25b6e8(0x79f)]['svBattlerAnchorY']['call'](this),this['_cache'][_0x25b6e8(0x26f)];}}},BattleManager[_0x2546c9(0x1c9)]=function(){const _0xec20de=_0x2546c9;if(!$gameParty[_0xec20de(0xb15)]()[_0xec20de(0xa7e)](this[_0xec20de(0xaab)])){if('dCBKi'===_0xec20de(0xb7)){_0x4cc318=_0x22cbd3||'',_0x1993be=_0xd2a3b4||'';_0x2df583===''&&_0x5c52a6===''&&(_0xee0ae3=this[_0xec20de(0x854)]['battleback1Name'](),_0x2795df=this[_0xec20de(0xaf1)][_0xec20de(0x124)]());const _0x163b0d=_0x55d579[_0xec20de(0x3c8)](_0x347414),_0xc947dd=_0xbbe424['loadBattleback2'](_0x21af6d);_0x163b0d[_0xec20de(0x67)](this[_0xec20de(0xb12)][_0xec20de(0x768)](this,this[_0xec20de(0x854)],this[_0xec20de(0xaf1)],_0x163b0d,_0xc947dd));}else this[_0xec20de(0xaab)]=null;}this['_tpbSceneChangeCacheActor']?(this[_0xec20de(0xb07)]=this[_0xec20de(0xaab)],this[_0xec20de(0xb07)]['_tpbState']='charged',this[_0xec20de(0x637)]=!![],this['_tpbSceneChangeCacheActor']=null):(this[_0xec20de(0x89b)](),this['_currentActor']=null,this[_0xec20de(0x637)]=![]);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x28a)]=BattleManager['isTpbMainPhase'],BattleManager[_0x2546c9(0x9d0)]=function(){const _0x103146=_0x2546c9;return this['_phase']===_0x103146(0x3cd)?this[_0x103146(0x3ac)]():VisuMZ[_0x103146(0x895)][_0x103146(0x28a)][_0x103146(0x40c)](this);},BattleManager[_0x2546c9(0x3ac)]=function(){const _0xe3eb3b=_0x2546c9;return this[_0xe3eb3b(0x822)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x2c2)]=BattleManager[_0x2546c9(0x89b)],BattleManager[_0x2546c9(0x89b)]=function(){const _0x5cc163=_0x2546c9;this['isTpb']()&&this['_phase']===_0x5cc163(0x358)&&(this[_0x5cc163(0xb07)]=null),VisuMZ[_0x5cc163(0x895)]['BattleManager_cancelActorInput'][_0x5cc163(0x40c)](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x57d)]=BattleManager[_0x2546c9(0x7cd)],BattleManager[_0x2546c9(0x7cd)]=function(){const _0x45fd4c=_0x2546c9,_0x395f54=this[_0x45fd4c(0xb07)];if(_0x395f54&&!_0x395f54[_0x45fd4c(0x7cd)]()){const _0xac1dfa=_0x395f54[_0x45fd4c(0x524)];_0x395f54[_0x45fd4c(0x829)][_0xac1dfa]=new Game_Action(_0x395f54);}return VisuMZ['BattleCore'][_0x45fd4c(0x57d)]['call'](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x7de)]=BattleManager[_0x2546c9(0x5d4)],BattleManager[_0x2546c9(0x5d4)]=function(_0x1d28e0){const _0x4f5661=_0x2546c9;if(this[_0x4f5661(0x8c0)][_0x4f5661(0x381)]())return![];return VisuMZ[_0x4f5661(0x895)]['BattleManager_checkSubstitute'][_0x4f5661(0x40c)](this,_0x1d28e0);},SceneManager[_0x2546c9(0x671)]=function(){const _0x2f9893=_0x2546c9;return this[_0x2f9893(0x465)]&&this['_scene'][_0x2f9893(0x150)]===Scene_Battle;},SceneManager[_0x2546c9(0x6ff)]=function(){const _0x23dd21=_0x2546c9;return Spriteset_Battle[_0x23dd21(0x79f)]['isFlipped']();},SceneManager[_0x2546c9(0x317)]=function(){const _0x5d6e61=_0x2546c9;if(SceneManager[_0x5d6e61(0x251)](Scene_Options))return!![];return![];},SceneManager[_0x2546c9(0x902)]=function(){const _0x8a74d1=_0x2546c9;if(SceneManager[_0x8a74d1(0x6dc)](Scene_Options))return!![];return![];},SceneManager[_0x2546c9(0xaa5)]=function(_0x44c359){const _0x1367f3=_0x2546c9;if(!SceneManager[_0x1367f3(0x671)]())return!![];const _0x487691=[_0x1367f3(0x7ab),_0x1367f3(0xaa6)];return _0x487691[_0x1367f3(0xa7e)](_0x44c359[_0x1367f3(0x395)]);},VisuMZ[_0x2546c9(0x895)]['SceneManager_push']=SceneManager[_0x2546c9(0x40b)],SceneManager[_0x2546c9(0x40b)]=function(_0x25cfde){const _0x56ca95=_0x2546c9;if(!SceneManager[_0x56ca95(0xaa5)](_0x25cfde)){if(_0x56ca95(0x550)!==_0x56ca95(0x550)){if(this[_0x56ca95(0x183)]['softDamageCap']!==_0x3434e4)return this[_0x56ca95(0x183)]['softDamageCap'];let _0x2c7853=_0x1fc6dd[_0x56ca95(0x895)][_0x56ca95(0x4b7)][_0x56ca95(0x2f3)][_0x56ca95(0x7e4)];const _0x5d5cfb=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x1195b5=this[_0x56ca95(0x6b1)]()[_0x56ca95(0x1b0)](_0x591f3f=>_0x591f3f&&_0x591f3f[_0x56ca95(0x4c1)][_0x56ca95(0x1e0)](_0x5d5cfb)?_0x55ab4b(_0x3b0d90['$1'])/0x64:0x0);return _0x2c7853=_0x1195b5[_0x56ca95(0x4e3)]((_0x4fbbe9,_0x44e5ed)=>_0x4fbbe9+_0x44e5ed,_0x2c7853),this['_cache'][_0x56ca95(0x3cc)]=_0x2c7853,this[_0x56ca95(0x183)][_0x56ca95(0x3cc)][_0x56ca95(0x60b)](0.01,0x1);}else return this['displayBattleCoreTransitionErrorMsg'](_0x25cfde);}VisuMZ[_0x56ca95(0x895)][_0x56ca95(0x51d)]['call'](this,_0x25cfde);},SceneManager[_0x2546c9(0x154)]=function(_0xfa849f){const _0x1cf3af=_0x2546c9;if(!$gameTemp[_0x1cf3af(0x68c)]())return;if(this[_0x1cf3af(0xa02)])return;this[_0x1cf3af(0xa02)]=!![];let _0x3460cf='';_0x3460cf+=_0x1cf3af(0x249),_0x3460cf+='\x20to\x20%1\x20midbattle.'[_0x1cf3af(0xa3e)](_0xfa849f[_0x1cf3af(0x395)]),alert(_0x3460cf);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8dd)]=Game_Temp[_0x2546c9(0x79f)][_0x2546c9(0x6c6)],Game_Temp['prototype'][_0x2546c9(0x6c6)]=function(_0x58879b,_0x4121e9,_0x57064b){const _0x22a22b=_0x2546c9;_0x58879b=_0x58879b['filter']((_0x10b739,_0xdcc34,_0x585070)=>_0x585070['indexOf'](_0x10b739)===_0xdcc34);SceneManager[_0x22a22b(0x671)]()&&SceneManager['isBattleFlipped']()&&(_0x57064b=!_0x57064b);VisuMZ[_0x22a22b(0x895)][_0x22a22b(0x8dd)][_0x22a22b(0x40c)](this,_0x58879b,_0x4121e9,_0x57064b);if(SceneManager[_0x22a22b(0x671)]()){if('kOMTU'!==_0x22a22b(0x6ba))BattleManager[_0x22a22b(0x5a6)][_0x22a22b(0xb24)]();else{const _0x2802ee=_0x3323fd[_0x309169];_0x2802ee&&_0xec701c[_0x22a22b(0x93c)](_0x393ae0);}}},Game_Temp['prototype'][_0x2546c9(0x93b)]=function(_0x2a71bd){this['_lastPluginCommandInterpreter']=_0x2a71bd;},Game_Temp['prototype'][_0x2546c9(0x3fb)]=function(){const _0x491952=_0x2546c9;return this[_0x491952(0x798)];},Game_Temp['prototype'][_0x2546c9(0xd6)]=function(){const _0x472028=_0x2546c9;this[_0x472028(0x426)]=undefined;},Game_Temp['prototype'][_0x2546c9(0x375)]=function(_0x785f39){const _0x1770c3=_0x2546c9;$gameMap&&$dataMap&&$dataMap[_0x1770c3(0x4c1)]&&(_0x1770c3(0x9fe)!==_0x1770c3(0x627)?this[_0x1770c3(0x33d)]($dataMap['note']):this[_0x1770c3(0x4c3)](...arguments));const _0x5d27a2=$dataTroops[_0x785f39];if(_0x5d27a2){if(_0x1770c3(0x4ac)===_0x1770c3(0x866)){_0x239871[_0x1770c3(0x79f)][_0x1770c3(0x907)]['call'](this);const _0x17ffad=this[_0x1770c3(0x2f0)][_0x1770c3(0xac9)]();this[_0x1770c3(0x85a)]!==_0x17ffad&&(this[_0x1770c3(0x85a)]=_0x17ffad,this['_mainSprite'][_0x1770c3(0x2c4)]=_0x432a20['loadSvActor'](_0x17ffad)),this[_0x1770c3(0x53a)]&&this['_mainSprite'][_0x1770c3(0x2c4)]&&this['_battler']&&(this[_0x1770c3(0x53a)][_0x1770c3(0x2c4)]['smooth']!==this[_0x1770c3(0xe2)]['battlerSmoothImage']()&&(this['_mainSprite']['bitmap'][_0x1770c3(0xac1)]=this[_0x1770c3(0xe2)][_0x1770c3(0x4bb)]()));}else{let _0x42209b=DataManager[_0x1770c3(0x32a)](_0x5d27a2['id']);this[_0x1770c3(0x33d)](_0x42209b);}}},Game_Temp[_0x2546c9(0x79f)][_0x2546c9(0x33d)]=function(_0x309d0e){const _0x4ad875=_0x2546c9;if(!_0x309d0e)return;if(_0x309d0e['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x5e4ac6=String(RegExp['$1']);if(_0x5e4ac6[_0x4ad875(0x1e0)](/DEFAULT/i))this[_0x4ad875(0x426)]=_0x4ad875(0x304);else{if(_0x5e4ac6[_0x4ad875(0x1e0)](/LIST/i)){if(_0x4ad875(0x233)==='guJIG')this[_0x4ad875(0x426)]='list';else return!![];}else{if(_0x5e4ac6[_0x4ad875(0x1e0)](/XP/i))this[_0x4ad875(0x426)]='xp';else{if(_0x5e4ac6[_0x4ad875(0x1e0)](/PORTRAIT/i))this[_0x4ad875(0x426)]='portrait';else{if(_0x5e4ac6['match'](/BORDER/i)){if(_0x4ad875(0xa39)!==_0x4ad875(0x1a1))this[_0x4ad875(0x426)]=_0x4ad875(0x60d);else{const _0x383661=this[_0x4ad875(0x68d)](_0x35f0cc),_0x4341d2=new(_0x383661?_0x139af8:_0x4cc861)(),_0x438899=this[_0x4ad875(0x708)](_0x5c3365);this[_0x4ad875(0xb50)](_0x3ac6e3[0x0])&&(_0x1d2584=!_0x39dcf7),_0x4341d2[_0x4ad875(0x90c)]=_0x14f8a2,_0x4341d2[_0x4ad875(0x47e)](_0x438899,_0x29bcf7,_0x45076a,_0x54f748),this['addAnimationSpriteToContainer'](_0x4341d2);}}else _0x5e4ac6[_0x4ad875(0x1e0)](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&('HxAfn'===_0x4ad875(0x2e3)?Imported[_0x4ad875(0x2b5)]?this[_0x4ad875(0x426)]='sideview_ui':this[_0x4ad875(0x426)]=_0x4ad875(0x304):(this[_0x4ad875(0x80c)]=!![],_0xe32b6b[_0x4ad875(0x93c)](_0xd555eb['BattleStartEvent']),_0x4ec8dd[_0x4ad875(0x8f6)](),_0x418565['_interpreter']['_preBattleCommonEvent']=!![]));}}}}}},VisuMZ['BattleCore'][_0x2546c9(0x419)]=Game_System[_0x2546c9(0x79f)]['initialize'],Game_System['prototype']['initialize']=function(){const _0x44dcb5=_0x2546c9;VisuMZ[_0x44dcb5(0x895)][_0x44dcb5(0x419)][_0x44dcb5(0x40c)](this),this[_0x44dcb5(0x400)]();},Game_System[_0x2546c9(0x79f)]['initBattleCore']=function(){this['_defeatedEnemies']=this['_defeatedEnemies']||[];},Game_System['prototype'][_0x2546c9(0x4a0)]=function(){const _0x54c4d8=_0x2546c9;if(this[_0x54c4d8(0x596)]===undefined)this[_0x54c4d8(0x400)]();return this[_0x54c4d8(0x596)];},Game_System[_0x2546c9(0x79f)][_0x2546c9(0x343)]=function(_0x39df1e){const _0x4417df=_0x2546c9;if(this[_0x4417df(0x596)]===undefined)this[_0x4417df(0x400)]();if(!_0x39df1e)return;if(this['_defeatedEnemies'][_0x4417df(0xa7e)](_0x39df1e))return;this[_0x4417df(0x596)][_0x4417df(0x40b)](_0x39df1e),this[_0x4417df(0x596)][_0x4417df(0xa58)]((_0x507aa4,_0x838b21)=>_0x507aa4-_0x838b21);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x759)]=Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x184)],Game_BattlerBase[_0x2546c9(0x79f)]['addNewState']=function(_0x4eddb6){const _0x2348bd=_0x2546c9,_0x2400f7=this[_0x2348bd(0x21f)](),_0x48dad1=this[_0x2348bd(0xb22)]();VisuMZ['BattleCore'][_0x2348bd(0x759)]['call'](this,_0x4eddb6);if(this[_0x2348bd(0x2e4)]()&&_0x2400f7&&this[_0x2348bd(0x4ca)]()){if('sLSpY'!=='sLSpY')return 0x24;else this['_visualHpGauge_JustDied']=!this[_0x2348bd(0x893)](),$gameSystem[_0x2348bd(0x343)](this[_0x2348bd(0x8af)]());}SceneManager[_0x2348bd(0x671)]()&&_0x48dad1!==this['stateMotionIndex']()&&(this[_0x2348bd(0x2dc)]()&&this[_0x2348bd(0x2dc)]()[_0x2348bd(0xc5)]());},Game_Enemy[_0x2546c9(0x79f)]['hasBeenDefeatedBefore']=function(){const _0x547698=_0x2546c9;return $gameSystem[_0x547698(0x4a0)]()[_0x547698(0xa7e)](this[_0x547698(0x379)]);},VisuMZ['BattleCore'][_0x2546c9(0xb2f)]=Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0xa85)],Game_BattlerBase['prototype'][_0x2546c9(0xa85)]=function(_0x2711be){const _0x2c0ee1=_0x2546c9;VisuMZ[_0x2c0ee1(0x895)]['Game_BattlerBase_eraseState']['call'](this,_0x2711be);if(this['isEnemy']()&&_0x2711be===this[_0x2c0ee1(0x91)]()&&this[_0x2c0ee1(0x21f)]()){if(_0x2c0ee1(0x6f3)!==_0x2c0ee1(0x6f3))return'iconText';else this['_visualHpGauge_JustDied']=![];}!this[_0x2c0ee1(0x460)]&&!this['_tempBattler']&&SceneManager[_0x2c0ee1(0x671)]()&&this[_0x2c0ee1(0x32f)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x5a1)]=Game_Action[_0x2546c9(0x79f)]['clear'],Game_Action['prototype'][_0x2546c9(0x3b6)]=function(){const _0x4f0587=_0x2546c9;VisuMZ['BattleCore'][_0x4f0587(0x5a1)][_0x4f0587(0x40c)](this),this[_0x4f0587(0x809)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x4f0587(0x14b)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x4f0587(0xe3)]=_0x4f0587(0x304);},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0xa9f)]=function(_0xa69469,_0x281b89){const _0x504afe=_0x2546c9;return VisuMZ[_0x504afe(0x895)]['Settings'][_0x504afe(0x2f3)]['OverallFormulaJS'][_0x504afe(0x40c)](this,_0xa69469,_0x281b89);},Game_Action['prototype']['applyVariance']=function(_0x5d6818,_0x536f99){const _0x28b3e4=_0x2546c9;return VisuMZ[_0x28b3e4(0x895)][_0x28b3e4(0x4b7)]['Damage']['VarianceFormulaJS'][_0x28b3e4(0x40c)](this,_0x5d6818,_0x536f99);},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x322)]=function(_0x21a5fc,_0x5eff22){const _0x1f3e75=_0x2546c9;return VisuMZ['BattleCore'][_0x1f3e75(0x4b7)][_0x1f3e75(0x2f3)][_0x1f3e75(0x8cd)]['call'](this,_0x21a5fc,_0x5eff22);},VisuMZ['BattleCore']['Game_Action_itemHit']=Game_Action['prototype']['itemHit'],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x8f3)]=function(_0x2c83c3){const _0x12cdf0=_0x2546c9,_0x2e2cf8=this['item']()[_0x12cdf0(0x4c1)];if(_0x2e2cf8[_0x12cdf0(0x1e0)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x2e2cf8[_0x12cdf0(0x1e0)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if('Gqikg'!==_0x12cdf0(0x894)){const _0x3e14d7='\x5cI[%1]%2';let _0x5973c3=_0x5d925a['iconIndex'],_0x48ec3f=_0x125191[_0x12cdf0(0x395)];const _0x2195ae=_0x3e861e[_0x12cdf0(0x4c1)];return _0x2195ae[_0x12cdf0(0x1e0)](/<DISPLAY ICON: (\d+)>/i)&&(_0x5973c3=_0x55e02f(_0x4df7ac['$1'])),_0x2195ae[_0x12cdf0(0x1e0)](/<DISPLAY TEXT: (.*)>/i)&&(_0x48ec3f=_0x35caa6(_0x140f83['$1'])),_0x3e14d7[_0x12cdf0(0xa3e)](_0x5973c3,_0x48ec3f);}else return Number(RegExp['$1'])/0x64;}else{if(_0x12cdf0(0x411)===_0x12cdf0(0x411)){let _0x4d5bbd=VisuMZ[_0x12cdf0(0x895)][_0x12cdf0(0x339)][_0x12cdf0(0x40c)](this,_0x2c83c3);return _0x4d5bbd=this[_0x12cdf0(0x14b)][_0x12cdf0(0x42d)]*_0x4d5bbd+this['_multipliers'][_0x12cdf0(0x873)],_0x4d5bbd;}else{const _0x2ff130=_0x3da471[this[_0x12cdf0(0x2f0)][_0x12cdf0(0xa45)]()];if(!_0x2ff130)return;if(!this[_0x12cdf0(0x6ef)](_0x2ff130))return;const _0x4de58c=this[_0x12cdf0(0x952)](),_0x13d14b=_0x4615f5[_0x12cdf0(0x82e)](_0x2ff130),_0x385321=_0x2fd812[_0x12cdf0(0x8f9)](_0x2ff130),_0x3fd5b9=_0x4de58c===_0x12cdf0(0x388)?_0x13d14b:_0x12cdf0(0x378)['format'](_0x385321,_0x13d14b);this[_0x12cdf0(0x9ee)](_0x3fd5b9,'guard',this[_0x12cdf0(0x2f0)][_0x12cdf0(0xaf9)]());}}}},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x3eb)]=function(_0x364003){const _0xf02426=_0x2546c9;if(!this['item']()[_0xf02426(0x471)]['critical'])return 0x0;let _0x59dee5=VisuMZ[_0xf02426(0x895)]['Settings']['Damage'][_0xf02426(0x5f5)]['call'](this,_0x364003);return _0x59dee5=this[_0xf02426(0x14b)][_0xf02426(0xb4c)]*_0x59dee5+this[_0xf02426(0x14b)][_0xf02426(0x152)],_0x59dee5;},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x887)]=function(_0x56f87e){const _0x36f574=_0x2546c9;return _0x56f87e=VisuMZ[_0x36f574(0x895)]['Settings'][_0x36f574(0x2f3)]['CriticalHitMultiplier'][_0x36f574(0x40c)](this,_0x56f87e),_0x56f87e=this[_0x36f574(0x14b)]['criticalDmgRate']*_0x56f87e+this[_0x36f574(0x14b)][_0x36f574(0x721)],_0x56f87e;},VisuMZ['BattleCore']['Game_Action_evalDamageFormula']=Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x861)],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x861)]=function(_0x1ad729){const _0x31c987=_0x2546c9;if(this['_customDamageFormula']!=='default')return this[_0x31c987(0xa3b)](_0x1ad729);else{if(DataManager[_0x31c987(0x840)](this[_0x31c987(0x1ff)]())==='MANUAL'){if('jkPBh'!==_0x31c987(0x4c2)){const _0x1844f0=this[_0x31c987(0x425)]()[_0x31c987(0x3ec)]||0x0,_0x53932f=_0x5b86bf[_0x31c987(0x97f)][_0x1844f0];_0x53932f&&this[_0x31c987(0x9e8)](_0x53932f[_0x31c987(0xad7)]);}else return VisuMZ['BattleCore'][_0x31c987(0x90a)][_0x31c987(0x40c)](this,_0x1ad729);}else return this[_0x31c987(0x312)](_0x1ad729);}},Game_Action['prototype']['setCustomDamageFormula']=function(_0x3fa32d){const _0xe8cc0f=_0x2546c9;this[_0xe8cc0f(0xe3)]=_0x3fa32d;},Game_Action[_0x2546c9(0x79f)]['customDamageFormula']=function(_0x31d008){const _0x11891d=_0x2546c9,_0x4512aa=this[_0x11891d(0x1ff)](),_0x193cb3=_0x4512aa[_0x11891d(0x471)][_0x11891d(0x250)];_0x4512aa['damage'][_0x11891d(0x250)]=this['_customDamageFormula'];let _0x2ef81a=VisuMZ[_0x11891d(0x895)][_0x11891d(0x90a)][_0x11891d(0x40c)](this,_0x31d008);return _0x4512aa[_0x11891d(0x471)][_0x11891d(0x250)]=_0x193cb3,_0x2ef81a;},Game_Action['prototype'][_0x2546c9(0x1a9)]=function(){const _0x3db0f7=_0x2546c9;if(this['item']()[_0x3db0f7(0x4c1)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1106a4=String(RegExp['$1'])[_0x3db0f7(0x13e)]()[_0x3db0f7(0xb19)]();return _0x1106a4;}return _0x3db0f7(0x511);},Game_Action['prototype'][_0x2546c9(0x312)]=function(_0x484fd4){const _0x516741=_0x2546c9,_0x17d9ce=DataManager[_0x516741(0x840)](this['item']()),_0x2aa815=VisuMZ[_0x516741(0x3e3)][_0x17d9ce];try{if(_0x516741(0x57a)===_0x516741(0x57a))return _0x2aa815[_0x516741(0xa12)][_0x516741(0x40c)](this,_0x484fd4);else{this['updateScale'](),this[_0x516741(0x336)](),this['updateSpin'](),this[_0x516741(0x8be)](),_0x32fdf4[_0x516741(0x895)]['Sprite_Battler_updateMain']['call'](this),this['updateHpGaugePosition']();if(this[_0x516741(0x150)]===_0x5a7a53)this[_0x516741(0x135)]();}}catch(_0xb73d0){if(_0x516741(0x73a)===_0x516741(0x200))return this[_0x516741(0x870)](_0x59b9d8);else{if($gameTemp[_0x516741(0x68c)]())console[_0x516741(0x37d)](_0xb73d0);return VisuMZ['BattleCore']['Game_Action_evalDamageFormula'][_0x516741(0x40c)](this);}}},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x3e4)]=function(_0x1804a0,_0x3051ac){const _0x26d5b8=_0x2546c9;if(this[_0x26d5b8(0x194)]())return _0x3051ac;const _0x2a1f3b=this[_0x26d5b8(0x294)](),_0x5001a6=_0x1804a0;let _0x23feb3=[],_0xb4482c=[];_0x23feb3[_0x26d5b8(0x40b)](this['_armorPenetration'][_0x26d5b8(0x8ea)],this['_armorPenetration'][_0x26d5b8(0x72f)]),_0xb4482c[_0x26d5b8(0x40b)](this[_0x26d5b8(0x809)]['arPenRate'],this[_0x26d5b8(0x809)][_0x26d5b8(0xad0)]);const _0x514467=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5dcef3=this[_0x26d5b8(0x7a8)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x5d55ea=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x354d86=this[_0x26d5b8(0x7a8)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x23feb3=_0x23feb3[_0x26d5b8(0x1ee)](_0x5001a6['traitObjects']()['map'](_0x363673=>_0x363673&&_0x363673[_0x26d5b8(0x4c1)]['match'](_0x514467)?Number(RegExp['$1']):0x0)),_0xb4482c=_0xb4482c[_0x26d5b8(0x1ee)](_0x5001a6[_0x26d5b8(0x6b1)]()['map'](_0x98373b=>_0x98373b&&_0x98373b['note'][_0x26d5b8(0x1e0)](_0x5dcef3)?Number(RegExp['$1'])/0x64:0x0)),_0x23feb3=_0x23feb3['concat'](_0x2a1f3b['traitObjects']()[_0x26d5b8(0x1b0)](_0x42f6b8=>_0x42f6b8&&_0x42f6b8['note'][_0x26d5b8(0x1e0)](_0x5d55ea)?Number(RegExp['$1']):0x0)),_0xb4482c=_0xb4482c[_0x26d5b8(0x1ee)](_0x2a1f3b[_0x26d5b8(0x6b1)]()['map'](_0x98d12=>_0x98d12&&_0x98d12[_0x26d5b8(0x4c1)][_0x26d5b8(0x1e0)](_0x354d86)?Number(RegExp['$1'])/0x64:0x0));this['item']()[_0x26d5b8(0x4c1)][_0x26d5b8(0x1e0)](_0x5d55ea)&&_0x23feb3[_0x26d5b8(0x40b)](Number(RegExp['$1']));if(this[_0x26d5b8(0x1ff)]()[_0x26d5b8(0x4c1)][_0x26d5b8(0x1e0)](_0x354d86)){if(_0x26d5b8(0x146)!=='lHlYk'){if(this['hasSvBattler']()){if(this['collapseType']()>=0x1)return!![];return this[_0x26d5b8(0x425)]()[_0x26d5b8(0x2e7)];}else return!![];}else _0xb4482c[_0x26d5b8(0x40b)](Number(RegExp['$1']));}return _0x3051ac=_0x23feb3[_0x26d5b8(0x4e3)]((_0x200daf,_0xd8a0f2)=>_0x200daf-_0xd8a0f2,_0x3051ac),_0x3051ac>0x0&&(_0x3051ac=_0xb4482c[_0x26d5b8(0x4e3)]((_0x14361,_0x3ea08c)=>_0x14361*(0x1-_0x3ea08c),_0x3051ac)),_0x3051ac;},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x7ad)]=Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x431)],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x431)]=function(_0x18912e,_0x13bab7){const _0x320950=_0x2546c9;_0x13bab7=_0x13bab7*this[_0x320950(0x14b)][_0x320950(0x417)],_0x13bab7+=this['_multipliers']['damageFlat']*(_0x13bab7>=0x0?0x1:-0x1),_0x13bab7=this[_0x320950(0x130)]('PreDamage%1JS',_0x18912e,_0x13bab7,![]),_0x13bab7=this[_0x320950(0x54e)](_0x13bab7),_0x13bab7=Math[_0x320950(0x19b)](_0x13bab7),this['_executedValue']=_0x13bab7,this[_0x320950(0x659)]=this['_totalValue']||0x0,this[_0x320950(0x659)]+=_0x13bab7,VisuMZ[_0x320950(0x895)]['Game_Action_executeDamage']['call'](this,_0x18912e,_0x13bab7),this[_0x320950(0x130)]('PostDamage%1JS',_0x18912e,_0x13bab7,!![]);},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x54e)]=function(_0x5c74f5){const _0x2d845e=_0x2546c9;if(this[_0x2d845e(0x72a)]())return _0x5c74f5;return _0x5c74f5=this[_0x2d845e(0x368)](_0x5c74f5),_0x5c74f5=this[_0x2d845e(0x89f)](_0x5c74f5),_0x5c74f5;},Game_Action['prototype'][_0x2546c9(0x72a)]=function(){const _0x16f070=_0x2546c9,_0x26898a=/<BYPASS DAMAGE CAP>/i;if(this[_0x16f070(0x1ff)]()[_0x16f070(0x4c1)]['match'](_0x26898a))return!![];if(this[_0x16f070(0x294)]()[_0x16f070(0x6b1)]()[_0x16f070(0x335)](_0x1f578d=>_0x1f578d&&_0x1f578d['note'][_0x16f070(0x1e0)](_0x26898a)))return!![];return!VisuMZ[_0x16f070(0x895)][_0x16f070(0x4b7)][_0x16f070(0x2f3)]['EnableDamageCap'];},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x368)]=function(_0x3cd4f2){const _0x5b55cd=_0x2546c9;if(!VisuMZ[_0x5b55cd(0x895)][_0x5b55cd(0x4b7)]['Damage'][_0x5b55cd(0xa4d)])return _0x3cd4f2;const _0x5ac9ae=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x5b55cd(0x4c1)][_0x5b55cd(0x1e0)](_0x5ac9ae))return _0x3cd4f2;if(this[_0x5b55cd(0x294)]()[_0x5b55cd(0x6b1)]()['some'](_0x40d31e=>_0x40d31e&&_0x40d31e[_0x5b55cd(0x4c1)][_0x5b55cd(0x1e0)](_0x5ac9ae)))return _0x3cd4f2;const _0x3d6e3f=_0x3cd4f2<0x0?-0x1:0x1;_0x3cd4f2=Math[_0x5b55cd(0x9d2)](_0x3cd4f2);let _0x1b4156=this[_0x5b55cd(0x294)]()[_0x5b55cd(0x80b)]();this[_0x5b55cd(0x1ff)]()[_0x5b55cd(0x4c1)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x1b4156+=Number(RegExp['$1'])/0x64);_0x1b4156=_0x1b4156[_0x5b55cd(0x60b)](0.01,0x1);const _0x5b6a48=this[_0x5b55cd(0x1ce)](),_0x1e567d=_0x1b4156*_0x5b6a48;if(_0x3cd4f2>_0x1e567d&&_0x5b6a48>_0x1e567d){_0x3cd4f2-=_0x1e567d;const _0x4d824b=VisuMZ['BattleCore'][_0x5b55cd(0x4b7)][_0x5b55cd(0x2f3)][_0x5b55cd(0x42e)],_0xbd5bba=Math[_0x5b55cd(0x556)](0x1-_0x3cd4f2/((_0x5b6a48-_0x1e567d)*_0x4d824b+_0x3cd4f2),0.01);_0x3cd4f2*=_0xbd5bba,_0x3cd4f2+=_0x1e567d;}return _0x3cd4f2*_0x3d6e3f;},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x1ce)]=function(){const _0xe1243=_0x2546c9;return this[_0xe1243(0x1ff)]()[_0xe1243(0x4c1)][_0xe1243(0x1e0)](/<DAMAGE CAP:[ ](\d+)>/i)?_0xe1243(0x4a1)===_0xe1243(0x1f8)?this['isActor']&&this[_0xe1243(0x55e)]()?_0x2ba369[_0xe1243(0x895)][_0xe1243(0x4b7)]['Actor']['Shadow']:_0xeacb2f[_0xe1243(0x895)]['Settings'][_0xe1243(0x862)][_0xe1243(0x32c)]:Number(RegExp['$1']):this[_0xe1243(0x294)]()[_0xe1243(0xac0)]();},Game_Action['prototype'][_0x2546c9(0x89f)]=function(_0x1d94e2){const _0x3ce747=_0x2546c9;console['log'](_0x1d94e2);let _0x16517a=this['getHardDamageCap']();return _0x1d94e2[_0x3ce747(0x60b)](-_0x16517a,_0x16517a);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x4b2)]=Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x997)],Game_Action['prototype'][_0x2546c9(0x997)]=function(_0x2b2f2d){const _0x1b6701=_0x2546c9;this[_0x1b6701(0x130)]('PreApply%1JS',_0x2b2f2d,0x0,!![]),VisuMZ[_0x1b6701(0x895)][_0x1b6701(0x4b2)][_0x1b6701(0x40c)](this,_0x2b2f2d),this[_0x1b6701(0x130)](_0x1b6701(0x8b7),_0x2b2f2d,this['_executedValue']||0x0,!![]),this[_0x1b6701(0x19a)](_0x2b2f2d);},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x130)]=function(_0x2219fe,_0x2fa01c,_0x338069,_0x2b4878){const _0x402a7a=_0x2546c9;if(this['_tempBattler']||this['_tempActor'])return;_0x338069=_0x338069||0x0;const _0x15e308=_0x338069,_0xc31d36=VisuMZ['BattleCore'][_0x402a7a(0x4b7)]['Mechanics'],_0x52b885=_0x2219fe['format']('');if(_0xc31d36[_0x52b885]){_0x338069=_0xc31d36[_0x52b885][_0x402a7a(0x40c)](this,_0x338069,_0x2fa01c);if(_0x2b4878)_0x338069=_0x15e308;}let _0x25f904=VisuMZ[_0x402a7a(0x895)]['createKeyJS'](this['item'](),_0x2219fe[_0x402a7a(0xa3e)](''));if(VisuMZ[_0x402a7a(0x895)]['JS'][_0x25f904]){_0x338069=VisuMZ['BattleCore']['JS'][_0x25f904][_0x402a7a(0x40c)](this,this['subject'](),_0x2fa01c,this[_0x402a7a(0x1ff)](),_0x338069);if(_0x2b4878)_0x338069=_0x15e308;}for(const _0x26ade5 of this['subject']()['traitObjects']()){if(_0x402a7a(0x7a)===_0x402a7a(0xa37))_0x197784[_0x119570]['call'](this,_0x2ce31e);else{if(!_0x26ade5)continue;_0x25f904=VisuMZ[_0x402a7a(0x895)]['createKeyJS'](_0x26ade5,_0x2219fe['format'](_0x402a7a(0x75f)));if(VisuMZ[_0x402a7a(0x895)]['JS'][_0x25f904]){_0x338069=VisuMZ[_0x402a7a(0x895)]['JS'][_0x25f904][_0x402a7a(0x40c)](this,this[_0x402a7a(0x294)](),_0x2fa01c,_0x26ade5,_0x338069);if(_0x2b4878)_0x338069=_0x15e308;}}}for(const _0x4c9bab of _0x2fa01c[_0x402a7a(0x6b1)]()){if(_0x402a7a(0x621)==='rCRRb'){if(!_0x4c9bab)continue;_0x25f904=VisuMZ[_0x402a7a(0x895)]['createKeyJS'](_0x4c9bab,_0x2219fe['format'](_0x402a7a(0x7ee)));if(VisuMZ['BattleCore']['JS'][_0x25f904]){_0x338069=VisuMZ['BattleCore']['JS'][_0x25f904][_0x402a7a(0x40c)](this,this[_0x402a7a(0x294)](),_0x2fa01c,_0x4c9bab,_0x338069);if(_0x2b4878)_0x338069=_0x15e308;}}else this[_0x402a7a(0x40b)](_0x402a7a(0x9d6),_0x402a7a(0xa08)[_0x402a7a(0xa3e)](_0x546340[_0x402a7a(0x509)](_0x56867)));}return _0x338069;},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x76b)]=function(_0x4c1fdf){const _0x10fc50=_0x2546c9,_0x1b0f82=this[_0x10fc50(0x659)]||0x0,_0x16c916=VisuMZ[_0x10fc50(0x895)][_0x10fc50(0x4b7)][_0x10fc50(0xafe)],_0x14f648=_0x4c1fdf[_0x10fc50(0xa3e)]('');if(_0x16c916[_0x14f648]){if(_0x10fc50(0xb1d)!==_0x10fc50(0x748))_0x16c916[_0x14f648][_0x10fc50(0x40c)](this,_0x1b0f82);else{const _0x3b072f=_0x3292c1[_0x10fc50(0x895)]['Settings'][_0x10fc50(0x862)];let _0x22cd91=![];_0x2c3708[_0x10fc50(0x165)]()?_0x22cd91=_0x3b072f[_0x10fc50(0x7a3)]:_0x22cd91=_0x3b072f[_0x10fc50(0x92)],this['forceSelect'](_0x22cd91?this[_0x10fc50(0x973)]()-0x1:0x0);}}let _0x1eb0ea=VisuMZ['BattleCore'][_0x10fc50(0x3c6)](this['item'](),_0x4c1fdf);VisuMZ[_0x10fc50(0x895)]['JS'][_0x1eb0ea]&&VisuMZ[_0x10fc50(0x895)]['JS'][_0x1eb0ea][_0x10fc50(0x40c)](this,this[_0x10fc50(0x294)](),this[_0x10fc50(0x294)](),this[_0x10fc50(0x1ff)](),_0x1b0f82);for(const _0x5d1998 of this[_0x10fc50(0x294)]()['traitObjects']()){if(!_0x5d1998)continue;_0x1eb0ea=VisuMZ['BattleCore'][_0x10fc50(0x3c6)](_0x5d1998,_0x4c1fdf),VisuMZ[_0x10fc50(0x895)]['JS'][_0x1eb0ea]&&VisuMZ['BattleCore']['JS'][_0x1eb0ea][_0x10fc50(0x40c)](this,this['subject'](),this[_0x10fc50(0x294)](),_0x5d1998,_0x1b0f82);}},Game_Action['prototype']['speed']=function(){const _0x4ead20=_0x2546c9;return VisuMZ['BattleCore']['Settings'][_0x4ead20(0xafe)][_0x4ead20(0x2af)][_0x4ead20(0x40c)](this);},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0xb49)]=function(){const _0x50488d=_0x2546c9;return VisuMZ[_0x50488d(0x895)][_0x50488d(0x4b7)][_0x50488d(0xafe)]['AllowRandomSpeed'];},Game_Action[_0x2546c9(0x79f)]['isCustomBattleScope']=function(){const _0x1b3630=_0x2546c9;return this[_0x1b3630(0x1ff)]()[_0x1b3630(0x4c1)][_0x1b3630(0x1e0)](/<JS TARGETS>/i);},Game_Action[_0x2546c9(0x79f)]['isBattleCoreTargetScope']=function(){const _0x31cd53=_0x2546c9;if(!this[_0x31cd53(0x571)]&&this[_0x31cd53(0x294)]()[_0x31cd53(0x4ea)]())return![];if(this[_0x31cd53(0x2e1)]())return!![];return typeof this[_0x31cd53(0x1ff)]()[_0x31cd53(0xb0c)]==='string';},VisuMZ['BattleCore']['Game_Action_isForOpponent']=Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x5bd)],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x5bd)]=function(){const _0x308fed=_0x2546c9;return this[_0x308fed(0xa5f)]()&&!this[_0x308fed(0x2e1)]()?this[_0x308fed(0x6d2)]():VisuMZ[_0x308fed(0x895)][_0x308fed(0x746)]['call'](this);},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x6d2)]=function(){const _0x533623=_0x2546c9,_0x44b2cb=this[_0x533623(0x1ff)]()[_0x533623(0xb0c)];return _0x44b2cb['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x2546c9(0x895)]['Game_Action_isForFriend']=Game_Action['prototype']['isForFriend'],Game_Action['prototype'][_0x2546c9(0x381)]=function(){const _0x2dff38=_0x2546c9;if(this[_0x2dff38(0xa5f)]()&&!this['isCustomBattleScope']()){if(_0x2dff38(0x346)!==_0x2dff38(0x346))_0x31e0a6[_0x2dff38(0x810)]([_0x204d1b]);else return this[_0x2dff38(0x7a6)]();}else return VisuMZ['BattleCore'][_0x2dff38(0x3dd)][_0x2dff38(0x40c)](this);},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x7a6)]=function(){const _0x57f701=_0x2546c9,_0x16f027=this[_0x57f701(0x1ff)]()[_0x57f701(0xb0c)];return _0x16f027[_0x57f701(0x1e0)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x2546c9(0x895)]['Game_Action_isForRandom']=Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x9ff)],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x9ff)]=function(){const _0x7ed341=_0x2546c9;if(this[_0x7ed341(0xa5f)]()&&!this['isCustomBattleScope']()){if(_0x7ed341(0x832)===_0x7ed341(0xa13))_0x13e447['_ptbActionCost']=_0x24dc3e[_0x7ed341(0x654)]||{},_0x3c2b16['_ptbActionCost'][_0x7ed341(0x444)]=0x0;else return this[_0x7ed341(0x9a9)]();}else{if(_0x7ed341(0x167)===_0x7ed341(0x9b0)){const _0x336419=_0x2ce4b4[_0x7ed341(0x895)][_0x7ed341(0x4b7)]['Mechanics'];_0x2e7ec3!=='EscapeFail'&&_0x336419['BattleEndEvent']&&_0x3ab3ab[_0x7ed341(0x895)][_0x7ed341(0x367)](_0x336419[_0x7ed341(0x255)])&&_0x40f07f[_0x7ed341(0x93c)](_0x336419[_0x7ed341(0x255)]);const _0x338c52=_0x7ed341(0x6d1)[_0x7ed341(0xa3e)](_0x468bb4);_0x336419[_0x338c52]&&_0x394a1c['BattleCore'][_0x7ed341(0x367)](_0x336419[_0x338c52])&&_0xcd448d['reserveCommonEvent'](_0x336419[_0x338c52]);}else return VisuMZ[_0x7ed341(0x895)][_0x7ed341(0x88a)][_0x7ed341(0x40c)](this);}},Game_Action['prototype'][_0x2546c9(0x9a9)]=function(){const _0x3276a7=_0x2546c9,_0x6e0584=this[_0x3276a7(0x1ff)]()[_0x3276a7(0xb0c)];return _0x6e0584[_0x3276a7(0x1e0)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x2546c9(0xaa7)]=Game_Action[_0x2546c9(0x79f)][_0x2546c9(0xfa)],Game_Action[_0x2546c9(0x79f)]['needsSelection']=function(){const _0x4c68a3=_0x2546c9;if(this[_0x4c68a3(0xa5f)]()&&!this[_0x4c68a3(0x2e1)]())return this[_0x4c68a3(0x397)]();else{if(_0x4c68a3(0x8e2)==='jPCOW')return VisuMZ['BattleCore'][_0x4c68a3(0xaa7)][_0x4c68a3(0x40c)](this);else{_0x167351['prototype'][_0x4c68a3(0x9de)][_0x4c68a3(0x40c)](this);if(this[_0x4c68a3(0x971)])this[_0x4c68a3(0x9e0)]();}}},Game_Action[_0x2546c9(0x79f)]['needsSelectionBattleCore']=function(){const _0x4bbfaa=_0x2546c9,_0x1c2638=this[_0x4bbfaa(0x1ff)]()[_0x4bbfaa(0xb0c)];if(_0x1c2638[_0x4bbfaa(0x1e0)](/RANDOM/i))return![];if(_0x1c2638[_0x4bbfaa(0x1e0)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x1c2638[_0x4bbfaa(0x1e0)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x4bbfaa(0x895)][_0x4bbfaa(0xaa7)][_0x4bbfaa(0x40c)](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x99f)]=Game_Action[_0x2546c9(0x79f)]['makeTargets'],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x716)]=function(){const _0x31e7db=_0x2546c9;let _0x2e474d=[];return this[_0x31e7db(0xa5f)]()?_0x2e474d=this[_0x31e7db(0x11c)]():_0x2e474d=VisuMZ[_0x31e7db(0x895)]['Game_Action_makeTargets'][_0x31e7db(0x40c)](this),_0x2e474d=this[_0x31e7db(0x198)](_0x2e474d),_0x2e474d;},Game_Action['prototype']['makeTargetsBattleCore']=function(){const _0x8214be=_0x2546c9;let _0x3e4c9c=[];const _0x1ffe74=String(this[_0x8214be(0x1ff)]()[_0x8214be(0xb0c)]),_0x22af02=VisuMZ[_0x8214be(0x895)][_0x8214be(0x3c6)](this[_0x8214be(0x1ff)](),'Targets');if(VisuMZ[_0x8214be(0x895)]['JS'][_0x22af02]){_0x3e4c9c=VisuMZ[_0x8214be(0x895)][_0x8214be(0x99f)]['call'](this);const _0x2deda5=VisuMZ[_0x8214be(0x895)][_0x8214be(0x3c6)](this['item'](),_0x8214be(0x21e));return _0x3e4c9c=VisuMZ['BattleCore']['JS'][_0x2deda5][_0x8214be(0x40c)](this,this[_0x8214be(0x294)](),_0x3e4c9c),this[_0x8214be(0x61f)](_0x3e4c9c);}if(_0x1ffe74[_0x8214be(0x1e0)](/(\d+) RANDOM ANY/i)){if(_0x8214be(0x97e)!=='mteAV')_0x1a9c47+=_0x590a41[_0x8214be(0x99a)][_0x8214be(0x43d)]||0x0,_0xac8433+=_0x2ae4d2[_0x8214be(0x99a)][_0x8214be(0x97)]||0x0;else{let _0xc01605=Number(RegExp['$1']);while(_0xc01605--){const _0x500554=Math[_0x8214be(0x66)](0x2)===0x0?this[_0x8214be(0x2ec)]():this[_0x8214be(0x408)]();_0x3e4c9c[_0x8214be(0x40b)](_0x500554['trueRandomTarget']());}return this['repeatTargets'](_0x3e4c9c);}}if(_0x1ffe74['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0x8214be(0x5ea)===_0x8214be(0x5ea)){let _0x2ee805=Number(RegExp['$1']);while(_0x2ee805--){_0x3e4c9c[_0x8214be(0x40b)](this[_0x8214be(0x2ec)]()['trueRandomTarget']());}return this[_0x8214be(0x61f)](_0x3e4c9c);}else return _0x469a5c['isActiveTpb']();}if(_0x1ffe74[_0x8214be(0x1e0)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x8214be(0x9a2)!=='TQevq'){let _0x4d8bf4=Number(RegExp['$1']);while(_0x4d8bf4--){_0x3e4c9c[_0x8214be(0x40b)](this[_0x8214be(0x408)]()[_0x8214be(0x799)]());}return this[_0x8214be(0x61f)](_0x3e4c9c);}else _0x5b8d72+=(_0x5578c5[_0x8214be(0x2e4)]()?0x1:-0x1)*_0x3872c9[_0x8214be(0x62e)]()/0x2;}if(_0x1ffe74[_0x8214be(0x1e0)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x3e4c9c['push'](...this[_0x8214be(0x408)]()[_0x8214be(0x332)]()[_0x8214be(0xae4)](_0x19a9e9=>_0x19a9e9!==this[_0x8214be(0x294)]())),this[_0x8214be(0x61f)](_0x3e4c9c);return VisuMZ['BattleCore'][_0x8214be(0x99f)]['call'](this);},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x6cf)]=function(_0x3619c5){const _0x2f01e5=_0x2546c9,_0x14a045=[];for(let _0x300e28=0x0;_0x300e28<this['numTargets']();_0x300e28++){_0x14a045[_0x2f01e5(0x40b)](_0x3619c5[_0x2f01e5(0x799)]());}return _0x14a045;},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x198)]=function(_0x1b7827){const _0x5a4b8b=_0x2546c9;if(!this['item']())return _0x1b7827;const _0x364e18=this['item']()[_0x5a4b8b(0x4c1)];if(_0x364e18[_0x5a4b8b(0x1e0)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x5a4b8b(0x384)!=='ZHUXc')return _0x2ea9f4[_0x5a4b8b(0x53c)]?_0x502645[_0x5a4b8b(0x85c)][_0x5a4b8b(0x4b7)]['QoL']['DigitGroupingDamageSprites']:![];else _0x1b7827[_0x5a4b8b(0x8ad)](this['subject']());}return _0x1b7827;},VisuMZ[_0x2546c9(0x895)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x6d0)],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x6d0)]=function(_0x28c8a0,_0x135ade){const _0x2cddad=_0x2546c9;VisuMZ['BattleCore']['Game_Action_itemEffectAddAttackState']['call'](this,_0x28c8a0,_0x135ade);if(!_0x28c8a0[_0x2cddad(0xf0)]())return;for(const _0x2ff76f of this[_0x2cddad(0x294)]()[_0x2cddad(0x563)]()){if(_0x2cddad(0x321)===_0x2cddad(0x156))_0x4e9051=_0x2ff4dd;else{if(_0x2ff76f===_0x28c8a0[_0x2cddad(0x91)]()){let _0x26b35f=_0x135ade['value1'];_0x26b35f*=_0x28c8a0['stateRate'](_0x2ff76f),_0x26b35f*=this[_0x2cddad(0x294)]()[_0x2cddad(0x3cf)](_0x2ff76f),_0x26b35f*=this[_0x2cddad(0x789)](_0x28c8a0),Math['random']()<_0x26b35f&&(_0x28c8a0[_0x2cddad(0x7c3)]=!![],this[_0x2cddad(0x463)](_0x28c8a0));}}}},VisuMZ['BattleCore'][_0x2546c9(0xb01)]=Game_Action[_0x2546c9(0x79f)]['itemEffectAddNormalState'],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x47b)]=function(_0x42a11d,_0x45b98d){const _0x165fcd=_0x2546c9;VisuMZ['BattleCore'][_0x165fcd(0xb01)][_0x165fcd(0x40c)](this,_0x42a11d,_0x45b98d);if(!_0x42a11d[_0x165fcd(0xf0)]())return;if(_0x45b98d[_0x165fcd(0x542)]!==_0x42a11d[_0x165fcd(0x91)]())return;let _0x4b1800=_0x45b98d[_0x165fcd(0x6e8)];!this[_0x165fcd(0x194)]()&&(_0x4b1800*=_0x42a11d[_0x165fcd(0xae1)](_0x45b98d['dataId']),_0x4b1800*=this[_0x165fcd(0x789)](_0x42a11d)),Math['random']()<_0x4b1800&&(_0x165fcd(0x8a7)!=='qrDYl'?(this[_0x165fcd(0x89b)](),this[_0x165fcd(0xb07)]=null,this['_inputting']=![]):(_0x42a11d['_deathStateApplied']=!![],this[_0x165fcd(0x463)](_0x42a11d)));},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8ef)]=Game_Action[_0x2546c9(0x79f)][_0x2546c9(0xa31)],Game_Action[_0x2546c9(0x79f)]['applyGlobal']=function(){const _0x392029=_0x2546c9;VisuMZ['BattleCore']['Game_Action_applyGlobal'][_0x392029(0x40c)](this),this[_0x392029(0x92d)](),this[_0x392029(0x458)]();},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x92d)]=function(){const _0x423355=_0x2546c9;if(!SceneManager[_0x423355(0x671)]())return;const _0x3f7bbf=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x5ecc00=this[_0x423355(0x1ff)]()[_0x423355(0x4c1)][_0x423355(0x1e0)](_0x3f7bbf);if(_0x5ecc00)for(const _0x5cfb83 of _0x5ecc00){if(_0x423355(0xe0)===_0x423355(0xe0)){if(!_0x5cfb83)continue;_0x5cfb83[_0x423355(0x1e0)](_0x3f7bbf);const _0x2837dd=String(RegExp['$1'])[_0x423355(0x24d)](',')['map'](_0x2066ea=>String(_0x2066ea)[_0x423355(0xb19)]()),_0x3d1b22=_0x2837dd[_0x423355(0x1b0)](_0x31cb33=>DataManager[_0x423355(0xa09)](_0x31cb33));for(const _0x463c76 of _0x3d1b22){if(_0x423355(0x16e)===_0x423355(0x16e)){const _0x5f3f08=$dataCommonEvents[_0x463c76];_0x5f3f08&&('xcpGD'===_0x423355(0x6a)?$gameTemp[_0x423355(0x93c)](_0x463c76):this[_0x423355(0x40b)](_0x423355(0x219),_0x1107fe));}else return 0x0;}}else _0xaf5977=_0x423355(0x373);}},DataManager['getCommonEventIdWithName']=function(_0x3cb1f7){const _0x3c850d=_0x2546c9;_0x3cb1f7=_0x3cb1f7[_0x3c850d(0x13e)]()['trim'](),this['_commonEventIDs']=this[_0x3c850d(0x20c)]||{};if(this[_0x3c850d(0x20c)][_0x3cb1f7])return this[_0x3c850d(0x20c)][_0x3cb1f7];for(const _0x3d82e6 of $dataCommonEvents){if(!_0x3d82e6)continue;let _0x471c20=_0x3d82e6[_0x3c850d(0x395)];_0x471c20=_0x471c20[_0x3c850d(0x795)](/\x1I\[(\d+)\]/gi,''),_0x471c20=_0x471c20[_0x3c850d(0x795)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x471c20[_0x3c850d(0x13e)]()[_0x3c850d(0xb19)]()]=_0x3d82e6['id'];}return this['_commonEventIDs'][_0x3cb1f7]||0x0;},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x458)]=function(){const _0x58f47e=_0x2546c9;if(!SceneManager['isSceneBattle']())return;const _0x516481=VisuMZ['BattleCore'][_0x58f47e(0x4b7)][_0x58f47e(0xafe)];_0x516481[_0x58f47e(0x6b3)]&&$gameSwitches[_0x58f47e(0x7a5)](_0x516481[_0x58f47e(0x6b3)],![]);_0x516481['SwitchMissEvade']&&$gameSwitches[_0x58f47e(0x7a5)](_0x516481[_0x58f47e(0x49b)],![]);if(_0x516481['VariableDmg']){if(_0x58f47e(0x575)===_0x58f47e(0x575))$gameVariables[_0x58f47e(0x7a5)](_0x516481[_0x58f47e(0x3e7)],0x0);else return _0x80c39d(_0xf9482b['$1']);}_0x516481[_0x58f47e(0xa74)]&&('yAYUf'!==_0x58f47e(0x547)?$gameVariables['setValue'](_0x516481[_0x58f47e(0xa74)],0x0):_0x2dc136[_0x58f47e(0x902)]()?_0x4702e4[_0x58f47e(0x79f)][_0x58f47e(0x210)][_0x58f47e(0x40c)](this):_0x598380[_0x58f47e(0x895)]['Scene_Battle_stop']['call'](this));},Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x19a)]=function(_0x168b91){const _0x3d40b8=_0x2546c9;if(!SceneManager['isSceneBattle']())return;if(!_0x168b91)return;const _0x194c4d=_0x168b91[_0x3d40b8(0x51b)](),_0x17a76d=VisuMZ[_0x3d40b8(0x895)][_0x3d40b8(0x4b7)][_0x3d40b8(0xafe)];_0x17a76d[_0x3d40b8(0x6b3)]&&_0x194c4d['critical']&&$gameSwitches[_0x3d40b8(0x7a5)](_0x17a76d[_0x3d40b8(0x6b3)],!![]);_0x17a76d['SwitchMissEvade']&&(_0x194c4d[_0x3d40b8(0x235)]||_0x194c4d[_0x3d40b8(0xaf6)])&&$gameSwitches[_0x3d40b8(0x7a5)](_0x17a76d[_0x3d40b8(0x49b)],!![]);if(_0x17a76d[_0x3d40b8(0x3e7)]){if(_0x3d40b8(0x4c8)===_0x3d40b8(0x14a)){let _0x34274b=this[_0x3d40b8(0x6e0)](_0x164257);const _0x58e211=this[_0x3d40b8(0x68a)](),_0x19a8bf=_0x503dec['floor'](_0x58e211*0.75);for(let _0x444d7b=0x0;_0x444d7b<_0x34274b[_0x3d40b8(0x4ce)];_0x444d7b++){const _0x163003=this[_0x3d40b8(0x492)](_0x19a8bf,_0x58e211);_0x163003[_0x3d40b8(0x2c4)]['drawText'](_0x34274b[_0x444d7b],0x0,0x0,_0x19a8bf,_0x58e211,'center'),_0x163003['x']=(_0x444d7b-(_0x34274b['length']-0x1)/0x2)*_0x19a8bf,_0x163003['dy']=-_0x444d7b;}}else{let _0x211fda=$gameVariables[_0x3d40b8(0xafd)](_0x17a76d['VariableDmg']);_0x194c4d[_0x3d40b8(0x717)]>0x0&&(_0x211fda+=Math[_0x3d40b8(0x9d2)](_0x194c4d['hpDamage'])),$gameVariables[_0x3d40b8(0x7a5)](_0x17a76d[_0x3d40b8(0x3e7)],_0x211fda);}}if(_0x17a76d[_0x3d40b8(0xa74)]){let _0xb3549c=$gameVariables['value'](_0x17a76d[_0x3d40b8(0xa74)]);_0x194c4d[_0x3d40b8(0x717)]<0x0&&(_0xb3549c+=Math[_0x3d40b8(0x9d2)](_0x194c4d['hpDamage'])),$gameVariables[_0x3d40b8(0x7a5)](_0x17a76d[_0x3d40b8(0xa74)],_0xb3549c);}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x63a)]=Game_BattlerBase['prototype'][_0x2546c9(0x3b2)],Game_BattlerBase[_0x2546c9(0x79f)]['initMembers']=function(){const _0x39d0c9=_0x2546c9;VisuMZ[_0x39d0c9(0x895)][_0x39d0c9(0x63a)][_0x39d0c9(0x40c)](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x272)]=function(){this['_immortal']=![];},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x383)]=Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x48c)],Game_BattlerBase['prototype'][_0x2546c9(0x48c)]=function(){const _0x5258d7=_0x2546c9;this['_cache']={},VisuMZ[_0x5258d7(0x895)][_0x5258d7(0x383)][_0x5258d7(0x40c)](this);},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x67e)]=function(_0x33de64){const _0x3779f3=_0x2546c9;return this[_0x3779f3(0x183)]=this[_0x3779f3(0x183)]||{},this[_0x3779f3(0x183)][_0x33de64]!==undefined;},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0xac0)]=function(){const _0x51577c=_0x2546c9;if(this[_0x51577c(0x183)][_0x51577c(0xac0)]!==undefined)return this['_cache'][_0x51577c(0xac0)];const _0x931bb1=/<DAMAGE CAP:[ ](\d+)>/i,_0x49bae4=this[_0x51577c(0x6b1)]()[_0x51577c(0x1b0)](_0x5e7ac0=>_0x5e7ac0&&_0x5e7ac0[_0x51577c(0x4c1)][_0x51577c(0x1e0)](_0x931bb1)?Number(RegExp['$1']):0x0);let _0x6a971=_0x49bae4[_0x51577c(0x4ce)]>0x0?Math[_0x51577c(0x556)](..._0x49bae4):0x0;if(_0x6a971<=0x0)_0x6a971=VisuMZ[_0x51577c(0x895)]['Settings'][_0x51577c(0x2f3)]['DefaultHardCap'];return this[_0x51577c(0x183)]['hardDamageCap']=_0x6a971,this[_0x51577c(0x183)]['hardDamageCap'];},Game_BattlerBase['prototype'][_0x2546c9(0x80b)]=function(){const _0x287b0d=_0x2546c9;if(this['_cache'][_0x287b0d(0x3cc)]!==undefined)return this[_0x287b0d(0x183)][_0x287b0d(0x3cc)];let _0x3f0b5a=VisuMZ['BattleCore']['Settings']['Damage'][_0x287b0d(0x7e4)];const _0x12363f=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x46544b=this[_0x287b0d(0x6b1)]()[_0x287b0d(0x1b0)](_0x4c4745=>_0x4c4745&&_0x4c4745[_0x287b0d(0x4c1)][_0x287b0d(0x1e0)](_0x12363f)?Number(RegExp['$1'])/0x64:0x0);return _0x3f0b5a=_0x46544b[_0x287b0d(0x4e3)]((_0xa8da92,_0x1cd8bd)=>_0xa8da92+_0x1cd8bd,_0x3f0b5a),this[_0x287b0d(0x183)][_0x287b0d(0x3cc)]=_0x3f0b5a,this['_cache'][_0x287b0d(0x3cc)][_0x287b0d(0x60b)](0.01,0x1);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xacb)]=Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x3f4)],Game_BattlerBase[_0x2546c9(0x79f)]['die']=function(){const _0x7fa82c=_0x2546c9;VisuMZ[_0x7fa82c(0x895)][_0x7fa82c(0xacb)][_0x7fa82c(0x40c)](this),SceneManager['isSceneBattle']()&&('SvFYL'===_0x7fa82c(0x518)?this[_0x7fa82c(0xb0a)]=_0x114285[_0x7fa82c(0xb0a)]:this[_0x7fa82c(0x5a8)](_0x7fa82c(0x1c1)));},Game_BattlerBase[_0x2546c9(0x79f)]['battler']=function(){const _0x2206cd=_0x2546c9;if(!SceneManager[_0x2206cd(0x671)]())return null;if(!SceneManager[_0x2206cd(0x465)][_0x2206cd(0x5a6)])return null;return SceneManager['_scene'][_0x2206cd(0x5a6)]['findTargetSprite'](this);},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x914)]=function(){const _0xb30dc3=_0x2546c9;return VisuMZ[_0xb30dc3(0x895)]['Settings'][_0xb30dc3(0x99a)][_0xb30dc3(0x72c)];},Game_BattlerBase['prototype']['svBattlerAnchorY']=function(){const _0x5a2a17=_0x2546c9;return VisuMZ[_0x5a2a17(0x895)][_0x5a2a17(0x4b7)][_0x5a2a17(0x99a)][_0x5a2a17(0x220)];},Game_BattlerBase[_0x2546c9(0x79f)]['svBattlerShadowVisible']=function(){const _0x4edf3d=_0x2546c9;if(this[_0x4edf3d(0x55e)]&&this['isActor']()){if('EfqKN'!==_0x4edf3d(0xa86)){const _0x23c29c=this[_0x4edf3d(0x971)];_0x23c29c[_0x4edf3d(0x92e)]['clear']();const _0x24d11c=this[_0x4edf3d(0x3bd)](this['index']());if(_0x24d11c===_0x4edf3d(0x51c)&&this[_0x4edf3d(0x973)]()>0x0){const _0x1c811f=this['itemLineRect'](this['index']());let _0x4076eb=this[_0x4edf3d(0x82d)](this[_0x4edf3d(0xde)]());_0x4076eb=_0x4076eb['replace'](/\\I\[(\d+)\]/gi,''),_0x23c29c['resetFontSettings'](),this[_0x4edf3d(0x7d5)](_0x4076eb,_0x1c811f),this[_0x4edf3d(0x835)](_0x4076eb,_0x1c811f),this[_0x4edf3d(0x592)](_0x4076eb,_0x1c811f);}}else return VisuMZ[_0x4edf3d(0x895)]['Settings'][_0x4edf3d(0x99a)]['Shadow'];}else return VisuMZ[_0x4edf3d(0x895)][_0x4edf3d(0x4b7)][_0x4edf3d(0x862)][_0x4edf3d(0x32c)];},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x4bb)]=function(){return!![];},Game_BattlerBase['prototype'][_0x2546c9(0x6db)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x2546c9(0x4b9)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x2546c9(0x9d8)]=function(_0x8f5eed){const _0x2752d0=_0x2546c9;if(!_0x8f5eed)return 0x0;let _0x4ddb9e=0x0;const _0x39504d=_0x8f5eed['note'];return _0x39504d[_0x2752d0(0x1e0)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x4ddb9e+=Number(RegExp['$1'])),_0x39504d[_0x2752d0(0x1e0)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4ddb9e+=Number(RegExp['$1'])),_0x4ddb9e;},Game_BattlerBase['prototype']['createBattleUIOffsetY']=function(_0x38fb73){const _0x23343a=_0x2546c9;if(!_0x38fb73)return 0x0;let _0xaefddc=0x0;const _0x5c6b7c=_0x38fb73[_0x23343a(0x4c1)];return _0x5c6b7c['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0xaefddc+=Number(RegExp['$1'])),_0x5c6b7c[_0x23343a(0x1e0)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0xaefddc+=Number(RegExp['$2'])),_0xaefddc;},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x7d0)]=Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x9ca)],Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x9ca)]=function(_0x3db217){const _0x31cd88=_0x2546c9;if(_0x3db217===this[_0x31cd88(0x91)]()&&this[_0x31cd88(0xf0)]())return _0x31cd88(0x62c)!==_0x31cd88(0x864)?!![]:this['_floatDuration']>0x0;return VisuMZ[_0x31cd88(0x895)][_0x31cd88(0x7d0)][_0x31cd88(0x40c)](this,_0x3db217);},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0xf0)]=function(){const _0x224211=_0x2546c9;return this[_0x224211(0x555)];},Game_BattlerBase[_0x2546c9(0x79f)]['setImmortal']=function(_0x3dd09a){const _0x12d60a=_0x2546c9;if(_0x3dd09a){if(_0x12d60a(0xa1f)===_0x12d60a(0xa1f))this[_0x12d60a(0x480)]();else return this['needsSelectionBattleCore']();}else this['removeImmortal']();},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x480)]=function(){const _0x16b1f2=_0x2546c9;if(this[_0x16b1f2(0x4ca)]())return;this[_0x16b1f2(0x555)]=!![],this[_0x16b1f2(0x7c3)]=![];},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0xa2c)]=function(){const _0x39db95=_0x2546c9,_0x19a2fa=this[_0x39db95(0x21f)]();this['_immortal']=![],_0x19a2fa&&this['_deathStateApplied']&&this['die'](),this[_0x39db95(0x7c3)]=![],this[_0x39db95(0x48c)](),this[_0x39db95(0x4ca)]()&&_0x19a2fa&&(this[_0x39db95(0x5ff)](),this[_0x39db95(0x32f)]());},VisuMZ['BattleCore'][_0x2546c9(0x803)]=Game_Action['prototype']['numRepeats'],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x330)]=function(){const _0x32b497=_0x2546c9;if(this[_0x32b497(0x1ff)]())return VisuMZ[_0x32b497(0x895)][_0x32b497(0x803)][_0x32b497(0x40c)](this);else{if(_0x32b497(0x18b)==='XwsjC')this[_0x32b497(0x611)]=null,_0x52e1d1[_0x32b497(0x895)][_0x32b497(0x6eb)][_0x32b497(0x40c)](this,_0x57f3f4);else return 0x0;}},VisuMZ['BattleCore'][_0x2546c9(0x8bc)]=Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x447)],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x447)]=function(){const _0x590c0e=_0x2546c9;this[_0x590c0e(0x294)]()&&this['subject']()[_0x590c0e(0xaa2)]()?VisuMZ[_0x590c0e(0x895)][_0x590c0e(0x8bc)][_0x590c0e(0x40c)](this):this['clear']();},VisuMZ[_0x2546c9(0x895)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0xaa2)],Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0xaa2)]=function(){const _0x3b1310=_0x2546c9;if(!this[_0x3b1310(0x14c)]())return![];return VisuMZ[_0x3b1310(0x895)][_0x3b1310(0x683)][_0x3b1310(0x40c)](this);},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x14c)]=function(){const _0x5c903c=_0x2546c9;for(const _0xc8856c of this[_0x5c903c(0x6b1)]()){if(_0x5c903c(0xa44)!==_0x5c903c(0x2c5)){if(!_0xc8856c)continue;if(_0xc8856c[_0x5c903c(0x4c1)][_0x5c903c(0x1e0)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}else _0x2364e3[_0x5c903c(0x895)][_0x5c903c(0x98f)][_0x5c903c(0x40c)](this),this[_0x5c903c(0x16f)]();}return!![];},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x85d)]=Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x9ed)],Game_Action[_0x2546c9(0x79f)][_0x2546c9(0x9ed)]=function(){const _0x46c5a8=_0x2546c9;this['subject']()['canGuard']()&&VisuMZ[_0x46c5a8(0x895)]['Game_Action_setGuard'][_0x46c5a8(0x40c)](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x282)]=Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0xaf9)],Game_BattlerBase['prototype']['canGuard']=function(){const _0x59d959=_0x2546c9;if(!this[_0x59d959(0x376)]())return![];return VisuMZ[_0x59d959(0x895)][_0x59d959(0x282)][_0x59d959(0x40c)](this);},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x376)]=function(){const _0x2fbb10=_0x2546c9;for(const _0x2aaa96 of this[_0x2fbb10(0x6b1)]()){if(!_0x2aaa96)continue;if(_0x2aaa96['note'][_0x2fbb10(0x1e0)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0x2546c9(0x95)]=function(){const _0x4867c4=_0x2546c9;for(const _0x4b2ee7 of this['traitObjects']()){if(!_0x4b2ee7)continue;if(_0x4b2ee7[_0x4867c4(0x4c1)][_0x4867c4(0x1e0)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0xb49)]=function(){const _0x59c49b=_0x2546c9;return VisuMZ[_0x59c49b(0x895)]['Settings'][_0x59c49b(0xafe)]['AllowRandomSpeed'];},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x720)]=Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x1cb)],Game_Battler[_0x2546c9(0x79f)]['regenerateAll']=function(){const _0x2d6212=_0x2546c9;if(SceneManager[_0x2d6212(0x671)]()){if(BattleManager['isTpb']()){if(this['turnCount']()<=0x0)return;}else{if($gameTroop[_0x2d6212(0xa3a)]()<=0x0){if('FMIko'==='YQMCQ')_0x5a13c3['_autoBattle']=!![],_0x2d4f80[_0x2d6212(0x4f1)](),this[_0x2d6212(0x814)](),_0xa05442['isTpb']()&&(_0x3b5509['_inputting']=![]);else return;}}}if(SceneManager[_0x2d6212(0x671)]()&&BattleManager[_0x2d6212(0x777)]()&&this[_0x2d6212(0x333)]===Graphics[_0x2d6212(0x1f3)]){if(_0x2d6212(0x736)!==_0x2d6212(0x736)){if(_0x44bbbe){const _0x89fd90=_0x10be8e[_0x2d6212(0x402)](_0x56e11e);return _0x89fd90>=0x0?[_0x56315e[_0x89fd90+0x1]||_0x195129]:[_0x5d21c0];}}else return;}this[_0x2d6212(0x333)]=Graphics['frameCount'],SceneManager[_0x2d6212(0x671)]()&&this['processBattleCoreJS']('PreRegenerateJS'),VisuMZ[_0x2d6212(0x895)][_0x2d6212(0x720)]['call'](this),SceneManager[_0x2d6212(0x671)]()&&(this['regenerateAllBattleCore'](),this['processBattleCoreJS'](_0x2d6212(0x38c)));},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x5e8)]=function(){const _0x3a9e71=_0x2546c9;if(SceneManager['isSceneBattle']())for(const _0x1b3b5e of this[_0x3a9e71(0x6b1)]()){if(_0x3a9e71(0x9da)===_0x3a9e71(0x925)){if(!_0x220e9d['BattleCore']['Settings'][_0x3a9e71(0x8a4)][_0x3a9e71(0x685)])return;_0x32fa92[_0x3a9e71(0x895)]['Window_BattleLog_displayCritical'][_0x3a9e71(0x40c)](this,_0x1dbdb1);}else{if(!_0x1b3b5e)continue;this[_0x3a9e71(0x29a)](_0x1b3b5e);}}},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x29a)]=function(_0x47dbf7){const _0x208508=_0x2546c9;if(!Imported[_0x208508(0x53c)])return;if(!SceneManager[_0x208508(0x671)]())return;if(this['isDead']())return;if(this[_0x208508(0x1ae)]())return;if(_0x47dbf7[_0x208508(0x4c1)][_0x208508(0x1e0)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x525623=Number(RegExp['$1']);$gameTemp[_0x208508(0x36c)]([this],_0x525623,![],![]);}},VisuMZ['BattleCore'][_0x2546c9(0x8d2)]=Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x320)],Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x320)]=function(){const _0x56594b=_0x2546c9;this['processBattleCoreJS'](_0x56594b(0x76)),VisuMZ[_0x56594b(0x895)][_0x56594b(0x8d2)]['call'](this),this['processBattleCoreJS']('PostStartTurnJS');},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x9ef)]=Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x49e)],Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x49e)]=function(){const _0x570439=_0x2546c9;this[_0x570439(0x133)](_0x570439(0x6a6)),VisuMZ[_0x570439(0x895)][_0x570439(0x9ef)][_0x570439(0x40c)](this),this['processBattleCoreJS'](_0x570439(0x50b));},Game_Battler['prototype']['processBattleCoreJS']=function(_0x345ef9){const _0x388b23=_0x2546c9;if(this['_tempBattler']||this[_0x388b23(0x460)])return;const _0x4bbe4f=VisuMZ['BattleCore'][_0x388b23(0x4b7)][_0x388b23(0xafe)];if(_0x4bbe4f[_0x345ef9])_0x4bbe4f[_0x345ef9][_0x388b23(0x40c)](this);for(const _0xdc6f5e of this[_0x388b23(0x6b1)]()){if('RlAZu'==='ZvNMI'){if(!_0x70a375[_0x388b23(0x68c)]())return;if(this[_0x388b23(0xa02)])return;this[_0x388b23(0xa02)]=!![];let _0x2ebeed='';_0x2ebeed+=_0x388b23(0x249),_0x2ebeed+='\x20to\x20%1\x20midbattle.'[_0x388b23(0xa3e)](_0x534ef4[_0x388b23(0x395)]),_0x70b9f5(_0x2ebeed);}else{if(!_0xdc6f5e)continue;key=VisuMZ['BattleCore'][_0x388b23(0x3c6)](_0xdc6f5e,_0x345ef9);if(VisuMZ[_0x388b23(0x895)]['JS'][key]){if(_0x388b23(0x528)!=='ZtIDr')return _0x2a79a6[_0x388b23(0x395)];else VisuMZ[_0x388b23(0x895)]['JS'][key][_0x388b23(0x40c)](this,this,this,_0xdc6f5e,0x0);}}}},Game_Battler['prototype'][_0x2546c9(0x12b)]=function(){const _0x506e48=_0x2546c9;return VisuMZ[_0x506e48(0x895)][_0x506e48(0x4b7)][_0x506e48(0x99a)]['ChantStyle']||![];},Game_Battler['prototype'][_0x2546c9(0x9e1)]=function(){const _0x5774a5=_0x2546c9;if(this[_0x5774a5(0x55a)]()){if(_0x5774a5(0x70e)!==_0x5774a5(0x9c3)){if(this['chantStyle']()){if(_0x5774a5(0x22d)===_0x5774a5(0x51a)){const _0x47c255=_0x16a8ac[_0x5774a5(0x7cd)]();_0x47c255[_0x5774a5(0x943)](this[_0x5774a5(0x559)][_0x5774a5(0xab)]()),this['onSelectAction']();}else{if(this[_0x5774a5(0x829)][_0x5774a5(0x335)](_0x4efc06=>_0x4efc06[_0x5774a5(0x1ff)]()&&_0x4efc06[_0x5774a5(0x5c6)]())){if('WeWtm'==='DpVBh')_0x5e1bf5+=_0xe75307,_0x33f572+=_0xe8bb;else return!![];}}}else{if(_0x5774a5(0x196)!==_0x5774a5(0x196))this[_0x5774a5(0x604)]['show']();else{if(this[_0x5774a5(0x829)][_0x5774a5(0x335)](_0x5c9d25=>_0x5c9d25['item']()&&_0x5c9d25[_0x5774a5(0xb38)]()))return!![];}}}else _0x4e816c[_0x5774a5(0x895)][_0x5774a5(0x8c2)]['call'](this),this[_0x5774a5(0x43c)]();}if(BattleManager[_0x5774a5(0x777)]()&&this[_0x5774a5(0x403)]===_0x5774a5(0x116))return this[_0x5774a5(0x12b)]()?this[_0x5774a5(0xab2)]()&&this[_0x5774a5(0xab2)]()[_0x5774a5(0x1ff)]()&&this[_0x5774a5(0xab2)]()[_0x5774a5(0x5c6)]():this[_0x5774a5(0xab2)]()&&this['currentAction']()[_0x5774a5(0x1ff)]()&&this['currentAction']()[_0x5774a5(0xb38)]();return![];},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x6e1)]=function(){const _0xd43ecc=_0x2546c9;if(BattleManager['isTpb']()&&this[_0xd43ecc(0x403)]===_0xd43ecc(0x116))return this[_0xd43ecc(0x12b)]()?this[_0xd43ecc(0xab2)]()&&this['currentAction']()['item']()&&!this[_0xd43ecc(0xab2)]()[_0xd43ecc(0x5c6)]():this[_0xd43ecc(0xab2)]()&&this[_0xd43ecc(0xab2)]()[_0xd43ecc(0x1ff)]()&&!this[_0xd43ecc(0xab2)]()[_0xd43ecc(0xb38)]();return![];},VisuMZ['BattleCore'][_0x2546c9(0x258)]=Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0xa88)],Game_Battler['prototype'][_0x2546c9(0xa88)]=function(){const _0x8649a9=_0x2546c9;VisuMZ[_0x8649a9(0x895)][_0x8649a9(0x258)][_0x8649a9(0x40c)](this),this[_0x8649a9(0xa3)]=[];},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x7e)]=function(){const _0x4b27d1=_0x2546c9;if(!this[_0x4b27d1(0xa3)])this['clearDamagePopup']();return this['_damagePopupArray'][_0x4b27d1(0x4ce)]>0x0;},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x2d0)]=function(){const _0x3733a2=_0x2546c9;if(!SceneManager[_0x3733a2(0x671)]())return;if(!this[_0x3733a2(0xa3)])this[_0x3733a2(0xa88)]();this['createSeparateDamagePopups']();const _0x60aadb=this['battler']();if(_0x60aadb)_0x60aadb['setupDamagePopup']();},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x188)]=function(){const _0x1731e8=_0x2546c9,_0x13fcce=this[_0x1731e8(0x51b)]();if(_0x13fcce[_0x1731e8(0x235)]||_0x13fcce[_0x1731e8(0xaf6)]){if(_0x1731e8(0x9a6)!==_0x1731e8(0x9a6)){const _0x2ad28b=_0x39629d(_0x101c02['$1'])['split'](/[\r\n]+/)[_0x1731e8(0x1b0)](_0x11e2a6=>_0x5f0f99(_0x11e2a6)[_0x1731e8(0x13e)]()['trim']());_0x1f4016=_0x198a04['concat'](_0x2ad28b);!_0x28a8d7[_0x1731e8(0x4c1)][_0x1731e8(0x1e0)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x3c3380[_0x1731e8(0x4c1)]+=_0x1731e8(0x78c));;}else{const _0x19e943=JsonEx[_0x1731e8(0x785)](_0x13fcce);_0x19e943[_0x1731e8(0xabb)]=![],_0x19e943[_0x1731e8(0x622)]=0x0,this[_0x1731e8(0xa3)][_0x1731e8(0x40b)](_0x19e943);}}if(_0x13fcce[_0x1731e8(0xabb)]){if('qZSjQ'!==_0x1731e8(0x655)){const _0xbcd479=JsonEx[_0x1731e8(0x785)](_0x13fcce);_0xbcd479[_0x1731e8(0x235)]=![],_0xbcd479['evaded']=![],_0xbcd479['mpDamage']=0x0,this['_damagePopupArray'][_0x1731e8(0x40b)](_0xbcd479);}else{const _0x1b1c55=_0x3ea050[_0x1731e8(0x2ef)](_0x545bdf['$1']);this[_0x1731e8(0x350)](_0x1b1c55);}}if(_0x13fcce[_0x1731e8(0x622)]!==0x0){if(_0x1731e8(0x270)!==_0x1731e8(0x9fa)){const _0x5c5630=JsonEx[_0x1731e8(0x785)](_0x13fcce);_0x5c5630['missed']=![],_0x5c5630[_0x1731e8(0xaf6)]=![],_0x5c5630[_0x1731e8(0xabb)]=![],this[_0x1731e8(0xa3)][_0x1731e8(0x40b)](_0x5c5630);}else this[_0x1731e8(0x426)]='xp';}},Game_Battler[_0x2546c9(0x79f)]['getNextDamagePopup']=function(){const _0x34820f=_0x2546c9;if(!this[_0x34820f(0xa3)])this[_0x34820f(0xa88)]();if(VisuMZ[_0x34820f(0x895)][_0x34820f(0x4b7)][_0x34820f(0x2f3)][_0x34820f(0x44e)]){if(_0x34820f(0x926)===_0x34820f(0x1ec))this[_0x34820f(0x211)]();else return this[_0x34820f(0xa3)]['shift']();}else return this[_0x34820f(0xa3)]['pop']();},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x5b6)]=function(_0xfac523,_0x180a18){const _0x48b84e=_0x2546c9;if(!SceneManager[_0x48b84e(0x671)]())return;if(!this[_0x48b84e(0x2dc)]())return;if(_0xfac523[_0x48b84e(0x4ce)]<=0x0)return;_0x180a18=_0x180a18||{},_0x180a18[_0x48b84e(0x484)]=_0x180a18[_0x48b84e(0x484)]||_0x48b84e(0x261),_0x180a18[_0x48b84e(0x635)]=_0x180a18[_0x48b84e(0x635)]||[0x0,0x0,0x0,0x0],_0x180a18[_0x48b84e(0x257)]=_0x180a18['flashDuration']||0x0,this[_0x48b84e(0x2dc)]()[_0x48b84e(0x5b6)](_0xfac523,_0x180a18);},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x4e8)]=function(_0x1b8d09,_0x16f724,_0xd0f997){const _0x34cc07=_0x2546c9;if(!SceneManager[_0x34cc07(0x671)]())return;if(!this['battler']())return;if(_0x16f724['length']<=0x0)return;_0xd0f997=_0xd0f997||{},_0xd0f997[_0x34cc07(0x484)]=_0xd0f997[_0x34cc07(0x484)]||_0x34cc07(0x261),_0xd0f997[_0x34cc07(0x635)]=_0xd0f997['flashColor']||[0x0,0x0,0x0,0x0],_0xd0f997['flashDuration']=_0xd0f997[_0x34cc07(0x257)]||0x0,this['battler']()[_0x34cc07(0x4e8)](_0x1b8d09,_0x16f724,_0xd0f997);},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x102)]=function(){const _0x3d8cc0=_0x2546c9;if(this['isHidden']())return![];if(this[_0x3d8cc0(0x21f)]()&&this[_0x3d8cc0(0xab4)]())return!![];if(this[_0x3d8cc0(0x2e4)]()&&this[_0x3d8cc0(0x947)]()){if(_0x3d8cc0(0x9b9)!==_0x3d8cc0(0x535)){if(this[_0x3d8cc0(0x4ca)]()&&this[_0x3d8cc0(0x781)]())return![];}else _0x4d41d4[_0x3d8cc0(0x40b)]('clearActiveWeaponSet',_0x528336);}else{if(this[_0x3d8cc0(0x4ca)]())return![];}return!![];},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8c2)]=Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x3c9)],Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x3c9)]=function(){const _0x1abcca=_0x2546c9;VisuMZ[_0x1abcca(0x895)][_0x1abcca(0x8c2)]['call'](this),this['clearFreezeMotion']();},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x8a5)]=function(){return!![];},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x3c0)]=function(){return![];},VisuMZ[_0x2546c9(0x895)]['Game_Battler_onBattleStart']=Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x49f)],Game_Battler[_0x2546c9(0x79f)]['onBattleStart']=function(_0x244891){const _0x8a1a16=_0x2546c9;VisuMZ[_0x8a1a16(0x895)][_0x8a1a16(0xaa0)]['call'](this,_0x244891),this[_0x8a1a16(0x421)](_0x244891);},Game_Battler['prototype'][_0x2546c9(0x421)]=function(_0x2b278e){const _0x1ef3ba=_0x2546c9;this[_0x1ef3ba(0x6a9)](![]),this['_forcedHomeX']=undefined,this[_0x1ef3ba(0x80e)]=undefined;},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xb00)]=Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x7b5)],Game_Battler[_0x2546c9(0x79f)]['onBattleEnd']=function(){const _0x58b63e=_0x2546c9;VisuMZ['BattleCore']['Game_Battler_onBattleEnd'][_0x58b63e(0x40c)](this),this[_0x58b63e(0x455)]();},Game_Battler[_0x2546c9(0x79f)]['onBattleEndBattleCore']=function(){const _0x5b99a5=_0x2546c9;this[_0x5b99a5(0x684)]=undefined,this[_0x5b99a5(0x80e)]=undefined;},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x4fb)]=Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x260)],Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x260)]=function(_0x2831b4){const _0x573748=_0x2546c9;VisuMZ[_0x573748(0x895)][_0x573748(0x4fb)]['call'](this,_0x2831b4);if(!_0x2831b4[_0x573748(0x642)]()){if(_0x573748(0x1a7)===_0x573748(0xd7))_0xd4e869[_0x573748(0x895)]['Scene_Map_initialize'][_0x573748(0x40c)](this),_0x226df6[_0x573748(0xd6)]();else{const _0x1a81b2=this[_0x573748(0x2dc)]();_0x1a81b2&&_0x1a81b2[_0x573748(0x66b)]();}}this[_0x573748(0x6a9)](![]);},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x519)]=function(){const _0x1ea9e1=_0x2546c9,_0x5ab852=this[_0x1ea9e1(0x25f)];this[_0x1ea9e1(0x25f)]=![];if(BattleManager[_0x1ea9e1(0x822)]()&&this[_0x1ea9e1(0x680)]()){if(_0x1ea9e1(0xafb)===_0x1ea9e1(0x5e1))this['x']=_0x135cc0[_0x1ea9e1(0x8e7)]-this[_0x1ea9e1(0x951)]()[_0x1ea9e1(0x2dc)]()[_0x1ea9e1(0xa2f)];else{const _0x2a4f17=this[_0x1ea9e1(0x2dc)]();if(_0x2a4f17&&_0x5ab852)_0x2a4f17[_0x1ea9e1(0x66b)]();return;}}const _0x33c9bd=this[_0x1ea9e1(0x2dc)]();if(_0x33c9bd)_0x33c9bd[_0x1ea9e1(0x757)]();this[_0x1ea9e1(0x6a9)](![]),this[_0x1ea9e1(0x32f)]();},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x3af)]=function(_0x4f3343){const _0x2fdde0=_0x2546c9;if(_0x4f3343['isAttack']()){if(_0x2fdde0(0x6f5)===_0x2fdde0(0x3bc)){const _0x1fe798=this[_0x2fdde0(0x1ff)]()[_0x2fdde0(0xb0c)];return _0x1fe798[_0x2fdde0(0x1e0)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);}else this[_0x2fdde0(0x211)]();}else{if(_0x4f3343['isGuard']())this['requestMotion'](_0x2fdde0(0x2fb));else{if(_0x4f3343[_0x2fdde0(0x5c6)]())this[_0x2fdde0(0x5a8)](_0x2fdde0(0xac7));else{if(_0x4f3343[_0x2fdde0(0x89c)]())[0x1,0x2,0x5,0x6]['includes'](_0x4f3343['item']()[_0x2fdde0(0x471)][_0x2fdde0(0x59f)])?_0x2fdde0(0x71f)===_0x2fdde0(0x1f4)?(this[_0x2fdde0(0x3da)]=new _0x51b716(),this[_0x2fdde0(0x1d9)][_0x2fdde0(0x8c8)](this[_0x2fdde0(0x3da)])):this[_0x2fdde0(0x211)]():_0x2fdde0(0x38b)!==_0x2fdde0(0x86)?this[_0x2fdde0(0x5a8)](_0x2fdde0(0x185)):(this[_0x2fdde0(0x85a)]=_0x4fdd9c,this[_0x2fdde0(0x53a)]['bitmap']=_0x5e48da[_0x2fdde0(0x109)](_0x4ac36d));else _0x4f3343[_0x2fdde0(0x1a5)]()&&this[_0x2fdde0(0x5a8)](_0x2fdde0(0x1ff));}}}},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x44f)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x89a)]=function(){const _0x981603=_0x2546c9,_0x11561c=this[_0x981603(0x44f)]();return _0x11561c?_0x11561c[_0x981603(0xad7)]:0x0;},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x1c3)]=function(_0x963581){const _0x1294cf=_0x2546c9;if(!$gameSystem[_0x1294cf(0x165)]())return;const _0x41f174=this[_0x1294cf(0x2dc)](),_0x2682b3=_0x963581[_0x1294cf(0x2dc)]();if(!_0x41f174||!_0x2682b3)return;const _0x30d4d5=_0x2682b3[_0x1294cf(0xa2f)],_0x6f2fa1=_0x2682b3['_baseY'];this[_0x1294cf(0x78e)](_0x30d4d5,_0x6f2fa1,0x0,![],_0x1294cf(0x695),-0x1),_0x41f174[_0x1294cf(0x92a)]();const _0xad0c1a=VisuMZ[_0x1294cf(0x895)][_0x1294cf(0x4b7)][_0x1294cf(0x950)];let _0x122a1c=(_0x2682b3['width']+_0x41f174[_0x1294cf(0x9f9)])/0x2;_0x122a1c*=this[_0x1294cf(0x55e)]()?0x1:-0x1;let _0x630c0=_0xad0c1a[_0x1294cf(0x582)]*(this[_0x1294cf(0x55e)]()?0x1:-0x1);_0x963581[_0x1294cf(0x42f)](_0x122a1c,_0x630c0,0x0,![],_0x1294cf(0x695)),_0x2682b3[_0x1294cf(0x92a)]();},Game_Battler[_0x2546c9(0x79f)]['requestMotion']=function(_0x48a43f){const _0x38446d=_0x2546c9;if(SceneManager[_0x38446d(0x671)]()){const _0xa0ee42=this['battler']();_0xa0ee42&&(_0x38446d(0x9a8)!==_0x38446d(0x9a8)?(_0x315405-=this[_0x38446d(0x946)],_0x36a7eb-=this['_jumpHeight']):(_0xa0ee42[_0x38446d(0x45b)](_0x48a43f),[_0x38446d(0x6cd),'thrust','missile'][_0x38446d(0xa7e)](_0x48a43f)&&this[_0x38446d(0x117)]()));}this['clearFreezeMotion']();},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x117)]=function(){},Game_Battler[_0x2546c9(0x79f)]['startWeaponAnimation']=function(_0x49e66f){const _0x2f540c=_0x2546c9;if(SceneManager[_0x2f540c(0x671)]()){if(_0x2f540c(0x297)===_0x2f540c(0x297)){const _0x22d8a7=this[_0x2f540c(0x2dc)]();if(_0x22d8a7)_0x22d8a7[_0x2f540c(0x52b)](_0x49e66f);}else _0x275e34[_0x2f540c(0xa2c)](),_0x59e58e[_0x2f540c(0x4b0)](_0x32551e[_0x2f540c(0x91)]());}},Game_Battler['prototype'][_0x2546c9(0x7bf)]=function(){const _0x2d32f4=_0x2546c9;if(SceneManager[_0x2d32f4(0x671)]()){const _0x1f723b=this[_0x2d32f4(0x89a)]();this[_0x2d32f4(0x9e8)](_0x1f723b);}},Game_Battler['prototype'][_0x2546c9(0xabf)]=function(_0x10d419,_0x3846e6){const _0x454cc3=_0x2546c9;if(!_0x10d419)return;if(!_0x10d419[_0x454cc3(0x1ff)]())return;if(_0x10d419[_0x454cc3(0xbc)]())return;if(_0x10d419['isGuard']())return;if(_0x10d419[_0x454cc3(0x1a5)]())return;let _0x12119b=0x0;const _0x463254=VisuMZ[_0x454cc3(0x895)][_0x454cc3(0x4b7)][_0x454cc3(0x950)],_0xbc114d=_0x10d419[_0x454cc3(0x1ff)]()[_0x454cc3(0x4c1)];if(_0xbc114d[_0x454cc3(0x1e0)](/<CAST ANIMATION: (\d+)>/i))_0x12119b=Number(RegExp['$1']);else{if(_0xbc114d[_0x454cc3(0x1e0)](/<NO CAST ANIMATION>/i)){if(_0x454cc3(0xafa)==='KXmCR'){const _0x485c17=_0x18b54a[_0x454cc3(0x505)]('['+_0x8ca3a5['$1'][_0x454cc3(0x1e0)](/\d+/g)+']');for(const _0x333dac of _0x485c17){if(!_0x28ff5b[_0x454cc3(0xafd)](_0x333dac))return!![];}return![];}else return;}else{if(_0x10d419['isCertainHit']())_0x12119b=_0x463254[_0x454cc3(0x874)];else{if(_0x10d419[_0x454cc3(0x7a8)]())_0x12119b=_0x463254[_0x454cc3(0x900)];else{if(_0x10d419[_0x454cc3(0x5c6)]()){if('uKHyr'!==_0x454cc3(0x98a))return _0x46d633['getDefeatedEnemies']()[_0x454cc3(0xa7e)](this[_0x454cc3(0x379)]);else _0x12119b=_0x463254['CastMagical'];}}}}}_0x12119b>0x0&&$gameTemp[_0x454cc3(0x6c6)]([this],_0x12119b,!!_0x3846e6);},Game_Battler['prototype'][_0x2546c9(0x22e)]=function(){const _0x51e9b3=_0x2546c9;SoundManager[_0x51e9b3(0x30d)]();let _0x2f11d6=VisuMZ[_0x51e9b3(0x895)]['Settings'][_0x51e9b3(0x950)][_0x51e9b3(0x4dc)];_0x2f11d6>0x0&&(_0x51e9b3(0x88e)==='irAxV'?Imported[_0x51e9b3(0x53c)]?$gameTemp[_0x51e9b3(0x36c)]([this],_0x2f11d6):$gameTemp['requestAnimation']([this],_0x2f11d6):_0x2a1282[_0x51e9b3(0x6b4)](_0x707122));},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xfb)]=Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x5bc)],Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x5bc)]=function(){const _0x4230e1=_0x2546c9;VisuMZ[_0x4230e1(0x895)][_0x4230e1(0xfb)][_0x4230e1(0x40c)](this),this[_0x4230e1(0x2a2)]();},VisuMZ['BattleCore']['Game_Battler_performMiss']=Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x219)],Game_Battler[_0x2546c9(0x79f)]['performMiss']=function(){const _0x47ddcd=_0x2546c9;VisuMZ[_0x47ddcd(0x895)]['Game_Battler_performMiss']['call'](this),this[_0x47ddcd(0x2a2)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x80)]=Game_Battler[_0x2546c9(0x79f)]['performEvasion'],Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0xaec)]=function(){const _0x3c6dae=_0x2546c9;VisuMZ[_0x3c6dae(0x895)]['Game_Battler_performEvasion']['call'](this),this[_0x3c6dae(0x2a2)]();},Game_Battler[_0x2546c9(0x79f)]['performFlinch']=function(){const _0x4acdc6=_0x2546c9;if(!$gameSystem[_0x4acdc6(0x165)]())return;if(this[_0x4acdc6(0x25f)])return;this[_0x4acdc6(0x25f)]=!![];const _0x5f571a=this[_0x4acdc6(0x2dc)]();if(_0x5f571a)_0x5f571a['stepFlinch']();},Game_Battler[_0x2546c9(0x79f)]['requestMotionRefresh']=function(){const _0x18b1e4=_0x2546c9;if(this[_0x18b1e4(0x4ca)]()&&this[_0x18b1e4(0x1e2)]!==_0x18b1e4(0x1c1)){this[_0x18b1e4(0x5a8)](_0x18b1e4(0x1c1));return;}if(this['isDead']()&&this[_0x18b1e4(0x1e2)]===_0x18b1e4(0x1c1))return;if(!!this[_0x18b1e4(0x66a)])return;if(this[_0x18b1e4(0x2e4)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager['_subject']){if(this[_0x18b1e4(0x2dc)]())this[_0x18b1e4(0x2dc)]()[_0x18b1e4(0xc5)]();}this[_0x18b1e4(0x43c)]();return;}if(this[_0x18b1e4(0x1e2)]===_0x18b1e4(0xae6))return;if(this[_0x18b1e4(0x1e2)]==='escape'&&!BattleManager['isInputting']())return;if(this[_0x18b1e4(0x1e2)]==='guard'&&!BattleManager['isInputting']())return;this[_0x18b1e4(0x3c9)]();if(this[_0x18b1e4(0x2dc)]()&&BattleManager[_0x18b1e4(0x680)]()){this[_0x18b1e4(0x2dc)]()[_0x18b1e4(0xc5)](),this[_0x18b1e4(0x43c)]();return;}},Game_Enemy['prototype'][_0x2546c9(0x437)]=function(){const _0x33ffb4=_0x2546c9;if(!this[_0x33ffb4(0x947)]())return![];const _0x112028=this['battler']();if(!_0x112028)return![];const _0x587a07=_0x112028[_0x33ffb4(0xaba)];if(!_0x587a07)return![];const _0x252cb7=_0x587a07[_0x33ffb4(0x28b)];return _0x252cb7&&!_0x252cb7[_0x33ffb4(0x1b7)];},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0xb20)]=function(){const _0x16abfb=_0x2546c9;return this[_0x16abfb(0x1cf)];},Game_Battler[_0x2546c9(0x79f)]['setBattlerFlip']=function(_0x3deacc){const _0x180623=_0x2546c9;if(!$gameSystem[_0x180623(0x165)]())return;this[_0x180623(0x1cf)]=_0x3deacc;const _0x4c8fcc=this[_0x180623(0x2dc)]();if(_0x4c8fcc)_0x4c8fcc['updateFlip']();},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x461)]=function(_0x217555,_0x2a90ec,_0x4e1371){const _0x1799aa=_0x2546c9;if(!$gameSystem['isSideView']())return;const _0x5acc52=this['battler']();if(!_0x5acc52)return;if(_0x217555===_0x5acc52[_0x1799aa(0xa2f)])return;let _0xf0cd5=![];if(this['isActor']()){if(_0x1799aa(0xc7)!==_0x1799aa(0x82)){if(_0x217555>_0x5acc52['_baseX'])_0xf0cd5=!![];if(_0x217555<_0x5acc52[_0x1799aa(0xa2f)])_0xf0cd5=![];}else _0x5520d9[_0x1799aa(0x895)][_0x1799aa(0x6d4)][_0x1799aa(0x40c)](this),this[_0x1799aa(0x4f0)]();}else{if(this['isEnemy']()){if(_0x217555>_0x5acc52[_0x1799aa(0xa2f)])_0xf0cd5=![];if(_0x217555<_0x5acc52[_0x1799aa(0xa2f)])_0xf0cd5=!![];}};this[_0x1799aa(0x6a9)](_0x4e1371?!_0xf0cd5:_0xf0cd5),_0x5acc52['updateFlip']();},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x42f)]=function(_0x24ff4b,_0x45ee40,_0x598564,_0x2ed98b,_0x564155){const _0x27707b=_0x2546c9;if(!$gameSystem[_0x27707b(0x165)]())return;const _0x30e4ac=this['battler']();if(!_0x30e4ac)return;if(_0x2ed98b)this[_0x27707b(0x461)](_0x24ff4b+_0x30e4ac[_0x27707b(0xa2f)],_0x45ee40+_0x30e4ac['_baseY'],![]);_0x24ff4b+=_0x30e4ac[_0x27707b(0xa2f)]-_0x30e4ac[_0x27707b(0x493)],_0x45ee40+=_0x30e4ac[_0x27707b(0x38a)]-_0x30e4ac[_0x27707b(0x450)],_0x30e4ac[_0x27707b(0xc3)](_0x24ff4b,_0x45ee40,_0x598564);if(Imported['VisuMZ_0_CoreEngine'])_0x30e4ac[_0x27707b(0x5d6)](_0x564155||_0x27707b(0x695));},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x78e)]=function(_0x32d502,_0xdf6dc9,_0x1f82a2,_0x392b8f,_0x1deb46,_0x26da72){const _0x407c73=_0x2546c9;if(!$gameSystem[_0x407c73(0x165)]())return;const _0x2d8246=this['battler']();if(!_0x2d8246)return;if(_0x32d502===Infinity||_0xdf6dc9===Infinity)return;if(isNaN(_0x32d502)||isNaN(_0xdf6dc9))return;_0x26da72=_0x26da72||0x0;if(_0x26da72>0x0){if(_0x2d8246[_0x407c73(0xa2f)]>_0x32d502)_0x32d502+=_0x2d8246['width']/0x2+_0x26da72;if(_0x2d8246[_0x407c73(0xa2f)]<_0x32d502)_0x32d502-=_0x2d8246[_0x407c73(0x9f9)]/0x2+_0x26da72;}if(_0x392b8f)this[_0x407c73(0x461)](_0x32d502,_0xdf6dc9,![]);_0x32d502-=_0x2d8246[_0x407c73(0x493)],_0xdf6dc9-=_0x2d8246[_0x407c73(0x450)],_0x2d8246['startMove'](_0x32d502,_0xdf6dc9,_0x1f82a2);if(Imported[_0x407c73(0x53c)])_0x2d8246[_0x407c73(0x5d6)](_0x1deb46||'Linear');},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x7db)]=function(_0x564909,_0x1cccbe,_0x47be4c,_0x2bdd9a,_0x11419e){const _0x72dc73=_0x2546c9;if(!$gameSystem[_0x72dc73(0x165)]())return;const _0x3ba91e=this[_0x72dc73(0x2dc)]();if(!_0x3ba91e)return;if(_0x2bdd9a)this[_0x72dc73(0x461)](_0x564909+_0x3ba91e[_0x72dc73(0xa2f)],_0x1cccbe+_0x3ba91e[_0x72dc73(0x38a)],![]);_0x564909+=_0x3ba91e[_0x72dc73(0x493)],_0x1cccbe+=_0x3ba91e['_homeY'],_0x3ba91e[_0x72dc73(0x791)](_0x564909,_0x1cccbe,_0x47be4c,_0x11419e),this[_0x72dc73(0x684)]=_0x564909,this[_0x72dc73(0x80e)]=_0x1cccbe;},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0xacf)]=function(_0x4372c0,_0x501711,_0x201000,_0x274fd0,_0x568509,_0x5a0282){const _0x119e79=_0x2546c9;if(!$gameSystem[_0x119e79(0x165)]())return;const _0x2bcfa6=this['battler']();if(!_0x2bcfa6)return;_0x5a0282=_0x5a0282||0x0;if(_0x5a0282>0x0){if(_0x2bcfa6['_baseX']>_0x4372c0)_0x4372c0+=_0x2bcfa6[_0x119e79(0x9f9)]/0x2+_0x5a0282;if(_0x2bcfa6[_0x119e79(0xa2f)]<_0x4372c0)_0x4372c0-=_0x2bcfa6[_0x119e79(0x9f9)]/0x2+_0x5a0282;}if(_0x274fd0)this['setBattlerFacePoint'](_0x4372c0,_0x501711,![]);_0x2bcfa6[_0x119e79(0x791)](_0x4372c0,_0x501711,_0x201000,_0x568509),this[_0x119e79(0x684)]=_0x4372c0,this[_0x119e79(0x80e)]=_0x501711;},Game_Battler['prototype'][_0x2546c9(0x84e)]=function(_0x3ab2dd,_0x256e81,_0x14a438){const _0x1d5a70=_0x2546c9;if(!$gameSystem[_0x1d5a70(0x165)]())return;const _0x1de159=this[_0x1d5a70(0x2dc)]();if(!_0x1de159)return;_0x1de159[_0x1d5a70(0xa3d)](_0x3ab2dd,_0x256e81,_0x14a438);},Game_Battler['prototype'][_0x2546c9(0x6ed)]=function(_0x2bf716,_0x131eec){const _0x3d6a50=_0x2546c9;if(!$gameSystem['isSideView']())return;const _0x481f2e=this['battler']();if(!_0x481f2e)return;_0x481f2e[_0x3d6a50(0x4b1)](_0x2bf716,_0x131eec);},Game_Battler['prototype'][_0x2546c9(0x3d5)]=function(_0x22cb0c,_0x1c68cc,_0x1d30c3,_0x41287b){const _0x30b6f3=_0x2546c9;if(!$gameSystem[_0x30b6f3(0x165)]())return;const _0x2d87b3=this[_0x30b6f3(0x2dc)]();if(!_0x2d87b3)return;_0x2d87b3[_0x30b6f3(0xb05)](_0x22cb0c,_0x1c68cc,_0x1d30c3,_0x41287b);},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x49d)]=function(_0x385c08,_0x19d5bb,_0x3bcbbf,_0x149745){const _0x52ad57=_0x2546c9;if(!$gameSystem[_0x52ad57(0x165)]())return;const _0x5cff33=this[_0x52ad57(0x2dc)]();if(!_0x5cff33)return;if(this[_0x52ad57(0x55e)]()){if('ygXcC'!==_0x52ad57(0x674))_0x385c08*=-0x1,_0x19d5bb*=-0x1;else{if(this['_floatDuration']<=0x0)return;const _0x4e947f=this[_0x52ad57(0x139)],_0x492afc=this[_0x52ad57(0x371)],_0x5423d7=this[_0x52ad57(0x7f7)];_0x2c1019[_0x52ad57(0x53c)]?this['_floatHeight']=this['applyEasing'](this['_floatHeight'],this['_targetFloatHeight'],_0x4e947f,_0x492afc,_0x5423d7):this[_0x52ad57(0x946)]=(this['_floatHeight']*(_0x4e947f-0x1)+this[_0x52ad57(0xf3)])/_0x4e947f;this['_floatDuration']--;if(this[_0x52ad57(0x139)]<=0x0)this[_0x52ad57(0xb1)]();}}_0x5cff33[_0x52ad57(0xa83)](_0x385c08,_0x19d5bb,_0x3bcbbf,_0x149745);},Game_Battler['prototype']['growBattler']=function(_0x4a0bfc,_0x1a8fda,_0x51b79c,_0x5b57d3){const _0x183de5=_0x2546c9;if(!$gameSystem['isSideView']())return;const _0x1aca99=this[_0x183de5(0x2dc)]();if(!_0x1aca99)return;_0x1aca99['startGrow'](_0x4a0bfc,_0x1a8fda,_0x51b79c,_0x5b57d3);},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x6e4)]=function(_0x3fb4c2,_0x2217b5,_0x352901){const _0x1be681=_0x2546c9;if(!$gameSystem[_0x1be681(0x165)]())return;const _0x3c86ab=this[_0x1be681(0x2dc)]();if(!_0x3c86ab)return;_0x3c86ab[_0x1be681(0xb47)](_0x3fb4c2,_0x2217b5,_0x352901);},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x43c)]=function(){const _0x530d4c=_0x2546c9,_0x4c4959=!!this['_freezeMotionData'];this[_0x530d4c(0x66a)]=undefined,_0x4c4959&&(this['requestMotionRefresh'](),this[_0x530d4c(0x467)]());},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x467)]=function(){const _0x1b1682=_0x2546c9;if(!SceneManager['isSceneBattle']())return;const _0x920b55=this['battler']();if(!_0x920b55)return;let _0x50a8b6=this[_0x1b1682(0x55e)]()?_0x920b55[_0x1b1682(0x451)]:_0x920b55[_0x1b1682(0xaba)][_0x1b1682(0x451)];_0x50a8b6&&_0x50a8b6['setup'](0x0);},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x17d)]=function(_0x3f4a6f,_0x353e5e,_0x829f96){const _0x2a6f4c=_0x2546c9;if(this[_0x2a6f4c(0x2e4)]()&&!this[_0x2a6f4c(0x947)]())return;let _0x49b731=0x0,_0x5a24ae=0x0;_0x3f4a6f[_0x2a6f4c(0x1e0)](/ATTACK[ ](\d+)/i)&&(_0x2a6f4c(0x61c)!==_0x2a6f4c(0x61c)?this[_0x2a6f4c(0x6a3)]=_0x2a6f4c(0x850):(_0x5a24ae=Number(RegExp['$1']),_0x5a24ae--));if(this[_0x2a6f4c(0x55e)]()){const _0x4a4e03=this[_0x2a6f4c(0xc6)]();_0x49b731=_0x4a4e03[_0x5a24ae]?_0x4a4e03[_0x5a24ae]['wtypeId']:0x0;}else this['isEnemy']()&&(_0x49b731=this['svBattlerData']()[_0x2a6f4c(0x3ec)]||0x0);const _0x49ec43=$dataSystem['attackMotions'][_0x49b731];if(_0x3f4a6f[_0x2a6f4c(0x1e0)](/attack/i)){if(_0x2a6f4c(0x195)===_0x2a6f4c(0x195))_0x3f4a6f=[_0x2a6f4c(0x921),_0x2a6f4c(0x6cd),'missile'][_0x49ec43[_0x2a6f4c(0x59f)]]||_0x2a6f4c(0x6cd);else{if(!_0x32c3c0[_0x2a6f4c(0x671)]())return!![];const _0x4a80d8=[_0x2a6f4c(0x7ab),_0x2a6f4c(0xaa6)];return _0x4a80d8['includes'](_0x322839[_0x2a6f4c(0x395)]);}}this[_0x2a6f4c(0x66a)]={'motionType':_0x3f4a6f,'weaponImageId':_0x353e5e?_0x49ec43[_0x2a6f4c(0xad7)]:0x0,'pattern':_0x829f96};},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x546)]=function(_0x45f913){const _0x53e7cc=_0x2546c9;if(!_0x45f913)return![];return _0x45f913[_0x53e7cc(0x408)]()===this[_0x53e7cc(0x408)]();},Game_Battler[_0x2546c9(0x79f)]['isOpponent']=function(_0x3155db){const _0x423632=_0x2546c9;if(!_0x3155db)return![];return _0x3155db['opponentsUnit']()===this[_0x423632(0x408)]();},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x3ea)]=function(){return![];},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x3ea)]=function(){const _0x17b3c9=_0x2546c9;return this[_0x17b3c9(0x2db)]()[_0x17b3c9(0x1e0)](/\$/i);},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x3ea)]=function(){const _0x320927=_0x2546c9;return this['hasSvBattler']()&&this[_0x320927(0xac9)]()[_0x320927(0x1e0)](/\$/i);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x1bd)]=Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x47e)],Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x47e)]=function(_0x10dccf){const _0x21c7f8=_0x2546c9;VisuMZ[_0x21c7f8(0x895)][_0x21c7f8(0x1bd)][_0x21c7f8(0x40c)](this,_0x10dccf),this['initBattlePortrait']();},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0xac5)]=function(){const _0x29625b=_0x2546c9;this[_0x29625b(0x912)]='',this[_0x29625b(0x97d)]()&&this[_0x29625b(0x97d)]()[_0x29625b(0x4c1)][_0x29625b(0x1e0)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x29625b(0x912)]=String(RegExp['$1']));},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x701)]=function(){const _0x52e443=_0x2546c9;if(this[_0x52e443(0x1fd)]()!==''){if(_0x52e443(0x3b0)!==_0x52e443(0x1c7))return this[_0x52e443(0x1fd)]();else{_0x2d1b4e[_0x52e443(0x1e0)](_0x4a3f5b);const _0x269f77=_0xd84f18(_0x47f8f3['$1'])[_0x52e443(0x24d)](',')[_0x52e443(0x1b0)](_0x5d16c8=>_0x1f91e3(_0x5d16c8)[_0x52e443(0x13e)]()[_0x52e443(0xb19)]());_0x5f33be=_0x55581e['concat'](_0x269f77);}}else{if(Imported[_0x52e443(0x59b)]&&this['getMenuImage']()!=='')return this['getMenuImage']();}return'';},Game_Actor['prototype']['getBattlePortrait']=function(){const _0x12bed3=_0x2546c9;if(this[_0x12bed3(0x912)]===undefined)this[_0x12bed3(0xac5)]();return this[_0x12bed3(0x912)];},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x5c5)]=function(_0x28ff1a){const _0x15a47c=_0x2546c9;if(this[_0x15a47c(0x912)]===undefined)this['initBattlePortrait']();this[_0x15a47c(0x912)]=_0x28ff1a;if(SceneManager[_0x15a47c(0x671)]()&&$gameParty[_0x15a47c(0xb15)]()['includes'](this)){const _0x8857a0=SceneManager['_scene'][_0x15a47c(0x432)];if(_0x8857a0)_0x8857a0[_0x15a47c(0x6c4)](this);}},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x935)]=function(){return!![];},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0xa84)]=function(){const _0x88365b=_0x2546c9;if(!this[_0x88365b(0x4ea)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x88365b(0x79f)][_0x88365b(0xa84)]['call'](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xad)]=Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x4c5)],Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x4c5)]=function(){const _0x701633=_0x2546c9;if(BattleManager[_0x701633(0x278)]&&!ConfigManager[_0x701633(0x1c8)])return this['makeActionListAutoAttack']();else{if('lQRwb'!=='zQWLq'){return VisuMZ['BattleCore'][_0x701633(0xad)][_0x701633(0x40c)](this);;}else this['isAnimationShownOnBattlePortrait'](_0x26c770)?this[_0x701633(0x968)]()[_0x701633(0x8c8)](_0x1bf94e):this['_animationContainer']['addChild'](_0x32a527),this[_0x701633(0x9e6)][_0x701633(0x40b)](_0x64a0);}},Game_Actor['prototype'][_0x2546c9(0x8d9)]=function(){const _0x332d75=_0x2546c9,_0x219908=[],_0x17da49=new Game_Action(this);return _0x17da49[_0x332d75(0x447)](),_0x219908[_0x332d75(0x40b)](_0x17da49),_0x219908;},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x1d4)]=function(){const _0x41ffae=_0x2546c9;return this[_0x41ffae(0xe1)]()['note']['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x41ffae(0x2a6)===_0x41ffae(0x2a6)?String(RegExp['$1'])[_0x41ffae(0x24d)](/[\r\n]+/):_0xf1a42[_0x41ffae(0x6a5)]-_0x598208[_0x41ffae(0x6a5)]:VisuMZ['BattleCore'][_0x41ffae(0x4b7)][_0x41ffae(0x702)][_0x41ffae(0x7c4)];},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x914)]=function(){const _0xe68d6b=_0x2546c9;if(this[_0xe68d6b(0x183)][_0xe68d6b(0x48e)]!==undefined)return this[_0xe68d6b(0x183)]['svAnchorX'];return this[_0xe68d6b(0x97d)]()[_0xe68d6b(0x4c1)][_0xe68d6b(0x1e0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?_0xe68d6b(0x8f8)!==_0xe68d6b(0x87d)?(this[_0xe68d6b(0x183)]['svAnchorX']=eval(RegExp['$1']),this[_0xe68d6b(0x183)][_0xe68d6b(0x26f)]=eval(RegExp['$2'])):_0x5699e2[_0xe68d6b(0x76b)](_0xe68d6b(0x906)):'FtfCI'===_0xe68d6b(0x8fd)?this[_0xe68d6b(0x183)][_0xe68d6b(0x48e)]=Game_Battler['prototype'][_0xe68d6b(0x914)][_0xe68d6b(0x40c)](this):_0x475f52[_0xe68d6b(0x7a5)](_0x219f96[_0xe68d6b(0x3e7)],0x0),this[_0xe68d6b(0x183)][_0xe68d6b(0x48e)];},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x169)]=function(){const _0xdcc51a=_0x2546c9;if(this[_0xdcc51a(0x183)]['svAnchorY']!==undefined)return this['_cache'][_0xdcc51a(0x26f)];if(this[_0xdcc51a(0x97d)]()[_0xdcc51a(0x4c1)][_0xdcc51a(0x1e0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if('MJKqB'===_0xdcc51a(0xa40)){const _0x4e1b5b=_0x1233df['BattleCore'][_0xdcc51a(0x4b7)][_0xdcc51a(0x8c9)],_0x5ebe51=_0x3fc636[_0xdcc51a(0x79f)][_0xdcc51a(0x170)](),_0x490a05=_0x52815f[_0xdcc51a(0x8e7)]-(_0x4e1b5b[_0xdcc51a(0x984)]||0xc0),_0x89f33f=this[_0xdcc51a(0x1b4)]()+_0x5ebe51,_0x3aada8=this[_0xdcc51a(0x7a9)]()?0x0:_0x16b5da[_0xdcc51a(0x8e7)]-_0x490a05,_0x5d52ff=_0x19a249[_0xdcc51a(0x73)]-_0x89f33f+_0x5ebe51;return new _0x1a035c(_0x3aada8,_0x5d52ff,_0x490a05,_0x89f33f);}else this['_cache']['svAnchorX']=eval(RegExp['$1']),this[_0xdcc51a(0x183)]['svAnchorY']=eval(RegExp['$2']);}else{if('FoFZZ'!=='FoFZZ'){if(!_0x393f02[_0xdcc51a(0x671)]())return;_0x5b3950[_0xdcc51a(0x96)](_0x10b3f9,_0x26707b);const _0x146f07=_0x1891ec[_0xdcc51a(0x3fb)](),_0x4da53c=_0x527f8a['CreateActionSequenceTargets'](_0x1ea8f9[_0xdcc51a(0x21e)]),_0x975be6=_0x28caee['AnimationID'],_0x165343=_0x5170ad['Mirror'];if(!_0x146f07)return;_0x41a515[_0xdcc51a(0x6c6)](_0x4da53c,_0x975be6,_0x165343);if(_0x100eeb['WaitForAnimation'])_0x146f07[_0xdcc51a(0x58f)]('battleAnimation');}else this['_cache'][_0xdcc51a(0x26f)]=Game_Battler['prototype'][_0xdcc51a(0x169)]['call'](this);}return this[_0xdcc51a(0x183)][_0xdcc51a(0x26f)];},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x67f)]=function(){const _0x48e83f=_0x2546c9;if(this[_0x48e83f(0x183)][_0x48e83f(0x5ee)]!==undefined)return this[_0x48e83f(0x183)][_0x48e83f(0x5ee)];if(this[_0x48e83f(0x97d)]()[_0x48e83f(0x4c1)][_0x48e83f(0x1e0)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x48e83f(0x183)][_0x48e83f(0x5ee)]=!![];else{if(this[_0x48e83f(0x97d)]()['note'][_0x48e83f(0x1e0)](/<SIDEVIEW HIDE SHADOW>/i))this[_0x48e83f(0x183)][_0x48e83f(0x5ee)]=![];else{if(_0x48e83f(0x36f)!=='qooqm'){if(_0x2db487[_0x48e83f(0x5a6)][_0x48e83f(0x5aa)]())return!![];this[_0x48e83f(0x66d)]='';}else this['_cache'][_0x48e83f(0x5ee)]=Game_Battler[_0x48e83f(0x79f)][_0x48e83f(0x67f)][_0x48e83f(0x40c)](this);}}return this['_cache'][_0x48e83f(0x5ee)];},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x4bb)]=function(){const _0x389dcf=_0x2546c9;return VisuMZ[_0x389dcf(0x895)]['Settings'][_0x389dcf(0x99a)][_0x389dcf(0xa52)];},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x117)]=function(){const _0x31ef41=_0x2546c9,_0x4d0c4e=this[_0x31ef41(0xc6)](),_0x162b3c=_0x4d0c4e[0x0]?_0x4d0c4e[0x0]['wtypeId']:0x0,_0x2d6f43=$dataSystem[_0x31ef41(0x97f)][_0x162b3c];if(_0x2d6f43){if(_0x31ef41(0x4ba)==='VvEdu')this['startWeaponAnimation'](_0x2d6f43[_0x31ef41(0xad7)]);else{_0x3c2cd2[_0x31ef41(0x1e0)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x14391e=_0x42712a(_0x47dd67['$1']),_0x269e67=_0x360312(_0x57856b['$2']),_0x4a695a=_0x269e67===0x1?this[_0x31ef41(0x77d)]:this[_0x31ef41(0x187)],_0x23b5cb=_0x520f27(_0x24f127['$3']);_0x4a695a[_0x14391e]=_0x23b5cb;}}},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x6e6)]=function(_0x4bec32){const _0x3e676b=_0x2546c9;Game_Battler[_0x3e676b(0x79f)][_0x3e676b(0x6e6)][_0x3e676b(0x40c)](this,_0x4bec32),this[_0x3e676b(0x3af)](_0x4bec32);},Game_Actor['prototype'][_0x2546c9(0x44f)]=function(){const _0x28af5e=_0x2546c9,_0x254544=this[_0x28af5e(0xc6)](),_0x3db193=_0x254544[0x0]?_0x254544[0x0][_0x28af5e(0x3ec)]:0x0;return $dataSystem[_0x28af5e(0x97f)][_0x3db193];},Game_Actor[_0x2546c9(0x79f)]['attackAnimationIdSlot']=function(_0x39a9de){const _0xa93abd=_0x2546c9;_0x39a9de=_0x39a9de||0x1,_0x39a9de--;const _0x12ce5e=this[_0xa93abd(0xc6)]();return _0x12ce5e[_0x39a9de]?_0x12ce5e[_0x39a9de][_0xa93abd(0x15d)]:0x0;},Game_Actor[_0x2546c9(0x79f)]['getAttackMotionSlot']=function(_0x4c1299){const _0x4e3dd2=_0x2546c9;_0x4c1299=_0x4c1299||0x1,_0x4c1299--;const _0x5d4c5c=this[_0x4e3dd2(0xc6)](),_0x1d7929=_0x5d4c5c[_0x4c1299]?_0x5d4c5c[_0x4c1299]['wtypeId']:0x0;return $dataSystem[_0x4e3dd2(0x97f)][_0x1d7929];},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0xa8a)]=function(_0x52d5a0){const _0x175647=_0x2546c9;_0x52d5a0=_0x52d5a0||0x1,_0x52d5a0--;const _0x5b2203=this[_0x175647(0xc6)](),_0x17f559=_0x5b2203[_0x52d5a0]?_0x5b2203[_0x52d5a0][_0x175647(0x3ec)]:0x0,_0x41e8df=$dataSystem['attackMotions'][_0x17f559];if(_0x41e8df){if(_0x41e8df[_0x175647(0x59f)]===0x0)_0x175647(0x700)===_0x175647(0x5cd)?_0x2a040b?(this[_0x175647(0x401)]['x']=(_0x3709e5[_0x175647(0x9f9)]-_0xd1fecf[_0x175647(0x8e7)])/0x2,this[_0x175647(0x401)]['y']=(_0x50138a['height']-_0x10d7ec[_0x175647(0x73)])/0x2):(this[_0x175647(0x401)]['x']=_0xbb48c[_0x175647(0x9f9)]*0xa,this[_0x175647(0x401)]['y']=_0x89d2d[_0x175647(0x3de)]*0xa):this[_0x175647(0x5a8)](_0x175647(0x921));else{if(_0x41e8df[_0x175647(0x59f)]===0x1)this[_0x175647(0x5a8)]('swing');else _0x41e8df['type']===0x2&&(_0x175647(0xb39)===_0x175647(0x3c7)?_0x280a8a[_0x175647(0x465)]['_statusWindow']['addDamageSprite'](_0x1844f8,this[_0x175647(0xe2)]):this['requestMotion'](_0x175647(0xaff)));}this[_0x175647(0x9e8)](_0x41e8df[_0x175647(0xad7)]);}},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x286)]=function(_0x2b73ca){const _0x52b855=_0x2546c9;this[_0x52b855(0x4b6)]=_0x2b73ca||0x0,this['_cache']={};},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0xa14)]=function(){const _0x328b0e=_0x2546c9;this[_0x328b0e(0x4b6)]=this[_0x328b0e(0x4b6)]||0x0,this[_0x328b0e(0x4b6)]++,this[_0x328b0e(0x183)]={};},Game_Battler[_0x2546c9(0x79f)][_0x2546c9(0x687)]=function(){const _0x27d04e=_0x2546c9;this[_0x27d04e(0x4b6)]=undefined,this[_0x27d04e(0x183)]={};},VisuMZ['BattleCore'][_0x2546c9(0x160)]=Game_Actor['prototype'][_0x2546c9(0x284)],Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x284)]=function(){const _0x5d32e3=_0x2546c9;let _0x2a6d2e=VisuMZ[_0x5d32e3(0x895)][_0x5d32e3(0x160)][_0x5d32e3(0x40c)](this);if(this[_0x5d32e3(0x6d5)])return _0x2a6d2e;if(this[_0x5d32e3(0x4b6)]!==undefined){if(_0x5d32e3(0x2b9)!==_0x5d32e3(0x830)){this[_0x5d32e3(0x6d5)]=!![];const _0xcc8f26=this['equipSlots']();for(let _0x588324=0x0;_0x588324<_0xcc8f26[_0x5d32e3(0x4ce)];_0x588324++){_0xcc8f26[_0x588324]===0x1&&this[_0x5d32e3(0x4b6)]!==_0x588324&&(_0x2a6d2e[_0x588324]=null);}this[_0x5d32e3(0x6d5)]=undefined;}else _0x49a845[_0x5d32e3(0x895)][_0x5d32e3(0x419)][_0x5d32e3(0x40c)](this),this['initBattleCore']();}return _0x2a6d2e;},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x29e)]=function(_0x1912a8){const _0x43c1f4=_0x2546c9;return _0x1912a8[_0x43c1f4(0x55e)]()?_0x1912a8[_0x43c1f4(0xc6)]()[_0x43c1f4(0x4ce)]||0x1:'ponVK'===_0x43c1f4(0x38f)?0x1:_0x2d6087['isSceneBattle']()?_0x373211[_0x43c1f4(0x465)][_0x43c1f4(0x5a6)][_0x43c1f4(0x69)]:this[_0x43c1f4(0x59a)];},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xb13)]=function(_0x5dcf2a,_0x2c2870){const _0x438a44=_0x2546c9;_0x5dcf2a&&_0x5dcf2a['isActor']()&&(_0x438a44(0x2b0)!==_0x438a44(0x2b0)?_0x4cb9da[_0x438a44(0x93c)](_0x112516[_0x438a44(0x255)]):_0x5dcf2a[_0x438a44(0x286)](_0x2c2870)),this[_0x438a44(0x839)]();},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x9d5)]=function(_0x39a40b){const _0x30d496=_0x2546c9;_0x39a40b&&_0x39a40b[_0x30d496(0x55e)]()&&(_0x30d496(0xa57)!==_0x30d496(0xa57)?(this['_distortionSprite'][_0x30d496(0x969)]['x']=this['_targetSkewX'],this['_distortionSprite']['skew']['y']=this[_0x30d496(0x22b)]):_0x39a40b['clearActiveWeaponSlot']()),this['callNextMethod']();},Game_Actor['prototype'][_0x2546c9(0x6db)]=function(){const _0x50d3cb=_0x2546c9;let _0x9e1315=_0x50d3cb(0x6db);if(this[_0x50d3cb(0x67e)](_0x9e1315))return this['_cache'][_0x9e1315];return this[_0x50d3cb(0x183)][_0x9e1315]=this['createBattleUIOffsetX'](this[_0x50d3cb(0x97d)]()),this[_0x50d3cb(0x183)][_0x9e1315];},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x4b9)]=function(){const _0x1c7cad=_0x2546c9;let _0x4f0fa4='battleUIOffsetY';if(this[_0x1c7cad(0x67e)](_0x4f0fa4))return this[_0x1c7cad(0x183)][_0x4f0fa4];return this['_cache'][_0x4f0fa4]=this['createBattleUIOffsetY'](this['actor']()),this['_cache'][_0x4f0fa4];},VisuMZ[_0x2546c9(0x895)]['Game_Enemy_setup']=Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x47e)],Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x47e)]=function(_0x46e592,_0x380e0b,_0x387302){const _0x4a5a68=_0x2546c9;_0x46e592=DataManager['swapEnemyIDs'](_0x46e592),VisuMZ[_0x4a5a68(0x895)][_0x4a5a68(0x7c5)][_0x4a5a68(0x40c)](this,_0x46e592,_0x380e0b,_0x387302),Imported[_0x4a5a68(0xb4d)]&&this[_0x4a5a68(0x120)](),this['clearBattleCoreData'](),this['setupBattleCoreData'](),Imported[_0x4a5a68(0xb4d)]&&this[_0x4a5a68(0xae8)]();},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0xace)]=function(){const _0x1cc9ed=_0x2546c9,_0x2189d5=VisuMZ['BattleCore'][_0x1cc9ed(0x4b7)]['Enemy'];this['_attackAnimationId']=_0x2189d5[_0x1cc9ed(0x365)],this[_0x1cc9ed(0x9a5)]={};},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x392)]=function(){const _0x695d94=_0x2546c9,_0x58e7d0=VisuMZ[_0x695d94(0x895)]['Settings'][_0x695d94(0x862)],_0x3421cd=this[_0x695d94(0x951)]()[_0x695d94(0x4c1)];this[_0x695d94(0x9a5)]={'name':'','wtypeId':_0x58e7d0[_0x695d94(0x922)],'collapse':_0x58e7d0['AllowCollapse'],'motionIdle':_0x58e7d0[_0x695d94(0x83c)],'width':_0x58e7d0[_0x695d94(0xb30)]||0x40,'height':_0x58e7d0[_0x695d94(0x6fe)]||0x40,'anchorX':_0x58e7d0[_0x695d94(0x72c)]||0x0,'anchorY':_0x58e7d0[_0x695d94(0x220)]||0x0,'shadow':_0x58e7d0[_0x695d94(0x32c)]};_0x3421cd[_0x695d94(0x1e0)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x695d94(0x7fa)]=Number(RegExp['$1']));const _0x264994=this[_0x695d94(0x9a5)];if(_0x3421cd[_0x695d94(0x1e0)](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x695d94(0x3b7)!=='SKDZY')_0x264994['name']=String(RegExp['$1']);else{const _0x3c568b=_0x8c5f16[_0x695d94(0x895)][_0x695d94(0x4b7)]['ActionSequence'],_0x20473f=_0x3c568b[_0x695d94(0x8b)],_0x17918d=_0x3c568b[_0x695d94(0x582)],_0xcd050a=_0x3c568b['StepDuration'];this['startMove'](_0x20473f,_0x17918d,_0xcd050a);}}else{if(_0x3421cd[_0x695d94(0x1e0)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if('NRvqo'!==_0x695d94(0x111)){if(!_0x5c2696[_0x695d94(0x671)]())return;if(!_0x3ef475[_0x695d94(0x87b)])return;_0x581310[_0x695d94(0x96)](_0x9bc1c3,_0x200266);const _0x155fce=_0x5ca5f3[_0x695d94(0x3fb)](),_0x2dc3d9=_0xd63ee6[_0x695d94(0x47a)];_0x56e9fe['setBattleCameraPoint'](_0xfdccd['FocusX'],_0x1cb378[_0x695d94(0xa7d)],_0x2a621f[_0x695d94(0xa6a)],_0x4511d7['EasingType']);if(_0x2dc3d9)_0x155fce['setWaitMode']('battleCamera');}else{const _0x587d14=String(RegExp['$1'])[_0x695d94(0x24d)](/[\r\n]+/)[_0x695d94(0x8ad)]('');_0x264994[_0x695d94(0x395)]=DataManager[_0x695d94(0x4ef)](_0x587d14);}}}_0x3421cd[_0x695d94(0x1e0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x695d94(0xa36)!==_0x695d94(0x67a)?(_0x264994[_0x695d94(0x74e)]=eval(RegExp['$1']),_0x264994[_0x695d94(0x5ae)]=eval(RegExp['$2'])):this[_0x695d94(0x5a8)](_0x695d94(0x2fb)));if(_0x3421cd['match'](/<SIDEVIEW COLLAPSE>/i))_0x264994[_0x695d94(0x2e7)]=!![];else _0x3421cd[_0x695d94(0x1e0)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x264994[_0x695d94(0x2e7)]=![]);if(_0x3421cd[_0x695d94(0x1e0)](/<SIDEVIEW SHOW SHADOW>/i))_0x264994[_0x695d94(0x197)]=!![];else{if(_0x3421cd[_0x695d94(0x1e0)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x695d94(0x229)!==_0x695d94(0x229)){const _0x303f09=this[_0x695d94(0x908)]();if(_0x303f09&&this['opacity']<0xff)this[_0x695d94(0x3fc)]+=0x10;else!_0x303f09&&this[_0x695d94(0x3fc)]>0x0&&(this[_0x695d94(0x3fc)]-=0x10);}else _0x264994['shadow']=![];}}if(_0x3421cd[_0x695d94(0x1e0)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x264994['motionIdle']=String(RegExp['$1'])['toLowerCase']()[_0x695d94(0xb19)]();else{if(_0x3421cd['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x695d94(0x742)!==_0x695d94(0x293)){const _0x41643c=String(RegExp['$1'])[_0x695d94(0x24d)](/[\r\n]+/)[_0x695d94(0x8ad)]('');_0x264994[_0x695d94(0x66e)]=DataManager[_0x695d94(0x4ef)](_0x41643c);}else this[_0x695d94(0x596)]=this[_0x695d94(0x596)]||[];}}_0x3421cd['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x264994[_0x695d94(0x9f9)]=Number(RegExp['$1']),_0x264994[_0x695d94(0x3de)]=Number(RegExp['$2']));if(_0x3421cd['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x264994[_0x695d94(0x3ec)]=DataManager[_0x695d94(0x5af)](RegExp['$1']);else{if(_0x3421cd[_0x695d94(0x1e0)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x1dd722=String(RegExp['$1'])[_0x695d94(0x24d)](/[\r\n]+/)[_0x695d94(0x8ad)](''),_0x45f51d=DataManager[_0x695d94(0x4ef)](_0x1dd722);_0x264994[_0x695d94(0x3ec)]=DataManager[_0x695d94(0x5af)](_0x45f51d);}}if(Imported[_0x695d94(0xb4d)]){const _0x217398=this['getTraitSetKeys']();for(const _0x53be17 of _0x217398){const _0x3edd41=this[_0x695d94(0x35c)](_0x53be17)[_0x695d94(0x38d)][_0x695d94(0x13e)]()[_0x695d94(0xb19)](),_0x536a9a=_0x53be17[_0x695d94(0x13e)]()[_0x695d94(0xb19)]();if(_0x3421cd['match'](VisuMZ[_0x695d94(0x961)][_0x695d94(0x65d)][_0x695d94(0xa3f)['format'](_0x536a9a,_0x3edd41)])){if(_0x695d94(0x516)===_0x695d94(0x473))return[_0x695d94(0x8f4),_0x695d94(0x2fb),_0x695d94(0x224)]['includes'](this['_actorCommandWindow']['currentSymbol']());else _0x264994['name']=String(RegExp['$1']);}else{if(_0x3421cd['match'](VisuMZ['ElementStatusCore'][_0x695d94(0x65d)][_0x695d94(0x6f8)[_0x695d94(0xa3e)](_0x536a9a,_0x3edd41)])){const _0x3fcff3=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x695d94(0x8ad)]('');_0x264994[_0x695d94(0x395)]=DataManager[_0x695d94(0x4ef)](_0x3fcff3);}}if(_0x3421cd[_0x695d94(0x1e0)](VisuMZ[_0x695d94(0x961)][_0x695d94(0x65d)][_0x695d94(0x5d8)[_0x695d94(0xa3e)](_0x536a9a,_0x3edd41)])){if('OAlCR'!==_0x695d94(0x9f4)){const _0x5c0a0f=this[_0x695d94(0xc6)]();_0x5b450c=_0x5c0a0f[_0xb842c8]?_0x5c0a0f[_0x4a7643][_0x695d94(0x3ec)]:0x0;}else _0x264994[_0x695d94(0x3ec)]=DataManager[_0x695d94(0x5af)](RegExp['$1']);}else{if(_0x3421cd[_0x695d94(0x1e0)](VisuMZ[_0x695d94(0x961)]['RegExp'][_0x695d94(0x598)[_0x695d94(0xa3e)](_0x536a9a,_0x3edd41)])){if(_0x695d94(0x1e1)!==_0x695d94(0x1e1))this[_0x695d94(0xaab)]=null;else{const _0x845be2=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x695d94(0x8ad)](''),_0x59ddb4=DataManager[_0x695d94(0x4ef)](_0x845be2);_0x264994[_0x695d94(0x3ec)]=DataManager[_0x695d94(0x5af)](_0x59ddb4);}}}if(_0x3421cd[_0x695d94(0x1e0)](VisuMZ[_0x695d94(0x961)][_0x695d94(0x65d)][_0x695d94(0x430)[_0x695d94(0xa3e)](_0x536a9a,_0x3edd41)])){if(_0x695d94(0x6f)===_0x695d94(0x718)){if(!_0x5eb9e5['isSceneBattle']())return;_0x61804b[_0x695d94(0x96)](_0x56acb1,_0x384ae4);const _0xdc4d09=_0xc499a3[_0x695d94(0x3fb)](),_0x434f18=_0xe9feee[_0x695d94(0x41d)],_0x22d2e4=_0x112621[_0x695d94(0x2ed)](_0xf7d790[_0x695d94(0x21e)]),_0x1c6e58=_0x5b87cf[_0x695d94(0x4d6)],_0x1ab985=_0x5ef0f7[_0x695d94(0x8e5)];if(!_0xdc4d09||!_0x434f18)return;const _0x2e53e3=_0x434f18[_0x695d94(0x8b0)]();_0x213b9f[_0x695d94(0x6c6)](_0x22d2e4,_0x2e53e3,_0x1c6e58),_0x12a8a4[_0x695d94(0x727)]&&_0xdc4d09[_0x695d94(0x58f)](_0x695d94(0x128));}else _0x264994[_0x695d94(0x66e)]=String(RegExp['$1'])['toLowerCase']()[_0x695d94(0xb19)]();}else{if(_0x3421cd[_0x695d94(0x1e0)](VisuMZ[_0x695d94(0x961)][_0x695d94(0x65d)]['SvMotionIdleMass-%1-%2'['format'](_0x536a9a,_0x3edd41)])){if(_0x695d94(0x2fc)==='cCRHa')this[_0x695d94(0x40b)](_0x695d94(0x5bc),_0x47c629);else{const _0x109af4=String(RegExp['$1'])[_0x695d94(0x24d)](/[\r\n]+/)['remove']('');_0x264994[_0x695d94(0x66e)]=DataManager['processRandomizedData'](_0x109af4);}}}}}},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x8b0)]=function(){const _0x5863d9=_0x2546c9;return this[_0x5863d9(0x7fa)]||0x0;},Game_Enemy['prototype'][_0x2546c9(0x429)]=function(){return this['attackAnimationId1']();},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x494)]=function(_0x32de56){const _0x53ded0=_0x2546c9;return this[_0x53ded0(0x8b0)]();},Game_Enemy[_0x2546c9(0x79f)]['canBattlerMove']=function(){const _0x36ce9a=_0x2546c9;if(this[_0x36ce9a(0x951)]()[_0x36ce9a(0x4c1)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x36ce9a(0x8a5)][_0x36ce9a(0x40c)](this);},Game_Enemy['prototype'][_0x2546c9(0x3c0)]=function(){const _0x214eb9=_0x2546c9;if(this[_0x214eb9(0x951)]()[_0x214eb9(0x4c1)][_0x214eb9(0x1e0)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x9b2)]=function(){const _0xae14eb=_0x2546c9,_0x2fdea4=[];for(const _0x4e934b of this[_0xae14eb(0x951)]()[_0xae14eb(0x3ad)]){const _0x5a0c1d=$dataSkills[_0x4e934b[_0xae14eb(0x2df)]];if(_0x5a0c1d&&!_0x2fdea4[_0xae14eb(0xa7e)](_0x5a0c1d))_0x2fdea4[_0xae14eb(0x40b)](_0x5a0c1d);}return _0x2fdea4;},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x6db)]=function(){const _0x285298=_0x2546c9;let _0x44a503=_0x285298(0x6db);if(this[_0x285298(0x67e)](_0x44a503))return this[_0x285298(0x183)][_0x44a503];return this[_0x285298(0x183)][_0x44a503]=this['createBattleUIOffsetX'](this[_0x285298(0x951)]()),this['_cache'][_0x44a503];},Game_Enemy[_0x2546c9(0x79f)]['battleUIOffsetY']=function(){const _0x5488dc=_0x2546c9;let _0x339510=_0x5488dc(0x4b9);if(this[_0x5488dc(0x67e)](_0x339510))return this[_0x5488dc(0x183)][_0x339510];return this[_0x5488dc(0x183)][_0x339510]=this[_0x5488dc(0x94e)](this[_0x5488dc(0x951)]()),this[_0x5488dc(0x183)][_0x339510];},Game_Enemy['prototype'][_0x2546c9(0x425)]=function(){const _0x2d032b=_0x2546c9;if(this[_0x2d032b(0x9a5)]!==undefined)return this['_svBattlerData'];return this['setupBattleCoreData'](),this[_0x2d032b(0x9a5)];},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x947)]=function(){const _0x21c369=_0x2546c9;return this[_0x21c369(0x425)]()[_0x21c369(0x395)]!=='';},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0xac9)]=function(){const _0x5e7ee0=_0x2546c9;return this[_0x5e7ee0(0x425)]()[_0x5e7ee0(0x395)];},Game_Enemy['prototype'][_0x2546c9(0x4bb)]=function(){const _0x4d0d0e=_0x2546c9;if(this[_0x4d0d0e(0x947)]())return VisuMZ[_0x4d0d0e(0x895)][_0x4d0d0e(0x4b7)]['Actor'][_0x4d0d0e(0xa52)];else{if(_0x4d0d0e(0xaae)!==_0x4d0d0e(0x71b))return VisuMZ[_0x4d0d0e(0x895)]['Settings'][_0x4d0d0e(0x862)][_0x4d0d0e(0xa52)];else this[_0x4d0d0e(0x767)](_0x4d0d0e(0x2fb));}},Game_Enemy[_0x2546c9(0x79f)]['performAction']=function(_0x16e789){const _0x48a9ec=_0x2546c9;Game_Battler['prototype'][_0x48a9ec(0x6e6)][_0x48a9ec(0x40c)](this,_0x16e789);if(this['hasSvBattler']())this[_0x48a9ec(0x3af)](_0x16e789);},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x211)]=function(){const _0x37a6bf=_0x2546c9,_0x401e2c=this['svBattlerData']()[_0x37a6bf(0x3ec)]||0x0,_0x1923aa=$dataSystem[_0x37a6bf(0x97f)][_0x401e2c];if(_0x1923aa){if(_0x1923aa['type']===0x0)'vzVyb'===_0x37a6bf(0x45d)?(_0x568a0a=_0x127f34['boxWidth']/0x2,_0x3643b5=_0x23aa93[_0x37a6bf(0x73)]/0x2):this['requestMotion']('thrust');else{if(_0x1923aa[_0x37a6bf(0x59f)]===0x1)this[_0x37a6bf(0x5a8)](_0x37a6bf(0x6cd));else _0x1923aa[_0x37a6bf(0x59f)]===0x2&&(_0x37a6bf(0x75e)===_0x37a6bf(0x75e)?this[_0x37a6bf(0x5a8)](_0x37a6bf(0xaff)):_0x52f44f-=_0x4882e9[_0x37a6bf(0x617)]()/0x2);}}},Game_Enemy[_0x2546c9(0x79f)]['performWeaponAnimation']=function(){const _0x113c4c=_0x2546c9,_0x3efcfa=this[_0x113c4c(0x425)]()[_0x113c4c(0x3ec)]||0x0,_0x22d8e5=$dataSystem[_0x113c4c(0x97f)][_0x3efcfa];if(_0x22d8e5){if(_0x113c4c(0x166)===_0x113c4c(0x6b)){if(!this[_0x113c4c(0x2fe)]())return;const _0x15a166=this[_0x113c4c(0x952)](),_0x329dbf=_0xf382f5[_0x113c4c(0x895)]['Settings'][_0x113c4c(0x1a3)][_0x113c4c(0x5bb)],_0x40673b=_0x15a166===_0x113c4c(0x388)?_0x1f16b8[_0x113c4c(0x1b3)]:'\x5cI[%1]%2'['format'](_0x329dbf,_0x1a57df['autoBattle']),_0x545310=this[_0x113c4c(0x485)]();this[_0x113c4c(0x9ee)](_0x40673b,_0x113c4c(0x1b3),_0x545310);}else this['startWeaponAnimation'](_0x22d8e5[_0x113c4c(0xad7)]);}},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x44f)]=function(){const _0x4f2061=_0x2546c9,_0x3c495d=this[_0x4f2061(0x425)]()[_0x4f2061(0x3ec)]||0x0;return $dataSystem[_0x4f2061(0x97f)][_0x3c495d];},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0xb3a)]=function(_0x393b2d){return this['getAttackMotion']();},Game_Enemy['prototype'][_0x2546c9(0x5bc)]=function(){const _0x1c74c5=_0x2546c9;Game_Battler[_0x1c74c5(0x79f)][_0x1c74c5(0x5bc)][_0x1c74c5(0x40c)](this);if(this[_0x1c74c5(0x935)]()&&this[_0x1c74c5(0x947)]()){if('agrOu'==='agrOu')this[_0x1c74c5(0x5a8)]('damage');else return![];}SoundManager[_0x1c74c5(0x106)]();},Game_Enemy['prototype']['performEvasion']=function(){const _0xbc4c15=_0x2546c9;Game_Battler[_0xbc4c15(0x79f)][_0xbc4c15(0xaec)][_0xbc4c15(0x40c)](this),this[_0xbc4c15(0x5a8)](_0xbc4c15(0x903));},Game_Enemy['prototype'][_0x2546c9(0x8fe)]=function(){const _0x1cc7f8=_0x2546c9;Game_Battler['prototype']['performMagicEvasion']['call'](this),this[_0x1cc7f8(0x5a8)]('evade');},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x5cc)]=function(){const _0x425b46=_0x2546c9;Game_Battler[_0x425b46(0x79f)]['performCounter']['call'](this),this[_0x425b46(0x211)]();},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x781)]=function(){const _0x6e5ebd=_0x2546c9;if(this[_0x6e5ebd(0x947)]()){if(this[_0x6e5ebd(0x76c)]()>=0x1)return!![];return this['svBattlerData']()[_0x6e5ebd(0x2e7)];}else return!![];},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x914)]=function(){const _0x568961=_0x2546c9;return this[_0x568961(0x425)]()[_0x568961(0x74e)];},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x169)]=function(){const _0x6a28e8=_0x2546c9;return this[_0x6a28e8(0x425)]()[_0x6a28e8(0x5ae)];},Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x67f)]=function(){const _0x21f392=_0x2546c9;return this[_0x21f392(0x425)]()[_0x21f392(0x197)];},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x340)]=Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0xa2)],Game_Enemy[_0x2546c9(0x79f)][_0x2546c9(0xa2)]=function(_0xf1d2e6){const _0x229f77=_0x2546c9;VisuMZ[_0x229f77(0x895)][_0x229f77(0x340)][_0x229f77(0x40c)](this,_0xf1d2e6),this['clearBattleCoreData'](),this[_0x229f77(0x392)]();const _0x38acd7=this[_0x229f77(0x2dc)]();if(_0x38acd7)_0x38acd7[_0x229f77(0x806)](this);},Game_Unit[_0x2546c9(0x79f)][_0x2546c9(0x133)]=function(_0x915751){const _0x244f06=_0x2546c9;for(const _0xd0fc98 of this['members']()){if(_0xd0fc98)_0xd0fc98[_0x244f06(0x133)](_0x915751);}},Game_Unit[_0x2546c9(0x79f)][_0x2546c9(0x799)]=function(){const _0xfd6684=_0x2546c9,_0xf29480=this[_0xfd6684(0x332)]();return _0xf29480[Math[_0xfd6684(0x66)](_0xf29480[_0xfd6684(0x4ce)])];},VisuMZ[_0x2546c9(0x895)]['Game_Party_addActor']=Game_Party[_0x2546c9(0x79f)][_0x2546c9(0x58d)],Game_Party[_0x2546c9(0x79f)][_0x2546c9(0x58d)]=function(_0x1c14e5){const _0x4d08c3=_0x2546c9;VisuMZ[_0x4d08c3(0x895)]['Game_Party_addActor'][_0x4d08c3(0x40c)](this,_0x1c14e5),BattleManager[_0x4d08c3(0xa67)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x65)]=Game_Party[_0x2546c9(0x79f)][_0x2546c9(0xa73)],Game_Party[_0x2546c9(0x79f)][_0x2546c9(0xa73)]=function(_0x4102a4){const _0x273926=_0x2546c9;VisuMZ[_0x273926(0x895)][_0x273926(0x65)]['call'](this,_0x4102a4),BattleManager['refreshStatusWindow']();},VisuMZ[_0x2546c9(0x895)]['Game_Troop_setup']=Game_Troop[_0x2546c9(0x79f)][_0x2546c9(0x47e)],Game_Troop[_0x2546c9(0x79f)]['setup']=function(_0x52d6ad){const _0x5d0003=_0x2546c9;$gameTemp[_0x5d0003(0xd6)](),$gameTemp[_0x5d0003(0x375)](_0x52d6ad),VisuMZ[_0x5d0003(0x895)]['Game_Troop_setup'][_0x5d0003(0x40c)](this,_0x52d6ad),this[_0x5d0003(0xaeb)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x758)]=Game_Troop[_0x2546c9(0x79f)][_0x2546c9(0x3b1)],Game_Troop[_0x2546c9(0x79f)]['expTotal']=function(){const _0x367af6=_0x2546c9;let _0xcf8968=VisuMZ[_0x367af6(0x895)]['Game_Troop_expTotal'][_0x367af6(0x40c)](this);return this['expRate']&&(_0xcf8968*=this[_0x367af6(0x71a)]()),Math['ceil'](_0xcf8968);},Game_Troop[_0x2546c9(0x79f)][_0x2546c9(0x71a)]=function(){return 0x1;},Game_Troop[_0x2546c9(0x79f)][_0x2546c9(0xaeb)]=function(){const _0x3ae2de=_0x2546c9,_0x34a0ac=this['troop']()['name']||'';if(_0x34a0ac[_0x3ae2de(0x1e0)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x2da1f1=RegExp['$1']['split'](',')['map'](_0x16c69e=>Number(_0x16c69e));this[_0x3ae2de(0x7f6)](),this[_0x3ae2de(0x90e)](_0x2da1f1);}},Game_Troop['prototype'][_0x2546c9(0x7f6)]=function(){const _0x542cae=_0x2546c9;let _0x5a0188='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x5a0188+=_0x542cae(0x652);if(Imported[_0x542cae(0x190)]){if(VisuMZ[_0x542cae(0x1d1)]['version']<1.11){if(_0x542cae(0xa54)===_0x542cae(0xa54))alert(_0x5a0188[_0x542cae(0xa3e)](_0x542cae(0x565))),SceneManager[_0x542cae(0x510)]();else{if(this[_0x542cae(0x951)]()[_0x542cae(0x4c1)][_0x542cae(0x1e0)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return _0x305851[_0x542cae(0x79f)][_0x542cae(0x8a5)][_0x542cae(0x40c)](this);}}}Imported[_0x542cae(0xaa9)]&&(_0x542cae(0x409)!==_0x542cae(0x489)?VisuMZ[_0x542cae(0x78d)][_0x542cae(0xa05)]<1.19&&(alert(_0x5a0188[_0x542cae(0xa3e)](_0x542cae(0xa55))),SceneManager['exit']()):_0x3b6dc4[_0x542cae(0x40b)](new _0x33be48(_0x3599b3))),Imported[_0x542cae(0x739)]&&(_0x542cae(0x745)==='ZfllD'?VisuMZ[_0x542cae(0x279)][_0x542cae(0xa05)]<1.15&&(alert(_0x5a0188[_0x542cae(0xa3e)](_0x542cae(0x40d))),SceneManager['exit']()):_0x80d13c[_0x542cae(0x2d4)](_0x159b97));},Game_Troop[_0x2546c9(0x79f)][_0x2546c9(0x90e)]=function(_0x2a7450){const _0xb49a93=_0x2546c9;this['_namesCount']={};for(const _0x3a593a of this[_0xb49a93(0x930)]()){if(_0xb49a93(0x161)!==_0xb49a93(0x161))this[_0xb49a93(0x767)]('wait');else{if(!_0x3a593a)continue;_0x3a593a[_0xb49a93(0x7b4)]('');}}for(const _0x46a07e of _0x2a7450){const _0x54a742=$dataTroops[_0x46a07e];if(_0x54a742)this[_0xb49a93(0x87e)](_0x54a742);}this['makeUniqueNames']();},Game_Troop[_0x2546c9(0x79f)]['addExtendedTroopMembers']=function(_0x25da91){const _0x42fd6c=_0x2546c9;for(const _0x400fa8 of _0x25da91[_0x42fd6c(0x930)]){if(_0x42fd6c(0x31c)!=='pkyIz'){if($dataEnemies[_0x400fa8[_0x42fd6c(0x8af)]]){if(_0x42fd6c(0x610)!==_0x42fd6c(0x927)){const _0x51d984=_0x400fa8[_0x42fd6c(0x8af)],_0x421d65=_0x400fa8['x'],_0x2f6a9a=_0x400fa8['y'],_0x4d2dcf=new Game_Enemy(_0x51d984,_0x421d65,_0x2f6a9a);_0x400fa8[_0x42fd6c(0x782)]&&_0x4d2dcf[_0x42fd6c(0xb16)](),this[_0x42fd6c(0x628)][_0x42fd6c(0x40b)](_0x4d2dcf);}else _0x2c5bf3['push'](_0x42fd6c(0x380),_0x10a0aa,_0x5a26b8,!![]);}}else return!![];}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x989)]=Game_Map['prototype']['setupBattleback'],Game_Map[_0x2546c9(0x79f)][_0x2546c9(0x97b)]=function(){const _0x50b484=_0x2546c9;VisuMZ[_0x50b484(0x895)][_0x50b484(0x989)][_0x50b484(0x40c)](this),this[_0x50b484(0xee)]();},Game_Map[_0x2546c9(0x79f)][_0x2546c9(0xee)]=function(){const _0x4f6e62=_0x2546c9;this['_regionBattleback1']={},this[_0x4f6e62(0x187)]={};if(!$dataMap)return;const _0x388f51=$dataMap['note'];if(!_0x388f51)return;const _0x29aeb4=_0x388f51[_0x4f6e62(0x1e0)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x29aeb4)for(const _0x5f1241 of _0x29aeb4){if(_0x4f6e62(0x64c)!=='ekHvr')_0x16e4f8=_0x1e1524[this[_0x4f6e62(0x466)][_0x3f8cbb][_0x4f6e62(0x101)]];else{_0x5f1241[_0x4f6e62(0x1e0)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x2bdba6=Number(RegExp['$1']),_0x5bf868=Number(RegExp['$2']),_0x14b218=_0x5bf868===0x1?this[_0x4f6e62(0x77d)]:this[_0x4f6e62(0x187)],_0x3c0440=String(RegExp['$3']);_0x14b218[_0x2bdba6]=_0x3c0440;}}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x7d2)]=Game_Map[_0x2546c9(0x79f)][_0x2546c9(0x3e5)],Game_Map['prototype']['battleback1Name']=function(){const _0x3842a1=_0x2546c9;if(!BattleManager[_0x3842a1(0x2cf)]()){if(_0x3842a1(0x2dd)===_0x3842a1(0x2dd)){const _0x1eaffc=$gamePlayer[_0x3842a1(0x5ec)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3842a1(0x77d)]&&this[_0x3842a1(0x77d)][_0x1eaffc])return this[_0x3842a1(0x77d)][_0x1eaffc];}else{const _0x47bf67=new _0x5a20d0();_0x47bf67['bitmap']=_0x31eb73[_0x3842a1(0xa70)](_0x432719['StatusWindowAttachmentFront']),_0x47bf67['x']=_0x3aabab[_0x3842a1(0x85e)]||0x0,_0x47bf67['y']=_0x3d7363[_0x3842a1(0x390)]||0x0,this[_0x3842a1(0x8c8)](_0x47bf67),this['_frontAttachmentSprite']=_0x47bf67;}}return VisuMZ[_0x3842a1(0x895)][_0x3842a1(0x7d2)]['call'](this);},VisuMZ['BattleCore'][_0x2546c9(0x666)]=Game_Map[_0x2546c9(0x79f)]['battleback2Name'],Game_Map[_0x2546c9(0x79f)]['battleback2Name']=function(){const _0x58af02=_0x2546c9;if(!BattleManager[_0x58af02(0x2cf)]()){if(_0x58af02(0x531)===_0x58af02(0x531)){const _0x44f88c=$gamePlayer[_0x58af02(0x5ec)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x58af02(0x77d)]&&this[_0x58af02(0x187)][_0x44f88c]){if(_0x58af02(0x5b3)!=='cECHK')_0x3a7fb6[_0x58af02(0x895)][_0x58af02(0xef)][_0x58af02(0x40c)](this),this['_actionBattlers']=this[_0x58af02(0x52c)][_0x58af02(0xae4)](_0x7ad6c3=>_0x7ad6c3&&_0x7ad6c3[_0x58af02(0xab4)]());else return this['_regionBattleback2'][_0x44f88c];}}else this[_0x58af02(0x9bf)]['addChild'](this[_0x58af02(0x451)]);}return VisuMZ[_0x58af02(0x895)][_0x58af02(0x666)][_0x58af02(0x40c)](this);},VisuMZ[_0x2546c9(0x895)]['Game_Map_encounterList']=Game_Map[_0x2546c9(0x79f)]['encounterList'],Game_Map[_0x2546c9(0x79f)][_0x2546c9(0x131)]=function(){const _0x65a460=_0x2546c9;let _0x6a74a9=JsonEx[_0x65a460(0x785)](VisuMZ['BattleCore']['Game_Map_encounterList'][_0x65a460(0x40c)](this));return VisuMZ[_0x65a460(0x895)][_0x65a460(0x9b8)](_0x6a74a9);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x9b8)]=function(_0x4303fd){const _0x1272ef=_0x2546c9;var _0x547474,_0x353b42,_0x365325;for(_0x365325=_0x4303fd['length']-0x1;_0x365325>0x0;_0x365325--){_0x547474=Math[_0x1272ef(0x296)](Math[_0x1272ef(0x6cc)]()*(_0x365325+0x1)),_0x353b42=_0x4303fd[_0x365325],_0x4303fd[_0x365325]=_0x4303fd[_0x547474],_0x4303fd[_0x547474]=_0x353b42;}return _0x4303fd;},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x7be)]=Game_Interpreter[_0x2546c9(0x79f)]['command357'],Game_Interpreter[_0x2546c9(0x79f)][_0x2546c9(0xafc)]=function(_0x162a94){const _0x4cf1f8=_0x2546c9;return $gameTemp[_0x4cf1f8(0x93b)](this),VisuMZ[_0x4cf1f8(0x895)]['Game_Interpreter_PluginCommand'][_0x4cf1f8(0x40c)](this,_0x162a94);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xb0b)]=Game_Interpreter['prototype'][_0x2546c9(0x64e)],Game_Interpreter['prototype']['updateWaitMode']=function(){const _0x51ffea=_0x2546c9;if(SceneManager[_0x51ffea(0x671)]())switch(this['_waitMode']){case _0x51ffea(0x6ab):if(Imported[_0x51ffea(0x87b)]){if($gameScreen['battleCameraData']()[_0x51ffea(0x577)]>0x0)return!![];this[_0x51ffea(0x66d)]='';}break;case _0x51ffea(0x128):if(BattleManager[_0x51ffea(0x5a6)][_0x51ffea(0x51e)]())return!![];this[_0x51ffea(0x66d)]='';break;case'battleCamera':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x51ffea(0xb2e)]()[_0x51ffea(0x890)]>0x0)return!![];if($gameScreen[_0x51ffea(0xb2e)]()['cameraOffsetDuration']>0x0)return!![];this[_0x51ffea(0x66d)]='';}break;case _0x51ffea(0x796):if(BattleManager[_0x51ffea(0x5a6)][_0x51ffea(0x137)]())return!![];this['_waitMode']='';break;case _0x51ffea(0x4db):if(BattleManager['_spriteset'][_0x51ffea(0x7d8)]())return!![];this[_0x51ffea(0x66d)]='';break;case _0x51ffea(0x113):if(BattleManager['_spriteset'][_0x51ffea(0x4f5)]())return!![];this[_0x51ffea(0x66d)]='';break;case _0x51ffea(0x1d2):if(BattleManager[_0x51ffea(0x8e5)][_0x51ffea(0x303)]())return!![];this[_0x51ffea(0x66d)]='';break;case _0x51ffea(0xa6e):if(BattleManager[_0x51ffea(0x5a6)]['isAnyoneMoving']())return!![];this['_waitMode']='';break;case _0x51ffea(0x9bd):if(BattleManager[_0x51ffea(0x5a6)]['isAnyoneChangingOpacity']())return!![];this[_0x51ffea(0x66d)]='';break;case'battleGrow':if(BattleManager[_0x51ffea(0x5a6)][_0x51ffea(0x4fa)]())return!![];this[_0x51ffea(0x66d)]='';break;case _0x51ffea(0xad3):if(BattleManager[_0x51ffea(0x5a6)][_0x51ffea(0x9d9)]())return!![];this[_0x51ffea(0x66d)]='';break;case _0x51ffea(0x676):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager[_0x51ffea(0x5a6)][_0x51ffea(0x9eb)]())return!![];this['_waitMode']='';}break;case _0x51ffea(0x3a6):if(Imported[_0x51ffea(0x87b)]){if($gameScreen[_0x51ffea(0xb2e)]()[_0x51ffea(0x5c8)]>0x0)return!![];this[_0x51ffea(0x66d)]='';}break;case _0x51ffea(0x647):if(BattleManager['_spriteset'][_0x51ffea(0x44b)]())return!![];this[_0x51ffea(0x66d)]='';break;case _0x51ffea(0x5f6):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen['battleCameraData']()[_0x51ffea(0x228)]>0x0)return!![];this['_waitMode']='';}break;case'battleInjectPrep':if(Imported[_0x51ffea(0x63d)]){if(_0x51ffea(0x819)!==_0x51ffea(0x650)){if(BattleManager[_0x51ffea(0x5a6)][_0x51ffea(0x91b)]){if(BattleManager[_0x51ffea(0x5a6)][_0x51ffea(0x91b)]())return!![];this[_0x51ffea(0x66d)]=_0x51ffea(0x4c4);}else'wusvR'!==_0x51ffea(0x2f1)?this[_0x51ffea(0x66d)]='':_0x4c82b5[_0x51ffea(0x93c)](_0x1b9508);break;}else this[_0x51ffea(0x294)]()['canGuard']()&&_0x2e6cfc[_0x51ffea(0x895)]['Game_Action_setGuard'][_0x51ffea(0x40c)](this);}break;case'battleInjectAni':if(Imported[_0x51ffea(0x63d)]){if('xBGzb'!==_0x51ffea(0x9e7)){if(!_0x2168d2[_0x51ffea(0x671)]())return;if(!_0x52e7a3[_0x51ffea(0x994)])return;if(!_0x8e6b77[_0x51ffea(0x41d)])return;_0x193fad[_0x51ffea(0x96)](_0x5aac56,_0x5119cf);const _0x115421=_0x5c2781['VariableID'];_0x3d26cb[_0x51ffea(0x7a5)](_0x115421,_0x4b68b2[_0x51ffea(0x41d)][_0x51ffea(0x722)]());}else{if(BattleManager[_0x51ffea(0x5a6)][_0x51ffea(0x5aa)]())return!![];this['_waitMode']='';}}break;}return VisuMZ[_0x51ffea(0x895)]['Game_Interpreter_updateWaitMode'][_0x51ffea(0x40c)](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x679)]=Game_Interpreter[_0x2546c9(0x79f)]['command301'],Game_Interpreter[_0x2546c9(0x79f)][_0x2546c9(0x477)]=function(_0x554d30){const _0x478f00=_0x2546c9;if(!$gameParty[_0x478f00(0x4aa)]()){if('rAntZ'!==_0x478f00(0xa71))_0x42bd71[_0x478f00(0x895)]['Scene_Battle_startPartyCommandSelection'][_0x478f00(0x40c)](this);else return this['command301_PreBattleEvent'](_0x554d30);}else return VisuMZ['BattleCore']['Game_Interpreter_command301']['call'](this,_0x554d30);},Game_Interpreter[_0x2546c9(0x79f)]['command3011']=function(_0x109bf6){const _0x55f1d8=_0x2546c9;return VisuMZ[_0x55f1d8(0x895)][_0x55f1d8(0x679)][_0x55f1d8(0x40c)](this,_0x109bf6),BattleManager[_0x55f1d8(0x1ed)](_0x2c6062=>{const _0x1bc39b=_0x55f1d8;this[_0x1bc39b(0x1f5)][this[_0x1bc39b(0x354)]]=_0x2c6062;}),!![];},VisuMZ[_0x2546c9(0x895)]['CheckMapBattleEventValid']=function(_0xa8feb2){const _0x22deaf=_0x2546c9,_0x56dbd9=$dataCommonEvents[_0xa8feb2];if(!_0x56dbd9)return![];if(_0x56dbd9[_0x22deaf(0x223)][_0x22deaf(0x4ce)]<=0x1)return![];return!![];},Game_Interpreter[_0x2546c9(0x79f)][_0x2546c9(0x281)]=function(_0xab8683){const _0x5821f4=_0x2546c9,_0x233e6b=VisuMZ[_0x5821f4(0x895)]['Settings']['Mechanics'],_0xcdb08f=_0x233e6b[_0x5821f4(0x60f)],_0x44894c=$dataCommonEvents[_0xcdb08f];if(_0x44894c&&VisuMZ['BattleCore'][_0x5821f4(0x367)](_0xcdb08f)){const _0x34c12e=this[_0x5821f4(0x495)]()?this[_0x5821f4(0x248)]:0x0,_0x4ae781=_0x44894c['list'];this[_0x5821f4(0x7bd)](_0x4ae781,_0x34c12e),this['_list']=JsonEx[_0x5821f4(0x785)](this[_0x5821f4(0x466)]);const _0x5aa55a={'code':0xbc3,'indent':this[_0x5821f4(0x354)],'parameters':JsonEx[_0x5821f4(0x785)](_0xab8683)};return this[_0x5821f4(0x466)][_0x5821f4(0x215)](this['_index']+0x1,0x0,_0x5aa55a),!![];}else{if(_0x5821f4(0x88d)!==_0x5821f4(0x88d)){if(!_0x119f07['isSceneBattle']())return;const _0x56f774=_0x7e2e69[_0x5821f4(0x3fb)]();if(!_0x56f774)return;_0x56f774['setWaitMode'](_0x5821f4(0x4da));}else return VisuMZ['BattleCore'][_0x5821f4(0x679)][_0x5821f4(0x40c)](this,_0xab8683);}},VisuMZ['BattleCore'][_0x2546c9(0x941)]=BattleManager[_0x2546c9(0x43a)],BattleManager[_0x2546c9(0x43a)]=function(){const _0x21fdb3=_0x2546c9;VisuMZ[_0x21fdb3(0x895)][_0x21fdb3(0x941)]['call'](this),this[_0x21fdb3(0x765)]();},BattleManager[_0x2546c9(0x765)]=function(){const _0x282d7d=_0x2546c9,_0x204529=VisuMZ[_0x282d7d(0x895)][_0x282d7d(0x4b7)][_0x282d7d(0xafe)],_0x244ba4=_0x204529[_0x282d7d(0x60f)];_0x244ba4&&VisuMZ[_0x282d7d(0x895)][_0x282d7d(0x367)](_0x244ba4)&&(this[_0x282d7d(0x80c)]=!![],$gameTemp['reserveCommonEvent'](_0x204529[_0x282d7d(0x60f)]),$gameMap[_0x282d7d(0x8f6)](),$gameMap[_0x282d7d(0x90)][_0x282d7d(0x6ac)]=!![]);if(_0x204529[_0x282d7d(0x203)]>0x0){if(_0x282d7d(0xac4)!==_0x282d7d(0xac4)){if(this['_actions'][_0x282d7d(0x335)](_0x5efa20=>_0x5efa20['item']()&&_0x5efa20[_0x282d7d(0xb38)]()))return!![];}else this['_canLose']=!![];}},VisuMZ[_0x2546c9(0x895)]['Scene_Map_updateCallMenu']=Scene_Map['prototype'][_0x2546c9(0x103)],Scene_Map['prototype'][_0x2546c9(0x103)]=function(){const _0x44aa8f=_0x2546c9;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ[_0x44aa8f(0x895)][_0x44aa8f(0x149)]['call'](this);},VisuMZ['BattleCore'][_0x2546c9(0x5d3)]=Scene_Map[_0x2546c9(0x79f)][_0x2546c9(0x374)],Scene_Map[_0x2546c9(0x79f)][_0x2546c9(0x374)]=function(){const _0x3c7238=_0x2546c9;BattleManager['_battleCoreBattleStartEvent']?this[_0x3c7238(0xd4)]():VisuMZ[_0x3c7238(0x895)][_0x3c7238(0x5d3)]['call'](this);},Scene_Map[_0x2546c9(0x79f)][_0x2546c9(0xd4)]=function(){const _0x31db3f=_0x2546c9;this[_0x31db3f(0xc9)]=!![];},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x543)]=SceneManager[_0x2546c9(0x1fe)],SceneManager[_0x2546c9(0x1fe)]=function(){const _0x1aedc0=_0x2546c9;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x1aedc0(0x895)][_0x1aedc0(0x543)][_0x1aedc0(0x40c)](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x3f0)]=Game_Interpreter[_0x2546c9(0x79f)]['terminate'],Game_Interpreter[_0x2546c9(0x79f)][_0x2546c9(0x268)]=function(){const _0x1af49e=_0x2546c9;VisuMZ['BattleCore']['Game_Interpreter_terminate']['call'](this),this[_0x1af49e(0x6ac)]&&(_0x1af49e(0x6b7)===_0x1af49e(0x20f)?(_0x40ed1a[_0x1af49e(0x895)][_0x1af49e(0x29b)][_0x1af49e(0x40c)](this,_0x5eae44),this[_0x1af49e(0x640)](_0x187b10)):(this['_preBattleCommonEvent']=undefined,SceneManager['_scene'][_0x1af49e(0xae9)]()));},Scene_Map[_0x2546c9(0x79f)][_0x2546c9(0xae9)]=function(){const _0x2c0381=_0x2546c9;BattleManager[_0x2c0381(0x80c)]=undefined,BattleManager[_0x2c0381(0x508)]=!![],this[_0x2c0381(0x210)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x3ce)]=Scene_Map[_0x2546c9(0x79f)][_0x2546c9(0x4c3)],Scene_Map[_0x2546c9(0x79f)][_0x2546c9(0x4c3)]=function(){const _0x57c9ee=_0x2546c9;VisuMZ['BattleCore']['Scene_Map_initializeAfter'][_0x57c9ee(0x40c)](this),BattleManager[_0x57c9ee(0x508)]&&(this[_0x57c9ee(0xc9)]=!![],BattleManager[_0x57c9ee(0x508)]=undefined);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x833)]=Scene_Map[_0x2546c9(0x79f)][_0x2546c9(0x4c3)],Scene_Map[_0x2546c9(0x79f)][_0x2546c9(0x4c3)]=function(){const _0x586a6e=_0x2546c9;VisuMZ[_0x586a6e(0x895)][_0x586a6e(0x833)]['call'](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8bb)]=Scene_ItemBase[_0x2546c9(0x79f)][_0x2546c9(0x55d)],Scene_ItemBase[_0x2546c9(0x79f)][_0x2546c9(0x55d)]=function(){const _0x2b1c11=_0x2546c9;VisuMZ[_0x2b1c11(0x895)][_0x2b1c11(0x8bb)]['call'](this);if(this[_0x2b1c11(0x1ff)]()[_0x2b1c11(0x4c1)][_0x2b1c11(0x1e0)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x2b1c11(0x1ff)]()[_0x2b1c11(0x4c1)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x2b1c11(0x69a)!==_0x2b1c11(0xa42)?$gameTemp[_0x2b1c11(0x924)]=[]:this[_0x2b1c11(0x9bf)][_0x2b1c11(0x8c8)](this[_0x2b1c11(0x697)])),DataManager[_0x2b1c11(0x25d)](this['item']())&&($gameTemp[_0x2b1c11(0x924)]=[]);},VisuMZ[_0x2546c9(0x895)]['Scene_Options_maxCommands']=Scene_Options[_0x2546c9(0x79f)]['maxCommands'],Scene_Options[_0x2546c9(0x79f)][_0x2546c9(0x370)]=function(){const _0x34744c=_0x2546c9;let _0x10317e=VisuMZ[_0x34744c(0x895)]['Scene_Options_maxCommands'][_0x34744c(0x40c)](this);const _0x443700=VisuMZ[_0x34744c(0x895)][_0x34744c(0x4b7)];if(_0x443700[_0x34744c(0x2fa)][_0x34744c(0x243)]&&_0x443700[_0x34744c(0x2fa)][_0x34744c(0x9f1)])_0x10317e+=0x2;if(_0x443700[_0x34744c(0x85b)][_0x34744c(0x243)]&&_0x443700[_0x34744c(0x85b)][_0x34744c(0x9f1)])_0x10317e+=0x1;return _0x10317e;},VisuMZ[_0x2546c9(0x895)]['Scene_Battle_initialize']=Scene_Battle['prototype'][_0x2546c9(0x4c3)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x4c3)]=function(){const _0x43bfc1=_0x2546c9;VisuMZ[_0x43bfc1(0x895)]['Scene_Battle_initialize'][_0x43bfc1(0x40c)](this),this[_0x43bfc1(0x16f)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8e4)]=Scene_Battle['prototype'][_0x2546c9(0x784)],Scene_Battle['prototype'][_0x2546c9(0x784)]=function(){const _0x4be5a=_0x2546c9;if(SceneManager['isPreviousSceneBattleTransitionable']()){Scene_Message[_0x4be5a(0x79f)][_0x4be5a(0x784)][_0x4be5a(0x40c)](this);this[_0x4be5a(0x5a6)]&&('Ilidr'==='GQvgS'?(_0x37b230+=_0x332e63[_0x4be5a(0x55e)]()?-_0x119268:_0x2cf4eb,_0x102e47+=_0x564952[_0x4be5a(0x55e)]()?-_0x343322:_0x55a61c):this['_spriteset']['update']());if(BattleManager[_0x4be5a(0xaab)]){if('rXAkb'!==_0x4be5a(0x125)){const _0x1cb492=_0x33fafe['BattleCore'][_0x4be5a(0x4b7)]['BattleLayout'];if(_0x1cb492[_0x4be5a(0x40a)]){const _0x1a0d33=new _0x2e76b8();_0x1a0d33['bitmap']=_0x244b73['loadSystem'](_0x1cb492[_0x4be5a(0x40a)]),_0x1a0d33['x']=_0x1cb492[_0x4be5a(0x8a0)]||0x0,_0x1a0d33['y']=_0x1cb492[_0x4be5a(0x174)]||0x0,this[_0x4be5a(0x17b)](_0x1a0d33),this[_0x4be5a(0x5f9)]=_0x1a0d33;}if(_0x1cb492['StatusWindowAttachmentFront']){const _0x4f827a=new _0x238aa3();_0x4f827a[_0x4be5a(0x2c4)]=_0x13b953[_0x4be5a(0xa70)](_0x1cb492[_0x4be5a(0x47c)]),_0x4f827a['x']=_0x1cb492[_0x4be5a(0x85e)]||0x0,_0x4f827a['y']=_0x1cb492[_0x4be5a(0x390)]||0x0,this[_0x4be5a(0x8c8)](_0x4f827a),this['_frontAttachmentSprite']=_0x4f827a;}}else BattleManager[_0x4be5a(0x1c9)]();}}else VisuMZ[_0x4be5a(0x895)]['Scene_Battle_start'][_0x4be5a(0x40c)](this),$gameTroop['onBattleStartOnceParallels']();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xb3c)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x210)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x210)]=function(){const _0x4e5dad=_0x2546c9;SceneManager[_0x4e5dad(0x902)]()?Scene_Message['prototype'][_0x4e5dad(0x210)]['call'](this):'kxxFb'!=='ywyps'?VisuMZ[_0x4e5dad(0x895)][_0x4e5dad(0xb3c)][_0x4e5dad(0x40c)](this):this[_0x4e5dad(0x767)](_0x4e5dad(0x842));},VisuMZ[_0x2546c9(0x895)]['Scene_Battle_terminate']=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x268)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x268)]=function(){const _0x120183=_0x2546c9;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x120183(0x79f)][_0x120183(0x268)][_0x120183(0x40c)](this):VisuMZ[_0x120183(0x895)][_0x120183(0x70)]['call'](this),this[_0x120183(0x16f)]();},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x7a9)]=function(){const _0x4bb969=_0x2546c9;if(ConfigManager[_0x4bb969(0x4fe)]&&ConfigManager['uiInputPosition']!==undefined)return'LLKou'===_0x4bb969(0x808)?_0x34323c[_0x4bb969(0xae4)](_0x594002=>_0x594002!==_0x4998e0&&!_0xaf30db[_0x4bb969(0xa7e)](_0x594002)&&_0x594002['notFocusValid']()):ConfigManager[_0x4bb969(0x99e)];else{if(this[_0x4bb969(0x8e0)]()===_0x4bb969(0x60d))return![];else{return Scene_Message[_0x4bb969(0x79f)][_0x4bb969(0x7a9)][_0x4bb969(0x40c)](this);;}}},VisuMZ['BattleCore'][_0x2546c9(0x653)]=Scene_Battle[_0x2546c9(0x79f)]['createAllWindows'],Scene_Battle['prototype'][_0x2546c9(0xa69)]=function(){const _0x13cf32=_0x2546c9;this[_0x13cf32(0xa6b)](),VisuMZ[_0x13cf32(0x895)][_0x13cf32(0x653)][_0x13cf32(0x40c)](this),this['createAutoBattleWindow']();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x649)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x148)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x148)]=function(){const _0x4857a6=_0x2546c9;VisuMZ['BattleCore'][_0x4857a6(0x649)]['call'](this),this['battleLayoutStyle']()==='border'&&this['repositionCancelButtonBorderStyle']();},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0xac)]=function(_0x3cabb4){const _0x8ddbe2=_0x2546c9;if(_0x3cabb4)this[_0x8ddbe2(0x401)]['x']=(Graphics[_0x8ddbe2(0x9f9)]-Graphics[_0x8ddbe2(0x8e7)])/0x2,this[_0x8ddbe2(0x401)]['y']=(Graphics[_0x8ddbe2(0x3de)]-Graphics[_0x8ddbe2(0x73)])/0x2;else{if(_0x8ddbe2(0x36b)==='LrDWZ'){const _0x312a2c=_0x1866c7[_0x8ddbe2(0x2dc)]();this[_0x8ddbe2(0x40b)](_0x8ddbe2(0x230),[_0x307d78],_0x5939cf,_0x3092b2),this[_0x8ddbe2(0x40b)]('performMoveToPoint',_0x1831af,_0x312a2c[_0x8ddbe2(0x493)],_0x312a2c[_0x8ddbe2(0x450)],_0x4ca0b3,![],_0x8ddbe2(0x695)),this['push'](_0x8ddbe2(0x5a8),[_0x3adbbe],_0x8ddbe2(0x903)),this[_0x8ddbe2(0x40b)](_0x8ddbe2(0x7b3)),this[_0x8ddbe2(0x40b)](_0x8ddbe2(0x5a8),[_0x2d2fe3],_0x8ddbe2(0x48a));}else this[_0x8ddbe2(0x401)]['x']=Graphics['width']*0xa,this[_0x8ddbe2(0x401)]['y']=Graphics[_0x8ddbe2(0x3de)]*0xa;}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x93a)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x814)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x814)]=function(){const _0x43cd18=_0x2546c9,_0x30fb09=BattleManager[_0x43cd18(0x97d)]();VisuMZ[_0x43cd18(0x895)]['Scene_Battle_selectNextCommand'][_0x43cd18(0x40c)](this);if(_0x30fb09){if(_0x43cd18(0x909)!==_0x43cd18(0x909))_0x4a9fba[_0x43cd18(0x3a8)](),_0x5693af['_autoBattle']=![],_0x5b2286[_0x43cd18(0x3b6)](),_0x16b13a[_0x43cd18(0x3b6)]();else{if(_0x30fb09===BattleManager['actor']())return;if(_0x30fb09===BattleManager[_0x43cd18(0x41d)])return;if(_0x30fb09[_0x43cd18(0x2dc)]())_0x30fb09[_0x43cd18(0x2dc)]()['stepBack']();}}},VisuMZ[_0x2546c9(0x895)]['Scene_Battle_selectPreviousCommand']=Scene_Battle['prototype'][_0x2546c9(0x6ca)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x6ca)]=function(){const _0x122ead=_0x2546c9,_0x54235d=BattleManager[_0x122ead(0x97d)]();if(_0x54235d&&_0x54235d[_0x122ead(0x2dc)])_0x54235d[_0x122ead(0x2dc)]()['stepBack']();VisuMZ['BattleCore'][_0x122ead(0x549)]['call'](this);},VisuMZ['BattleCore'][_0x2546c9(0x33e)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x95d)],Scene_Battle['prototype'][_0x2546c9(0x95d)]=function(){const _0x4f6df3=_0x2546c9;if(VisuMZ[_0x4f6df3(0x895)][_0x4f6df3(0x4b7)][_0x4f6df3(0x8a4)][_0x4f6df3(0x730)])return VisuMZ[_0x4f6df3(0x895)][_0x4f6df3(0x4b7)][_0x4f6df3(0x8a4)][_0x4f6df3(0x730)][_0x4f6df3(0x40c)](this);return VisuMZ[_0x4f6df3(0x895)][_0x4f6df3(0x33e)][_0x4f6df3(0x40c)](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x302)]=Scene_Battle[_0x2546c9(0x79f)]['createPartyCommandWindow'],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x729)]=function(){const _0x1eec5f=_0x2546c9;VisuMZ['BattleCore']['Scene_Battle_createPartyCommandWindow'][_0x1eec5f(0x40c)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x83d)]=function(){const _0x181888=_0x2546c9,_0x3352bb=this[_0x181888(0x3f2)];_0x3352bb['setHandler'](_0x181888(0x1b3),this[_0x181888(0x86a)][_0x181888(0x768)](this)),_0x3352bb['setHandler'](_0x181888(0x5a4),this[_0x181888(0xba)]['bind'](this));const _0x13bbc2=this[_0x181888(0x8e0)]();switch(_0x13bbc2){case'xp':case'portrait':return this['_partyCommandWindow'][_0x181888(0x10d)](0x1);break;}},Scene_Battle[_0x2546c9(0x79f)]['commandAutoBattle']=function(){const _0x1845b9=_0x2546c9;BattleManager[_0x1845b9(0x278)]=!![],$gameParty[_0x1845b9(0x4f1)](),this[_0x1845b9(0x814)](),BattleManager[_0x1845b9(0x777)]()&&(BattleManager['_inputting']=![]);},Scene_Battle['prototype'][_0x2546c9(0xba)]=function(){const _0x44b8c5=_0x2546c9;if(this[_0x44b8c5(0xa9d)]())this[_0x44b8c5(0x794)]=!![],this[_0x44b8c5(0x8e5)][_0x44b8c5(0x40b)](_0x44b8c5(0x9d6),VisuMZ['BattleCore'][_0x44b8c5(0x4b7)][_0x44b8c5(0x1a3)][_0x44b8c5(0xda)]);else{if(_0x44b8c5(0xed)!==_0x44b8c5(0xed)){if(_0x3acf0c[_0x44b8c5(0x55e)]()&&!_0xd59a20[_0x44b8c5(0x165)]())return;const _0x155f08=_0x413eaf[_0x44b8c5(0x2dc)]();if(_0x155f08&&_0x230aa4[_0x44b8c5(0x55e)]())this['_battlerContainer'][_0x44b8c5(0x8c8)](_0x155f08);}else this[_0x44b8c5(0x94d)]();}},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0xa9d)]=function(){const _0x107d58=_0x2546c9;return BattleManager[_0x107d58(0x822)]();},Scene_Battle['prototype'][_0x2546c9(0x94d)]=function(){const _0x250fea=_0x2546c9;this[_0x250fea(0x794)]=![],this[_0x250fea(0x5a6)][_0x250fea(0x9c)](),this[_0x250fea(0x401)][_0x250fea(0xa5a)]=![];if(BattleManager['isBattleTest']())($dataSystem[_0x250fea(0x3e5)]||$dataSystem[_0x250fea(0x124)])&&SceneManager[_0x250fea(0x9d3)]();else{if($gameMap['battleback1Name']()||$gameMap['battleback2Name']()){if('TBXpA'!==_0x250fea(0x4ee))SceneManager[_0x250fea(0x9d3)]();else return _0xe3fe5b['friendsUnit']()[_0x250fea(0x332)]()[_0x250fea(0xae4)](_0x548211=>_0x548211!==_0x772883);}}SceneManager[_0x250fea(0x40b)](Scene_Options),BattleManager[_0x250fea(0x777)]()&&(_0x250fea(0x39c)==='WGius'?BattleManager[_0x250fea(0xaab)]=BattleManager[_0x250fea(0x97d)]():this[_0x250fea(0x767)](_0x250fea(0x1a8)));},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x37b)]=Scene_Battle['prototype']['updateBattleProcess'],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x8b9)]=function(){const _0xf504bb=_0x2546c9;VisuMZ[_0xf504bb(0x895)][_0xf504bb(0x37b)][_0xf504bb(0x40c)](this);if(this[_0xf504bb(0x794)]&&!BattleManager[_0xf504bb(0x41d)])this[_0xf504bb(0x94d)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x439)]=Scene_Battle['prototype']['update'],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x9c)]=function(){const _0x474a8f=_0x2546c9;VisuMZ[_0x474a8f(0x895)][_0x474a8f(0x439)][_0x474a8f(0x40c)](this),this[_0x474a8f(0x750)]();},Scene_Battle['prototype']['createAutoBattleWindow']=function(){const _0x1053f0=_0x2546c9,_0x1d1e73=this['autoBattleWindowRect']();this[_0x1053f0(0xa68)]=new Window_AutoBattleCancel(_0x1d1e73),this[_0x1053f0(0xa68)][_0x1053f0(0xb16)](),this[_0x1053f0(0x8c8)](this[_0x1053f0(0xa68)]);},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x123)]=function(){const _0x39199d=_0x2546c9;return VisuMZ['BattleCore'][_0x39199d(0x4b7)][_0x39199d(0x2fa)][_0x39199d(0x8b1)][_0x39199d(0x40c)](this);},Scene_Battle[_0x2546c9(0x79f)]['clearOnceParallelInterpreters']=function(){const _0x1d21c4=_0x2546c9;this[_0x1d21c4(0xad1)]=[];},Scene_Battle[_0x2546c9(0x79f)]['updateOnceParallelInterpreters']=function(){const _0x2265b4=_0x2546c9;if(!this[_0x2265b4(0xad1)])return;for(const _0x48d79e of this[_0x2265b4(0xad1)]){if(_0x2265b4(0xb08)===_0x2265b4(0xb08))_0x48d79e&&_0x48d79e[_0x2265b4(0x9c)]();else{const _0x55bdc5=this[_0x2265b4(0xa24)](this[_0x2265b4(0x9bf)]);this['addChildAt'](this['_shadowSprite'],_0x55bdc5),this[_0x2265b4(0x99d)]();}}},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x513)]=function(_0x3ba1c0){const _0x20e3f6=_0x2546c9,_0x18f198=$dataCommonEvents[_0x3ba1c0];if(!_0x18f198)return;const _0x1353b8=new Game_BattleOnceParallelInterpreter();this[_0x20e3f6(0x949)](_0x1353b8),_0x1353b8[_0x20e3f6(0x944)](_0x3ba1c0);},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x949)]=function(_0x52faf1){const _0x4cecc9=_0x2546c9;this[_0x4cecc9(0xad1)]=this[_0x4cecc9(0xad1)]||[],this[_0x4cecc9(0xad1)][_0x4cecc9(0x40b)](_0x52faf1);},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x98)]=function(_0x4d8bce){const _0x5f5057=_0x2546c9;this[_0x5f5057(0xad1)]=this[_0x5f5057(0xad1)]||[],this[_0x5f5057(0xad1)][_0x5f5057(0x8ad)](_0x4d8bce);},Game_Troop[_0x2546c9(0x79f)][_0x2546c9(0x262)]=function(){const _0x866e40=_0x2546c9;for(const _0x5cbe7a of this[_0x866e40(0x13d)]()[_0x866e40(0x418)]){if(!this[_0x866e40(0xa78)](_0x5cbe7a))continue;SceneManager[_0x866e40(0x465)][_0x866e40(0x452)](_0x5cbe7a);}},Game_Troop[_0x2546c9(0x79f)][_0x2546c9(0xa78)]=function(_0x1d30ce){const _0x38c375=_0x2546c9;if(!_0x1d30ce)return;for(const _0x33b1f9 of _0x1d30ce[_0x38c375(0x223)]){if([0x6c,0x198][_0x38c375(0xa7e)](_0x33b1f9[_0x38c375(0x2a7)])){const _0x3076e1=_0x33b1f9['parameters'][0x0];if(_0x3076e1['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x452)]=function(_0x213c5d){const _0x1bf6f4=_0x2546c9;if(!_0x213c5d)return;const _0x4f9026=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x4f9026),_0x4f9026[_0x1bf6f4(0x677)](_0x213c5d);};function Game_BattleOnceParallelInterpreter(){const _0x1258b4=_0x2546c9;this[_0x1258b4(0x4c3)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x2546c9(0x315)](Game_Interpreter[_0x2546c9(0x79f)]),Game_BattleOnceParallelInterpreter['prototype']['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x2546c9(0x79f)][_0x2546c9(0x944)]=function(_0x3a054a){const _0x102857=_0x2546c9,_0x644ed3=$dataCommonEvents[_0x3a054a];if(_0x644ed3){if(_0x102857(0x4e5)!=='voDmQ'){if(!_0x2ce40d[_0x102857(0x671)]())return;const _0x162ee1=_0x3dd3a1[_0x102857(0x3fb)]();_0x162ee1[_0x102857(0x58f)](_0x102857(0x1d2));}else this['setup'](_0x644ed3[_0x102857(0x223)],0x0);}else _0x102857(0x8d1)!==_0x102857(0x8d1)?(_0x5ce4bb[_0x102857(0x895)][_0x102857(0x3ce)]['call'](this),_0x1dc10b['_battleCoreBattleResumeAfter']&&(this[_0x102857(0xc9)]=!![],_0x1a5e91[_0x102857(0x508)]=_0x3b4e90)):this[_0x102857(0x268)]();},Game_BattleOnceParallelInterpreter[_0x2546c9(0x79f)][_0x2546c9(0x268)]=function(){const _0xa096f3=_0x2546c9;if(!SceneManager[_0xa096f3(0x671)]())return;SceneManager['_scene']['removeOnceParallelInterpreter'](this),Game_Interpreter['prototype'][_0xa096f3(0x268)][_0xa096f3(0x40c)](this);},Game_BattleOnceParallelInterpreter[_0x2546c9(0x79f)][_0x2546c9(0x677)]=function(_0x3ba923){const _0x202dc4=_0x2546c9;_0x3ba923?this[_0x202dc4(0x47e)](_0x3ba923[_0x202dc4(0x223)],0x0):_0x202dc4(0x37e)!==_0x202dc4(0x37e)?(_0xbf10f5['BattleCore'][_0x202dc4(0x7e9)]['call'](this,_0x488552),this[_0x202dc4(0x839)]()):this[_0x202dc4(0x268)]();},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x800)]=function(){const _0xec2b7f=_0x2546c9;return VisuMZ[_0xec2b7f(0x895)]['Settings'][_0xec2b7f(0x1a3)]['DisablePartyCmd'];},VisuMZ[_0x2546c9(0x895)]['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x27d)],Scene_Battle[_0x2546c9(0x79f)]['startPartyCommandSelection']=function(){const _0x4bd0c9=_0x2546c9;if(this[_0x4bd0c9(0x800)]())this[_0x4bd0c9(0x911)]();else{if(_0x4bd0c9(0x600)==='HFWlw')return _0x16fcbc[_0x4bd0c9(0x895)][_0x4bd0c9(0x4b7)][_0x4bd0c9(0x8a4)]['MaxLines'];else VisuMZ[_0x4bd0c9(0x895)]['Scene_Battle_startPartyCommandSelection']['call'](this);}},Scene_Battle['prototype'][_0x2546c9(0x911)]=function(){const _0x426cbe=_0x2546c9;if(BattleManager[_0x426cbe(0x4cc)]())this[_0x426cbe(0x814)]();else{if(BattleManager[_0x426cbe(0x777)]()){if(_0x426cbe(0x360)===_0x426cbe(0x274))return _0x292baf['friendsUnit']()[_0x426cbe(0x332)]()[_0x426cbe(0xae4)](_0x24ead9=>_0x24ead9!==_0x4f65fe);else VisuMZ[_0x426cbe(0x895)]['Scene_Battle_startPartyCommandSelection'][_0x426cbe(0x40c)](this);}}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8b3)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0xa8)],Scene_Battle['prototype']['commandFight']=function(){const _0x180a62=_0x2546c9;if(BattleManager[_0x180a62(0x777)]())this[_0x180a62(0x206)](),this[_0x180a62(0x55b)]();else{if(_0x180a62(0x47d)===_0x180a62(0x30f)){const _0x275cf8=_0x40f32c[_0x180a62(0x5ec)](_0xe3e70e['x'],_0x4cd499['y']);if(this[_0x180a62(0x77d)]&&this[_0x180a62(0x187)][_0x275cf8])return this[_0x180a62(0x187)][_0x275cf8];}else VisuMZ[_0x180a62(0x895)][_0x180a62(0x8b3)]['call'](this);}},Scene_Battle[_0x2546c9(0x79f)]['tpbCommandFight']=function(){const _0x2e863e=_0x2546c9;if(!VisuMZ[_0x2e863e(0x895)]['TpbActiveChangeEnabled'])return;if(Imported[_0x2e863e(0xaa9)]&&BattleManager[_0x2e863e(0x5fe)]())return;const _0x5100b7=$gameParty['aliveMembers']()[_0x2e863e(0xae4)](_0x37eed6=>_0x37eed6[_0x2e863e(0x3bf)]()&&_0x37eed6[_0x2e863e(0x962)]());BattleManager[_0x2e863e(0xb07)]=_0x5100b7[0x0]||null,BattleManager[_0x2e863e(0xb07)]&&('oTeJy'!==_0x2e863e(0xe8)?this[_0x2e863e(0x839)]():BattleManager[_0x2e863e(0xb07)][_0x2e863e(0x2f5)](_0x2e863e(0xada)));},VisuMZ[_0x2546c9(0x895)]['Scene_Battle_createActorCommandWindow']=Scene_Battle['prototype'][_0x2546c9(0x2ae)],Scene_Battle[_0x2546c9(0x79f)]['createActorCommandWindow']=function(){const _0x33d834=_0x2546c9;VisuMZ[_0x33d834(0x895)][_0x33d834(0x11b)]['call'](this),this['createActorCommandWindowBattleCore']();},Scene_Battle[_0x2546c9(0x79f)]['createActorCommandWindowBattleCore']=function(){const _0x20c62b=_0x2546c9,_0x3eb9c8=this[_0x20c62b(0x559)];_0x3eb9c8[_0x20c62b(0x65e)]('escape',this[_0x20c62b(0xa2b)][_0x20c62b(0x768)](this)),_0x3eb9c8['setHandler'](_0x20c62b(0x1b3),this[_0x20c62b(0x4f8)]['bind'](this)),_0x3eb9c8[_0x20c62b(0x65e)](_0x20c62b(0x224),this[_0x20c62b(0x313)]['bind'](this)),BattleManager[_0x20c62b(0x777)]()&&(this['isPartyCommandWindowDisabled']()?_0x20c62b(0x2c9)!==_0x20c62b(0x857)?delete _0x3eb9c8[_0x20c62b(0x648)][_0x20c62b(0x807)]:(_0x313959['prototype'][_0x20c62b(0x5bc)][_0x20c62b(0x40c)](this),this[_0x20c62b(0x935)]()&&this[_0x20c62b(0x947)]()&&this[_0x20c62b(0x5a8)](_0x20c62b(0x471)),_0x2c08e6[_0x20c62b(0x106)]()):_0x3eb9c8['setHandler'](_0x20c62b(0x807),this[_0x20c62b(0x760)][_0x20c62b(0x768)](this)));},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0xa2b)]=function(){const _0x3ac3d5=_0x2546c9;this[_0x3ac3d5(0x4e1)]();},Scene_Battle[_0x2546c9(0x79f)]['actorCommandAutoBattle']=function(){const _0x5b60f1=_0x2546c9;BattleManager[_0x5b60f1(0x97d)]()[_0x5b60f1(0x6e5)](),BattleManager[_0x5b60f1(0x94)](),BattleManager['selectNextActor'](),this[_0x5b60f1(0x7e7)]();},Scene_Battle[_0x2546c9(0x79f)]['actorCommandSingleSkill']=function(){const _0x145952=_0x2546c9,_0x4cbbc9=BattleManager[_0x145952(0x7cd)]();_0x4cbbc9[_0x145952(0x943)](this['_actorCommandWindow'][_0x145952(0xab)]()),this[_0x145952(0x856)]();},Scene_Battle['prototype'][_0x2546c9(0x760)]=function(){const _0x51e613=_0x2546c9;this[_0x51e613(0x991)]()?_0x51e613(0x4f3)!==_0x51e613(0x4f3)?(_0x636d78['scale']['x']=this['mainSpriteScaleX'](),_0x4dbf2a[_0x51e613(0x6a1)]['y']=this[_0x51e613(0x557)]()):this['performTpbActiveCheckSwitch']():this['processActorCommandCancelTPB']();},VisuMZ[_0x2546c9(0x895)]['TpbActiveChangeEnabled']=![],Scene_Battle[_0x2546c9(0x79f)]['tpbActorSwitchConditionsMet']=function(){const _0xbc7825=_0x2546c9;if(Imported[_0xbc7825(0xaa9)]&&BattleManager[_0xbc7825(0x5fe)]())return![];else{if(!VisuMZ['BattleCore']['TpbActiveChangeEnabled'])return![];const _0x3bf768=$gameParty['aliveMembers']()[_0xbc7825(0xae4)](_0x1f9e21=>_0x1f9e21[_0xbc7825(0x3bf)]()&&_0x1f9e21['canInput']());return _0x3bf768['length']>0x0&&BattleManager[_0xbc7825(0x97d)]()!==_0x3bf768[_0x3bf768['length']-0x1];}},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x579)]=function(){const _0x56bd4e=_0x2546c9,_0x2cbf5d=BattleManager[_0x56bd4e(0x97d)](),_0xa2eece=_0x2cbf5d['battler']();if(_0xa2eece)_0xa2eece[_0x56bd4e(0x757)]();const _0x41a70e=$gameParty[_0x56bd4e(0x332)]()[_0x56bd4e(0xae4)](_0x420c72=>_0x420c72[_0x56bd4e(0x3bf)]()&&_0x420c72[_0x56bd4e(0x962)]()),_0x2c8720=_0x41a70e[_0x56bd4e(0x402)](_0x2cbf5d),_0x471926=_0x41a70e[_0x2c8720+0x1];BattleManager[_0x56bd4e(0xb07)]=_0x471926||null;if(_0x471926)_0x471926['setActionState'](_0x56bd4e(0xada));_0x2cbf5d[_0x56bd4e(0x2f5)](_0x56bd4e(0x34c)),this[_0x56bd4e(0x7e7)]();},Scene_Battle[_0x2546c9(0x79f)]['processActorCommandCancelTPB']=function(){const _0x5bf62f=_0x2546c9;this[_0x5bf62f(0x3f2)][_0x5bf62f(0x47e)](),this[_0x5bf62f(0x559)]['close']();if(!VisuMZ[_0x5bf62f(0x895)][_0x5bf62f(0xa90)])return;if(Imported[_0x5bf62f(0xaa9)]&&BattleManager[_0x5bf62f(0x5fe)]())return;if(BattleManager['_currentActor']){BattleManager[_0x5bf62f(0xb07)][_0x5bf62f(0x2f5)](_0x5bf62f(0x34c));const _0x826bcb=BattleManager['_currentActor']['battler']();if(_0x826bcb)_0x826bcb[_0x5bf62f(0x757)]();}BattleManager[_0x5bf62f(0xb07)]=null;},VisuMZ['BattleCore']['Scene_Battle_createHelpWindow']=Scene_Battle[_0x2546c9(0x79f)]['createHelpWindow'],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x52f)]=function(){const _0x12de19=_0x2546c9;VisuMZ['BattleCore'][_0x12de19(0xa0e)][_0x12de19(0x40c)](this),this[_0x12de19(0xb42)]();},Scene_Battle[_0x2546c9(0x79f)]['createHelpWindowBattleCore']=function(){const _0x49f24c=_0x2546c9;this[_0x49f24c(0x559)][_0x49f24c(0x2c0)](this[_0x49f24c(0x8b2)]),this[_0x49f24c(0x3f2)][_0x49f24c(0x2c0)](this[_0x49f24c(0x8b2)]);},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x8e0)]=function(){const _0x145d42=_0x2546c9;if($gameTemp['_forcedBattleLayout']!==undefined)return $gameTemp['_forcedBattleLayout'];if(this['_battleLayoutStyle'])return this[_0x145d42(0x774)];return this['_battleLayoutStyle']=VisuMZ['BattleCore'][_0x145d42(0x4b7)][_0x145d42(0x8c9)][_0x145d42(0x797)]['toLowerCase']()[_0x145d42(0xb19)](),this[_0x145d42(0x774)]===_0x145d42(0x4cd)&&!Imported[_0x145d42(0x2b5)]&&(this[_0x145d42(0x774)]='default'),this['_battleLayoutStyle'];},VisuMZ['BattleCore'][_0x2546c9(0xa99)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x1b4)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x1b4)]=function(){const _0x185f49=_0x2546c9,_0x37ac23=this[_0x185f49(0x8e0)]();switch(_0x37ac23){case _0x185f49(0x223):return this[_0x185f49(0x246)](Math[_0x185f49(0x556)](0x1,$gameParty[_0x185f49(0x72b)]()),!![]);break;default:return VisuMZ[_0x185f49(0x895)][_0x185f49(0xa99)][_0x185f49(0x40c)](this);break;}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x6d)]=Scene_Battle[_0x2546c9(0x79f)]['helpWindowRect'],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x2bf)]=function(){const _0x3dafd1=_0x2546c9,_0x2d2aff=this[_0x3dafd1(0x8e0)]();switch(_0x2d2aff){case _0x3dafd1(0x60d):return this[_0x3dafd1(0x6e7)]();break;case _0x3dafd1(0x304):case _0x3dafd1(0x223):case'xp':case _0x3dafd1(0x57c):default:return VisuMZ[_0x3dafd1(0x895)][_0x3dafd1(0x6d)]['call'](this);break;}},Scene_Battle[_0x2546c9(0x79f)]['statusWindowRect']=function(){const _0x1608b5=_0x2546c9,_0x1bf743=this[_0x1608b5(0x8e0)]();switch(_0x1bf743){case'xp':case _0x1608b5(0x57c):return this[_0x1608b5(0x815)]();break;case _0x1608b5(0x60d):return this[_0x1608b5(0x580)]();break;case _0x1608b5(0x304):case _0x1608b5(0x223):default:return this[_0x1608b5(0x6dd)]();break;}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xb43)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x5be)],Scene_Battle[_0x2546c9(0x79f)]['partyCommandWindowRect']=function(){const _0x31d5ad=_0x2546c9,_0x2757e6=this[_0x31d5ad(0x8e0)]();switch(_0x2757e6){case'xp':case _0x31d5ad(0x57c):return this[_0x31d5ad(0x5b4)]();break;case _0x31d5ad(0x60d):return this[_0x31d5ad(0x884)]();case'default':case _0x31d5ad(0x223):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x3f7)]=function(){const _0x3c4ecc=_0x2546c9,_0x13f676=VisuMZ[_0x3c4ecc(0x895)][_0x3c4ecc(0x4b7)][_0x3c4ecc(0x8c9)],_0x42021e=_0x13f676[_0x3c4ecc(0x984)]||0xc0,_0x55a37d=this[_0x3c4ecc(0x1b4)](),_0x3aef64=this[_0x3c4ecc(0x7a9)]()?Graphics[_0x3c4ecc(0x8e7)]-_0x42021e:0x0,_0xcbaa3f=Graphics['boxHeight']-_0x55a37d;return new Rectangle(_0x3aef64,_0xcbaa3f,_0x42021e,_0x55a37d);},Scene_Battle[_0x2546c9(0x79f)]['actorCommandWindowRect']=function(){const _0x482059=_0x2546c9;return this[_0x482059(0x5be)]();},VisuMZ[_0x2546c9(0x895)]['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x1cc)],Scene_Battle['prototype'][_0x2546c9(0x1cc)]=function(){const _0x4792e3=_0x2546c9,_0x66d56f=this[_0x4792e3(0x8e0)]();switch(_0x66d56f){case'xp':case'portrait':case _0x4792e3(0x60d):break;case _0x4792e3(0x304):case'list':default:VisuMZ['BattleCore'][_0x4792e3(0x424)][_0x4792e3(0x40c)](this);break;}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x52d)]=Scene_Battle[_0x2546c9(0x79f)]['startActorSelection'],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0xb35)]=function(){const _0xc4e082=_0x2546c9;VisuMZ[_0xc4e082(0x895)][_0xc4e082(0x52d)][_0xc4e082(0x40c)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xa87)]=Scene_Battle[_0x2546c9(0x79f)]['startEnemySelection'],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x25c)]=function(){const _0x32e377=_0x2546c9;VisuMZ[_0x32e377(0x895)]['Scene_Battle_startEnemySelection'][_0x32e377(0x40c)](this),this[_0x32e377(0x62d)][_0x32e377(0x541)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0xdf)]=function(){const _0x34d927=_0x2546c9,_0x2070e6=this[_0x34d927(0x8e0)]();['xp',_0x34d927(0x57c),_0x34d927(0x60d)][_0x34d927(0xa7e)](_0x2070e6)&&(_0x34d927(0x238)!=='MzmJh'?this['_actorCommandWindow'][_0x34d927(0x74c)]():this[_0x34d927(0x4dd)]=_0xd44e99[_0x34d927(0x895)][_0x34d927(0x4b7)][_0x34d927(0xafe)][_0x34d927(0x4a4)]['call'](this)),(_0x2070e6===_0x34d927(0x60d)||this[_0x34d927(0xa7f)]())&&(this[_0x34d927(0x726)][_0x34d927(0x74c)](),this[_0x34d927(0x604)]['close']());},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x6d4)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x391)],Scene_Battle[_0x2546c9(0x79f)]['onActorOk']=function(){const _0x333437=_0x2546c9;VisuMZ[_0x333437(0x895)][_0x333437(0x6d4)][_0x333437(0x40c)](this),this[_0x333437(0x4f0)]();},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x26d)]=function(){const _0x4af67f=_0x2546c9;return[_0x4af67f(0x8f4),_0x4af67f(0x2fb),'singleSkill'][_0x4af67f(0xa7e)](this[_0x4af67f(0x559)][_0x4af67f(0x562)]());},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x464)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x54f)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x54f)]=function(){const _0x554ce6=_0x2546c9;this[_0x554ce6(0x26d)]()?(this[_0x554ce6(0x432)][_0x554ce6(0x412)](),this[_0x554ce6(0x459)][_0x554ce6(0xb16)](),this[_0x554ce6(0x559)][_0x554ce6(0x570)]()):VisuMZ[_0x554ce6(0x895)][_0x554ce6(0x464)][_0x554ce6(0x40c)](this),this[_0x554ce6(0x50e)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x326)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x3c3)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x3c3)]=function(){const _0x50f77c=_0x2546c9;VisuMZ[_0x50f77c(0x895)]['Scene_Battle_onEnemyOk'][_0x50f77c(0x40c)](this),this['okTargetSelectionVisibility']();},VisuMZ['BattleCore'][_0x2546c9(0xb36)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x567)],Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x567)]=function(){const _0x1fb066=_0x2546c9;if(this[_0x1fb066(0x26d)]())_0x1fb066(0x69d)!==_0x1fb066(0x69d)?(_0x4573b7+=_0x330fd9[_0x1fb066(0x55e)]()?-_0x19c2fe:_0x11e0e7,_0x55ffa5+=_0x445c7e):(this[_0x1fb066(0x432)][_0x1fb066(0x412)](),this[_0x1fb066(0x62d)]['hide'](),this[_0x1fb066(0x559)][_0x1fb066(0x570)]());else{if(_0x1fb066(0x3a5)!==_0x1fb066(0x3a5)){const _0x35c035=this[_0x1fb066(0x4ff)](_0x3b47b1),_0x5bd29b=this[_0x1fb066(0x82d)](_0x57b6c1),_0x47800f=this[_0x1fb066(0x234)](_0x5bd29b)[_0x1fb066(0x9f9)];this[_0x1fb066(0x84d)](this[_0x1fb066(0x4bc)](_0x26b6fa));const _0x55e7b7=this[_0x1fb066(0x311)]();if(_0x55e7b7===_0x1fb066(0x9c8))this[_0x1fb066(0x9ec)](_0x5bd29b,_0x35c035['x']+_0x35c035[_0x1fb066(0x9f9)]-_0x47800f,_0x35c035['y'],_0x47800f);else{if(_0x55e7b7===_0x1fb066(0x6d3)){const _0x3309ec=_0x35c035['x']+_0x1ade83['floor']((_0x35c035[_0x1fb066(0x9f9)]-_0x47800f)/0x2);this['drawTextEx'](_0x5bd29b,_0x3309ec,_0x35c035['y'],_0x47800f);}else this[_0x1fb066(0x9ec)](_0x5bd29b,_0x35c035['x'],_0x35c035['y'],_0x47800f);}}else VisuMZ[_0x1fb066(0x895)][_0x1fb066(0xb36)][_0x1fb066(0x40c)](this);}this[_0x1fb066(0x50e)]();},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x4f0)]=function(){const _0x2d832d=_0x2546c9,_0x15f916=this[_0x2d832d(0x8e0)]();if(_0x15f916===_0x2d832d(0x60d)||this[_0x2d832d(0xa7f)]()){this[_0x2d832d(0x726)][_0x2d832d(0x3d6)]();if(this[_0x2d832d(0x726)]['active']){if(_0x2d832d(0x928)!=='KnmIw')return _0x3f3a4a['_scene'][_0x2d832d(0x62d)]&&_0x56d2e5[_0x2d832d(0x465)][_0x2d832d(0x62d)][_0x2d832d(0x631)]&&_0x4a7b71['_scene'][_0x2d832d(0x62d)]['_enemies'][_0x2d832d(0xa7e)](this[_0x2d832d(0xe2)]);else this[_0x2d832d(0x726)]['show']();}this[_0x2d832d(0x604)][_0x2d832d(0x3d6)](),this['_itemWindow'][_0x2d832d(0x631)]&&this[_0x2d832d(0x604)]['show']();}},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x50e)]=function(){const _0x5cf0ea=_0x2546c9,_0x14d173=this['battleLayoutStyle']();['xp',_0x5cf0ea(0x57c),_0x5cf0ea(0x60d)][_0x5cf0ea(0xa7e)](_0x14d173)&&(_0x5cf0ea(0x81c)===_0x5cf0ea(0x8a1)?(_0x583c20[_0x5cf0ea(0x17a)]=![],this[_0x5cf0ea(0x760)]()):this[_0x5cf0ea(0x559)]['open']()),this['okTargetSelectionVisibility']();},Scene_Battle[_0x2546c9(0x79f)]['statusWindowRectDefaultStyle']=function(){const _0x1d9aae=_0x2546c9,_0x33496f=VisuMZ[_0x1d9aae(0x895)][_0x1d9aae(0x4b7)][_0x1d9aae(0x8c9)],_0x1e8ed6=Window_BattleStatus['prototype'][_0x1d9aae(0x170)](),_0xe3a4f1=Graphics[_0x1d9aae(0x8e7)]-(_0x33496f[_0x1d9aae(0x984)]||0xc0),_0x5699e0=this['windowAreaHeight']()+_0x1e8ed6,_0x1a65f6=this[_0x1d9aae(0x7a9)]()?0x0:Graphics[_0x1d9aae(0x8e7)]-_0xe3a4f1,_0x438a00=Graphics['boxHeight']-_0x5699e0+_0x1e8ed6;return new Rectangle(_0x1a65f6,_0x438a00,_0xe3a4f1,_0x5699e0);},Scene_Battle['prototype'][_0x2546c9(0x815)]=function(){const _0x1457ad=_0x2546c9,_0x41c2a0=Window_BattleStatus[_0x1457ad(0x79f)][_0x1457ad(0x170)](),_0x3b217b=Graphics[_0x1457ad(0x8e7)],_0x1d6130=this[_0x1457ad(0x1b4)]()+_0x41c2a0,_0x41273b=0x0,_0xe307fc=Graphics['boxHeight']-_0x1d6130+_0x41c2a0;return new Rectangle(_0x41273b,_0xe307fc,_0x3b217b,_0x1d6130);},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x5b4)]=function(){const _0x4669c9=_0x2546c9,_0x86b19d=Graphics[_0x4669c9(0x8e7)]/0x2,_0x57f6d1=this[_0x4669c9(0x246)](VisuMZ[_0x4669c9(0x895)]['Settings']['BattleLayout']['XPActorCommandLines'],!![]),_0x25c597=Math[_0x4669c9(0x19b)]((Graphics['boxWidth']-_0x86b19d)/0x2),_0x7fe02e=Graphics['boxHeight']-_0x57f6d1-this['statusWindowRectXPStyle']()[_0x4669c9(0x3de)];return new Rectangle(_0x25c597,_0x7fe02e,_0x86b19d,_0x57f6d1);},Scene_Battle[_0x2546c9(0x79f)]['helpWindowRectBorderStyle']=function(){const _0xfab73d=_0x2546c9,_0x1bb481=Graphics[_0xfab73d(0x9f9)],_0x2a9070=Math['round']((Graphics['boxWidth']-_0x1bb481)/0x2),_0x21f8b2=this[_0xfab73d(0x7f)](),_0x3268bd=(Graphics[_0xfab73d(0x3de)]-Graphics[_0xfab73d(0x73)])/-0x2;return new Rectangle(_0x2a9070,_0x3268bd,_0x1bb481,_0x21f8b2);},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x580)]=function(){const _0x22234e=_0x2546c9,_0x4a1881=Graphics[_0x22234e(0x9f9)],_0x434fe1=Math[_0x22234e(0x19b)]((Graphics[_0x22234e(0x8e7)]-_0x4a1881)/0x2),_0x1e39d9=this[_0x22234e(0x246)](0x4,!![]),_0x3abe27=Graphics[_0x22234e(0x73)]-_0x1e39d9+(Graphics[_0x22234e(0x3de)]-Graphics[_0x22234e(0x73)])/0x2;return new Rectangle(_0x434fe1,_0x3abe27,_0x4a1881,_0x1e39d9);},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x884)]=function(){const _0x222c8d=_0x2546c9,_0x5d01c3=Math[_0x222c8d(0x296)](Graphics[_0x222c8d(0x9f9)]/0x3),_0x40d777=this[_0x222c8d(0x7a9)]()?(Graphics[_0x222c8d(0x9f9)]+Graphics[_0x222c8d(0x8e7)])/0x2-_0x5d01c3:(Graphics['width']-Graphics[_0x222c8d(0x8e7)])/-0x2,_0x30295e=this['helpWindowRectBorderStyle'](),_0x5773a4=_0x30295e['y']+_0x30295e[_0x222c8d(0x3de)],_0xffa56b=this[_0x222c8d(0x580)](),_0x40dbc9=_0xffa56b['y']-_0x5773a4;return new Rectangle(_0x40d777,_0x5773a4,_0x5d01c3,_0x40dbc9);},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0xa9c)]=function(){const _0x47c2f0=_0x2546c9,_0x2559a4=Math[_0x47c2f0(0x57f)](Graphics[_0x47c2f0(0x9f9)]/0x3),_0x2bbc0c=Math[_0x47c2f0(0x19b)]((Graphics[_0x47c2f0(0x8e7)]-_0x2559a4)/0x2),_0x22d62e=this[_0x47c2f0(0x884)](),_0x3d2e7c=_0x22d62e['y'],_0x38445f=_0x22d62e[_0x47c2f0(0x3de)];return new Rectangle(_0x2bbc0c,_0x3d2e7c,_0x2559a4,_0x38445f);},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x3be)]=function(){const _0x4a6c61=_0x2546c9;this['_cancelButton']['y']=this[_0x4a6c61(0x8b2)]['y']+this[_0x4a6c61(0x8b2)]['height'];if(this['isRightInputMode']()){if(this[_0x4a6c61(0x8e0)]()===_0x4a6c61(0x60d))this['_cancelButton']['x']=0x8;else{if(_0x4a6c61(0x80a)!==_0x4a6c61(0x23f))this[_0x4a6c61(0x4bd)]['x']=-this[_0x4a6c61(0x4bd)]['width']-0x4;else return _0x4fd051[_0x4a6c61(0x332)]();}}else this[_0x4a6c61(0x4bd)]['x']=Graphics['width']-(Graphics[_0x4a6c61(0x9f9)]-Graphics[_0x4a6c61(0x8e7)])/0x2-this[_0x4a6c61(0x4bd)][_0x4a6c61(0x9f9)]-0x4;},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x983)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x1c4)],Scene_Battle['prototype'][_0x2546c9(0x1c4)]=function(){const _0x14de98=_0x2546c9;if(this[_0x14de98(0x8e0)]()===_0x14de98(0x60d))return this[_0x14de98(0xa9c)]();else{if(this[_0x14de98(0xa7f)]())return this[_0x14de98(0x79e)]();else{if(_0x14de98(0x2bd)==='fQzPI')return VisuMZ[_0x14de98(0x895)][_0x14de98(0x983)]['call'](this);else return;}}},VisuMZ['BattleCore'][_0x2546c9(0x8d0)]=Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0x34e)],Scene_Battle['prototype']['itemWindowRect']=function(){const _0x4f6a19=_0x2546c9;if(this['battleLayoutStyle']()===_0x4f6a19(0x60d))return this['skillItemWindowRectBorderStyle']();else return this[_0x4f6a19(0xa7f)]()?this[_0x4f6a19(0x79e)]():VisuMZ[_0x4f6a19(0x895)][_0x4f6a19(0x8d0)][_0x4f6a19(0x40c)](this);},Scene_Battle[_0x2546c9(0x79f)][_0x2546c9(0xa7f)]=function(){const _0x2601cb=_0x2546c9;return VisuMZ['BattleCore'][_0x2601cb(0x4b7)][_0x2601cb(0x8c9)][_0x2601cb(0xa93)];},Scene_Battle['prototype'][_0x2546c9(0x79e)]=function(){const _0x1c2341=_0x2546c9,_0xdc39c3=Sprite_Button['prototype'][_0x1c2341(0x3fe)]()*0x2+0x4;let _0x518c11=Graphics['boxWidth']-_0xdc39c3;Imported[_0x1c2341(0x53c)]&&SceneManager[_0x1c2341(0x6fb)]()&&(_0x518c11+=_0xdc39c3);const _0x591532=this[_0x1c2341(0x7c2)](),_0xabbb30=Graphics[_0x1c2341(0x73)]-_0x591532-this[_0x1c2341(0x5a7)]()[_0x1c2341(0x3de)]+Window_BattleStatus['prototype']['extraHeight'](),_0x8438ef=0x0;return new Rectangle(_0x8438ef,_0x591532,_0x518c11,_0xabbb30);},Scene_Battle[_0x2546c9(0x79f)]['createEnemyNameContainer']=function(){const _0x201ffe=_0x2546c9;if(!VisuMZ[_0x201ffe(0x895)][_0x201ffe(0x4b7)][_0x201ffe(0x862)][_0x201ffe(0xac2)])return;this[_0x201ffe(0x5c4)]=new Sprite(),this[_0x201ffe(0x5c4)]['x']=this[_0x201ffe(0x401)]['x'],this['_enemyNameContainer']['y']=this[_0x201ffe(0x401)]['y'];const _0x2ff3a0=this[_0x201ffe(0x2b7)][_0x201ffe(0x402)](this[_0x201ffe(0x401)]);this[_0x201ffe(0x64d)](this[_0x201ffe(0x5c4)],_0x2ff3a0);for(let _0x181891=0x0;_0x181891<0x8;_0x181891++){const _0x2156c7=new Window_EnemyName(_0x181891);this[_0x201ffe(0x5c4)][_0x201ffe(0x8c8)](_0x2156c7);}},Sprite_Battler[_0x2546c9(0x436)]=VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x4b7)][_0x2546c9(0x99a)][_0x2546c9(0x8ce)],VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x515)]=Sprite_Battler[_0x2546c9(0x79f)]['initMembers'],Sprite_Battler['prototype']['initMembers']=function(){const _0x6a252d=_0x2546c9;VisuMZ[_0x6a252d(0x895)][_0x6a252d(0x515)][_0x6a252d(0x40c)](this),this[_0x6a252d(0x272)]();if(this['constructor']===Sprite_Enemy)this['createShadowSprite']();this[_0x6a252d(0x8bd)]();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x272)]=function(){const _0x24d51c=_0x2546c9;this[_0x24d51c(0xa2f)]=0x0,this[_0x24d51c(0x38a)]=0x0,this[_0x24d51c(0x946)]=0x0,this['_targetFloatHeight']=0x0,this[_0x24d51c(0x139)]=0x0,this[_0x24d51c(0x371)]=0x0,this['_floatEasing']=_0x24d51c(0x695),this[_0x24d51c(0x4f9)]=0x0,this[_0x24d51c(0xa04)]=0x0,this['_jumpDuration']=0x0,this[_0x24d51c(0x7fd)]=0x0,this[_0x24d51c(0x45c)]=0xff,this['_opacityDuration']=0x0,this[_0x24d51c(0x420)]=0x0,this['_opacityEasing']='Linear',this[_0x24d51c(0x3ef)]=0x0,this[_0x24d51c(0x27a)]=0x0,this[_0x24d51c(0x20e)]=0x0,this[_0x24d51c(0x398)]=0x0,this['_angleEasing']=_0x24d51c(0x695),this['_angleRevertOnFinish']=!![],this['_skewX']=0x0,this[_0x24d51c(0x50d)]=0x0,this[_0x24d51c(0x8de)]=0x0,this[_0x24d51c(0x22b)]=0x0,this[_0x24d51c(0x468)]=0x0,this[_0x24d51c(0x73e)]=0x0,this[_0x24d51c(0x564)]='Linear',this['_growX']=0x1,this[_0x24d51c(0x3c4)]=0x1,this[_0x24d51c(0x5f0)]=0x1,this[_0x24d51c(0x8e8)]=0x1,this[_0x24d51c(0xb4f)]=0x0,this[_0x24d51c(0x845)]=0x0,this[_0x24d51c(0x74b)]=_0x24d51c(0x695),this[_0x24d51c(0x27e)]=0x1,this['_targetHomeX']=0x0,this['_targetHomeY']=0x0,this['_homeDuration']=0x0,this[_0x24d51c(0x26c)]=0x0,this['_homeEasing']=_0x24d51c(0x695);},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x8b5)]=function(){const _0x450af5=_0x2546c9;this['_shadowSprite']=new Sprite(),this[_0x450af5(0x731)]['bitmap']=ImageManager[_0x450af5(0xa70)](_0x450af5(0x601)),this[_0x450af5(0x731)][_0x450af5(0x2c4)][_0x450af5(0xac1)]=VisuMZ[_0x450af5(0x895)][_0x450af5(0x4b7)][_0x450af5(0x99a)][_0x450af5(0xa52)],this[_0x450af5(0x731)]['anchor']['x']=0.5,this[_0x450af5(0x731)]['anchor']['y']=0.5,this[_0x450af5(0x731)]['y']=-0x2,this[_0x450af5(0x731)][_0x450af5(0xa5a)]=![],this[_0x450af5(0x8c8)](this[_0x450af5(0x731)]);},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x8bd)]=function(){const _0x4f0f42=_0x2546c9;this[_0x4f0f42(0x9bf)]=new Sprite(),this[_0x4f0f42(0x9bf)][_0x4f0f42(0x9a7)]['x']=0.5,this[_0x4f0f42(0x9bf)]['anchor']['y']=0.5,this[_0x4f0f42(0x8c8)](this['_distortionSprite']);},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x3f6)]=function(){const _0x5114e5=_0x2546c9;if(!this[_0x5114e5(0x9bf)])return;if(this['_shadowSprite']){if(_0x5114e5(0x191)===_0x5114e5(0x191)){const _0x3785aa=this[_0x5114e5(0xa24)](this[_0x5114e5(0x9bf)]);this[_0x5114e5(0x64d)](this['_shadowSprite'],_0x3785aa),this[_0x5114e5(0x99d)]();}else return _0xeb1d7[_0x5114e5(0x895)][_0x5114e5(0x4b7)][_0x5114e5(0x1a3)]['CmdStyle'];}this[_0x5114e5(0xaba)]&&this[_0x5114e5(0x9bf)][_0x5114e5(0x8c8)](this[_0x5114e5(0xaba)]),this['_weaponSprite']&&(_0x5114e5(0x10b)!=='xEzBI'?this[_0x5114e5(0x9bf)][_0x5114e5(0x8c8)](this[_0x5114e5(0x451)]):(this[_0x5114e5(0x18d)](),this['applyAngleChange']())),this[_0x5114e5(0x53a)]&&this[_0x5114e5(0x9bf)][_0x5114e5(0x8c8)](this[_0x5114e5(0x53a)]),this['_injectAnimationSprite']&&this[_0x5114e5(0x9bf)]['addChild'](this[_0x5114e5(0x75b)]),this[_0x5114e5(0x697)]&&this[_0x5114e5(0x9bf)][_0x5114e5(0x8c8)](this[_0x5114e5(0x697)]);},Sprite_Battler['prototype']['updateShadowVisibility']=function(){const _0xf2201b=_0x2546c9;if(!this['_shadowSprite'])return;if(this[_0xf2201b(0xe2)]&&this[_0xf2201b(0xe2)][_0xf2201b(0x67f)]()){if(_0xf2201b(0xaf8)!=='hmKlT'){const _0x16d45d=this[_0xf2201b(0x731)][_0xf2201b(0x2c4)];this['_shadowSprite'][_0xf2201b(0x2a1)](0x0,0x0,_0x16d45d[_0xf2201b(0x9f9)],_0x16d45d[_0xf2201b(0x3de)]);}else{_0x1a0f24[_0xf2201b(0x79f)][_0xf2201b(0x48c)][_0xf2201b(0x40c)](this),this[_0xf2201b(0x92e)][_0xf2201b(0x3b6)]();if(!this['enemy']())return;this[_0xf2201b(0x314)]();}}else this[_0xf2201b(0x731)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x2546c9(0x87a)]=function(){const _0x3d1cda=_0x2546c9;if(SceneManager[_0x3d1cda(0x671)]()){if(_0x3d1cda(0x719)===_0x3d1cda(0x719))return SceneManager[_0x3d1cda(0x465)]['_spriteset'][_0x3d1cda(0x69)];else{if(_0x548d19[_0x3d1cda(0x671)]()){const _0x2a2b0d=this['battler']();if(_0x2a2b0d)_0x2a2b0d[_0x3d1cda(0x52b)](_0x3775de);}}}else return _0x3d1cda(0x69f)===_0x3d1cda(0x841)?_0x577614[_0x3d1cda(0x895)][_0x3d1cda(0x4b7)][_0x3d1cda(0x8a4)][_0x3d1cda(0x18a)]:this[_0x3d1cda(0x59a)];},Sprite_Battler[_0x2546c9(0x79f)]['setupTextPopup']=function(_0x4471df,_0x4ffb61){const _0x1bc750=_0x2546c9;if(!this['_battler'][_0x1bc750(0x935)]())return;const _0x5f16df=VisuMZ[_0x1bc750(0x895)]['Settings'][_0x1bc750(0x2f3)],_0x4aa0a5=new Sprite_Damage();_0x4aa0a5['_duration']=_0x5f16df[_0x1bc750(0x171)],this[_0x1bc750(0x545)](_0x4aa0a5),_0x4aa0a5[_0x1bc750(0x5b6)](_0x4471df,_0x4ffb61),this[_0x1bc750(0x3bb)](_0x4aa0a5);},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x4e8)]=function(_0x412494,_0x2ebc53,_0x1b826f){const _0x129560=_0x2546c9;if(!this['_battler'][_0x129560(0x935)]())return;const _0x1c09c4=VisuMZ[_0x129560(0x895)][_0x129560(0x4b7)][_0x129560(0x2f3)],_0x49da6a=new Sprite_Damage();_0x49da6a['_duration']=_0x1c09c4['PopupDuration'],this[_0x129560(0x545)](_0x49da6a),_0x49da6a['setupIconTextPopup'](_0x412494,_0x2ebc53,_0x1b826f),this[_0x129560(0x3bb)](_0x49da6a);},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x9c6)]=function(){const _0x5e7fcc=_0x2546c9;if(!this[_0x5e7fcc(0xe2)][_0x5e7fcc(0x7e)]())return;while(this[_0x5e7fcc(0xe2)][_0x5e7fcc(0x7e)]()){this[_0x5e7fcc(0xe2)]['isSpriteVisible']()&&this['createDamageSprite']();}this[_0x5e7fcc(0xe2)]['clearDamagePopup'](),this[_0x5e7fcc(0xe2)][_0x5e7fcc(0x7d9)]();},Sprite_Battler['prototype'][_0x2546c9(0x553)]=function(){const _0x315f70=_0x2546c9,_0x532330=VisuMZ[_0x315f70(0x895)][_0x315f70(0x4b7)]['Damage'],_0x232a4c=new Sprite_Damage();_0x232a4c[_0x315f70(0x2ad)]=_0x532330[_0x315f70(0x171)],this[_0x315f70(0x545)](_0x232a4c),_0x232a4c[_0x315f70(0x47e)](this[_0x315f70(0xe2)]),_0x232a4c[_0x315f70(0x9a3)](this[_0x315f70(0xe2)]),this[_0x315f70(0x3bb)](_0x232a4c);},Sprite_Battler['prototype']['addDamageSprite']=function(_0x4b10c){const _0xcf1234=_0x2546c9;this[_0xcf1234(0x25e)][_0xcf1234(0x40b)](_0x4b10c);if(this['isShownOnBattlePortrait']())SceneManager[_0xcf1234(0x465)][_0xcf1234(0x432)][_0xcf1234(0x3bb)](_0x4b10c,this['_battler']);else{this['damageContainer']()['addChild'](_0x4b10c);if(SceneManager[_0xcf1234(0x6ff)]())_0x4b10c[_0xcf1234(0x6a1)]['x']=-0x1;}},Sprite_Battler['prototype'][_0x2546c9(0x415)]=function(){const _0x3801c=_0x2546c9;return!$gameSystem['isSideView']()&&this[_0x3801c(0xe2)]&&this['_battler'][_0x3801c(0x55e)]();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x545)]=function(_0x55579c){const _0x1de3ab=_0x2546c9;this[_0x1de3ab(0xa01)](_0x55579c,!![]);const _0x325a1a=VisuMZ[_0x1de3ab(0x895)][_0x1de3ab(0x4b7)][_0x1de3ab(0x2f3)],_0x299d81=SceneManager[_0x1de3ab(0x6ff)]()?-0x1:0x1;if(_0x325a1a[_0x1de3ab(0x44e)]){if(_0x1de3ab(0x1cd)===_0x1de3ab(0x1cd))for(const _0x9abb57 of this[_0x1de3ab(0x25e)]){_0x9abb57['x']+=_0x325a1a[_0x1de3ab(0x838)]*_0x299d81,_0x9abb57['y']+=_0x325a1a[_0x1de3ab(0x247)];}else _0x1dfa13['BattleCore']['Game_Battler_makeSpeed'][_0x1de3ab(0x40c)](this),this[_0x1de3ab(0x829)][_0x1de3ab(0x4ce)]<=0x0&&(this[_0x1de3ab(0x96c)]=_0x152b6a[_0x1de3ab(0x5c2)]);}else{if('HkrqL'===_0x1de3ab(0x5ad))_0x522422+=(_0x59daeb['width']-_0x8882cd)/0x2;else{const _0x4e001a=this[_0x1de3ab(0x25e)][this[_0x1de3ab(0x25e)][_0x1de3ab(0x4ce)]-0x1];_0x4e001a&&(_0x55579c['x']=_0x4e001a['x']+_0x325a1a[_0x1de3ab(0x838)]*_0x299d81,_0x55579c['y']=_0x4e001a['y']+_0x325a1a['PopupShiftY']);}}},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0xa01)]=function(_0x22ad2c,_0x26d80f){const _0x2df4c6=_0x2546c9,_0x3c5fef=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x536824=this[_0x2df4c6(0xa2f)];_0x536824+=this[_0x2df4c6(0x21b)]();let _0x599d4b=this[_0x2df4c6(0x38a)];const _0x255633=this[_0x2df4c6(0x9bf)][_0x2df4c6(0x6a1)]['y'];_0x599d4b+=this[_0x2df4c6(0x8e)]();const _0x45b43d=SceneManager[_0x2df4c6(0x465)][_0x2df4c6(0x432)];if(_0x45b43d&&this['parent']===_0x45b43d){_0x536824+=_0x45b43d['x']-this[_0x2df4c6(0x337)]();const _0x30292f=_0x45b43d[_0x2df4c6(0x7e8)]()*0x3/0x4;_0x599d4b=_0x45b43d['y']+_0x30292f,_0x599d4b=Math[_0x2df4c6(0xaaa)](_0x599d4b,_0x45b43d['y']+this['y']-this[_0x2df4c6(0x3de)]+_0x30292f);}_0x22ad2c['x']=Math[_0x2df4c6(0x19b)](_0x536824+this['damageOffsetX']()*_0x3c5fef),_0x22ad2c['y']=Math[_0x2df4c6(0x19b)](_0x599d4b+this[_0x2df4c6(0xad8)]());},VisuMZ[_0x2546c9(0x895)]['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x2546c9(0x79f)]['damageOffsetX'],Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x337)]=function(){const _0x46bee8=_0x2546c9;let _0x539633=VisuMZ['BattleCore'][_0x46bee8(0x8b4)][_0x46bee8(0x40c)](this),_0x284291=VisuMZ[_0x46bee8(0x895)][_0x46bee8(0x4b7)][_0x46bee8(0x2f3)][_0x46bee8(0xa21)]||0x0;return Math['round'](_0x539633+_0x284291);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x275)]=Sprite_Battler[_0x2546c9(0x79f)]['damageOffsetY'],Sprite_Battler['prototype'][_0x2546c9(0xad8)]=function(){const _0x3e0a62=_0x2546c9;let _0x7b7fda=VisuMZ[_0x3e0a62(0x895)][_0x3e0a62(0x275)][_0x3e0a62(0x40c)](this);switch(VisuMZ[_0x3e0a62(0x895)]['Settings'][_0x3e0a62(0x2f3)][_0x3e0a62(0x45a)]){case _0x3e0a62(0x4f7):_0x7b7fda-=this['height']*this['scale']['y'];break;case _0x3e0a62(0x6d3):_0x7b7fda-=this[_0x3e0a62(0x3de)]*this[_0x3e0a62(0x6a1)]['y']*0.5;break;}let _0x4115c1=VisuMZ[_0x3e0a62(0x895)][_0x3e0a62(0x4b7)]['Damage']['PopupOffsetY']||0x0;return Math['round'](_0x7b7fda+_0x4115c1);},Sprite_Actor[_0x2546c9(0x79f)]['damageOffsetX']=function(){const _0xc229df=_0x2546c9;return Sprite_Battler[_0xc229df(0x79f)][_0xc229df(0x337)][_0xc229df(0x40c)](this);},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0xad8)]=function(){const _0x5bce8b=_0x2546c9;return Sprite_Battler[_0x5bce8b(0x79f)][_0x5bce8b(0xad8)]['call'](this);},Sprite_Battler['prototype']['destroyDamageSprite']=function(_0x1f058e){const _0x14750b=_0x2546c9;if(this[_0x14750b(0x415)]())SceneManager[_0x14750b(0x465)][_0x14750b(0x432)]['removeDamageSprite'](_0x1f058e);else{if(_0x14750b(0x6d9)!==_0x14750b(0x6d9)){const _0x4e547d=_0x132c88[_0xbc382c];if(!_0x4e547d)return![];if(_0x4e547d['list'][_0x14750b(0x4ce)]<=0x1)return![];return!![];}else this[_0x14750b(0x87a)]()[_0x14750b(0xaa1)](_0x1f058e),this[_0x14750b(0x25e)][_0x14750b(0x8ad)](_0x1f058e),_0x1f058e[_0x14750b(0x71)]();}},VisuMZ[_0x2546c9(0x895)]['Sprite_Battler_setHome']=Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x75a)],Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x75a)]=function(_0x4c8a17,_0x455d2f){const _0x468bd4=_0x2546c9,_0x30dd43=VisuMZ[_0x468bd4(0x895)][_0x468bd4(0x4b7)];if(this[_0x468bd4(0x150)]===Sprite_Actor)_0x4c8a17+=_0x30dd43[_0x468bd4(0x99a)]['OffsetX']||0x0,_0x455d2f+=_0x30dd43[_0x468bd4(0x99a)][_0x468bd4(0x97)]||0x0;else this[_0x468bd4(0x150)]===Sprite_Enemy&&(_0x4c8a17+=_0x30dd43['Enemy'][_0x468bd4(0x43d)]||0x0,_0x455d2f+=_0x30dd43['Enemy'][_0x468bd4(0x97)]||0x0);if(this['_battler']){if(_0x468bd4(0x5fd)!==_0x468bd4(0x5fd)){if(!_0x283fe9)return;for(const _0xb02453 of _0x497da1['list']){if([0x6c,0x198][_0x468bd4(0xa7e)](_0xb02453[_0x468bd4(0x2a7)])){const _0x4beabb=_0xb02453['parameters'][0x0];if(_0x4beabb['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];}else _0x4c8a17=this[_0x468bd4(0xe2)][_0x468bd4(0x684)]??_0x4c8a17,_0x455d2f=this['_battler'][_0x468bd4(0x80e)]??_0x455d2f;}VisuMZ[_0x468bd4(0x895)]['Sprite_Battler_setHome'][_0x468bd4(0x40c)](this,_0x4c8a17,_0x455d2f),this[_0x468bd4(0x244)]=this[_0x468bd4(0x493)],this[_0x468bd4(0x4c9)]=this['_homeY'],this[_0x468bd4(0x865)]=0x0,this[_0x468bd4(0x26c)]=0x0,this[_0x468bd4(0x13c)]='Linear';},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x115)]=Sprite_Battler['prototype'][_0x2546c9(0x9c)],Sprite_Battler['prototype'][_0x2546c9(0x9c)]=function(){const _0x4e1de8=_0x2546c9;VisuMZ[_0x4e1de8(0x895)]['Sprite_Battler_update'][_0x4e1de8(0x40c)](this),!this['_battler']&&this[_0x4e1de8(0x6cb)]&&(this[_0x4e1de8(0x6cb)][_0x4e1de8(0xa5a)]=![]);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x98b)]=Sprite_Battler['prototype'][_0x2546c9(0x76e)],Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x76e)]=function(){const _0x498370=_0x2546c9;this['updateScale'](),this['updateSkew'](),this[_0x498370(0x963)](),this['updateFlip'](),VisuMZ[_0x498370(0x895)]['Sprite_Battler_updateMain'][_0x498370(0x40c)](this),this['updateHpGaugePosition']();if(this[_0x498370(0x150)]===Sprite_Enemy)this[_0x498370(0x135)]();},VisuMZ[_0x2546c9(0x895)]['Sprite_Battler_updatePosition']=Sprite_Battler['prototype'][_0x2546c9(0x92a)],Sprite_Battler[_0x2546c9(0x79f)]['updatePosition']=function(){const _0x2cc65d=_0x2546c9;this[_0x2cc65d(0x2b8)](),VisuMZ[_0x2cc65d(0x895)]['Sprite_Battler_updatePosition'][_0x2cc65d(0x40c)](this),this[_0x2cc65d(0x404)](),this[_0x2cc65d(0x143)]();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x791)]=function(_0x119ab8,_0x5ef040,_0x4a27a3,_0x3b2d42){const _0x224c7c=_0x2546c9;(this['_targetHomeX']!==_0x119ab8||this[_0x224c7c(0x4c9)]!==_0x5ef040)&&(this[_0x224c7c(0x244)]=_0x119ab8,this['_targetHomeY']=_0x5ef040,this['_homeDuration']=_0x4a27a3,this[_0x224c7c(0x26c)]=_0x4a27a3,this[_0x224c7c(0x13c)]=_0x3b2d42,_0x4a27a3<=0x0&&(_0x224c7c(0x416)!=='DkNFm'?(_0x44fdc2[_0x224c7c(0x79f)]['resetFontSettings']['call'](this),this[_0x224c7c(0x92e)][_0x224c7c(0x68a)]=_0x566801[_0x224c7c(0x895)][_0x224c7c(0x4b7)]['Enemy'][_0x224c7c(0x530)]):this[_0x224c7c(0x6da)]()));},Sprite_Battler['prototype'][_0x2546c9(0x2b8)]=function(){const _0x1dbc06=_0x2546c9;if(this[_0x1dbc06(0x865)]<=0x0)return;const _0x302b9b=this[_0x1dbc06(0x865)],_0x3d4ff1=this['_homeWholeDuration'],_0xa1486=this[_0x1dbc06(0x13c)];if(Imported[_0x1dbc06(0x53c)]){if(_0x1dbc06(0x4a8)!=='kLZag')return _0x1dbc06(0x51c);else this[_0x1dbc06(0x493)]=this['applyEasing'](this[_0x1dbc06(0x493)],this[_0x1dbc06(0x244)],_0x302b9b,_0x3d4ff1,_0xa1486),this[_0x1dbc06(0x450)]=this[_0x1dbc06(0xac6)](this[_0x1dbc06(0x450)],this[_0x1dbc06(0x4c9)],_0x302b9b,_0x3d4ff1,_0xa1486);}else this['_homeX']=(this['_homeX']*(_0x302b9b-0x1)+this[_0x1dbc06(0x244)])/_0x302b9b,this[_0x1dbc06(0x450)]=(this[_0x1dbc06(0x450)]*(_0x302b9b-0x1)+this['_targetHomeY'])/_0x302b9b;this[_0x1dbc06(0x865)]--;if(this[_0x1dbc06(0x865)]<=0x0)this[_0x1dbc06(0x6da)]();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x6da)]=function(){const _0x450ef0=_0x2546c9;this[_0x450ef0(0x493)]=this[_0x450ef0(0x244)],this['_homeY']=this[_0x450ef0(0x4c9)];},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x404)]=function(){const _0x33404d=_0x2546c9;this[_0x33404d(0xa2f)]=this['x'],this[_0x33404d(0x38a)]=this['y'],this[_0x33404d(0x41b)](),this[_0x33404d(0x828)](),this['x']+=this[_0x33404d(0x21b)](),this['y']+=this[_0x33404d(0x8e)](),this['y']+=this[_0x33404d(0x981)](),this['x']=Math[_0x33404d(0x296)](this['x']),this['y']=Math['floor'](this['y']);},Sprite_Battler['prototype'][_0x2546c9(0x21b)]=function(){let _0x395321=0x0;return _0x395321;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x8e)]=function(){const _0x575a8e=_0x2546c9;let _0x56f440=0x0;return this[_0x575a8e(0xe2)]&&!this[_0x575a8e(0xe2)][_0x575a8e(0x3c0)]()&&(_0x56f440-=this[_0x575a8e(0x946)],_0x56f440-=this[_0x575a8e(0x4f9)]),_0x56f440;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x981)]=function(){const _0x5de003=_0x2546c9;let _0x1abc95=0x0;if(this[_0x5de003(0x9bf)]&&this[_0x5de003(0x150)]!==Sprite_SvEnemy){const _0x25767b=this[_0x5de003(0x9bf)][_0x5de003(0x6a1)]['y'];_0x1abc95-=(_0x25767b-0x1)*this[_0x5de003(0x3de)];}return _0x1abc95;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x8be)]=function(){const _0x40a141=_0x2546c9,_0x4c3f88=this[_0x40a141(0xe2)]&&this[_0x40a141(0xe2)][_0x40a141(0xb20)]();this['_flipScaleX']=(_0x4c3f88?-0x1:0x1)*Math[_0x40a141(0x9d2)](this[_0x40a141(0x6a1)]['x']);},Sprite_Battler['prototype'][_0x2546c9(0xa3d)]=function(_0x250529,_0x53a672,_0x1071d5){const _0x5649e9=_0x2546c9;if(!this['canMove']())return;if(this[_0x5649e9(0xf3)]===_0x250529)return;this[_0x5649e9(0xf3)]=_0x250529,this[_0x5649e9(0x139)]=_0x53a672,this['_floatWholeDuration']=_0x53a672,this['_floatEasing']=_0x1071d5||_0x5649e9(0x695);if(_0x53a672<=0x0)this[_0x5649e9(0x946)]=_0x250529;},Sprite_Battler[_0x2546c9(0x79f)]['updateFloat']=function(){const _0x235774=_0x2546c9;if(this[_0x235774(0x139)]<=0x0)return;const _0x2bea63=this[_0x235774(0x139)],_0x34eb85=this[_0x235774(0x371)],_0x14b44d=this[_0x235774(0x7f7)];if(Imported[_0x235774(0x53c)]){if(_0x235774(0xb10)!==_0x235774(0xb10)){if(!_0x5cdd11['isSceneBattle']())return;_0xd7db0b['ConvertParams'](_0x2e041e,_0xbacf75);const _0x85b1b1=_0x5559dc[_0x235774(0x3fb)](),_0x1b63d7=_0x4a3d77[_0x235774(0x6f4)];if(!_0x85b1b1)return;_0x578585[_0x235774(0xa43)]--,_0x5a85dc[_0x235774(0x500)]=_0x184d03[_0x235774(0xb4)][_0x4a91d4[_0x235774(0xa43)]]||null,_0x5c4b90[_0x235774(0x500)]&&_0x1b63d7[_0x235774(0x13e)]()[_0x235774(0xb19)]()!==_0x235774(0x597)&&_0x85b1b1[_0x235774(0x810)]([_0x1b63d7]);}else this[_0x235774(0x946)]=this[_0x235774(0xac6)](this['_floatHeight'],this[_0x235774(0xf3)],_0x2bea63,_0x34eb85,_0x14b44d);}else this[_0x235774(0x946)]=(this[_0x235774(0x946)]*(_0x2bea63-0x1)+this[_0x235774(0xf3)])/_0x2bea63;this[_0x235774(0x139)]--;if(this[_0x235774(0x139)]<=0x0)this[_0x235774(0xb1)]();},Sprite_Battler['prototype'][_0x2546c9(0xb1)]=function(){const _0x7387b0=_0x2546c9;this[_0x7387b0(0x946)]=this['_targetFloatHeight'];},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x173)]=function(){const _0x4568d3=_0x2546c9;return this[_0x4568d3(0x139)]>0x0;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x4b1)]=function(_0x3f8c88,_0x381d8e){const _0x42501b=_0x2546c9;if(!this[_0x42501b(0x28d)]())return;if(_0x381d8e<=0x0)return;this['_jumpMaxHeight']=_0x3f8c88,this[_0x42501b(0x9b1)]=_0x381d8e,this[_0x42501b(0x7fd)]=_0x381d8e;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x828)]=function(){const _0x5e1ef4=_0x2546c9;if(this[_0x5e1ef4(0x9b1)]<=0x0)return;const _0x5f8739=this[_0x5e1ef4(0x7fd)]-this[_0x5e1ef4(0x9b1)],_0x9c008a=this['_jumpWholeDuration']/0x2,_0x4a1e1b=this[_0x5e1ef4(0xa04)],_0x141db2=-_0x4a1e1b/Math[_0x5e1ef4(0x1bc)](_0x9c008a,0x2);this[_0x5e1ef4(0x4f9)]=_0x141db2*Math[_0x5e1ef4(0x1bc)](_0x5f8739-_0x9c008a,0x2)+_0x4a1e1b,this[_0x5e1ef4(0x9b1)]--;if(this[_0x5e1ef4(0x9b1)]<=0x0)return this[_0x5e1ef4(0x5f1)]();},Sprite_Battler['prototype'][_0x2546c9(0x5f1)]=function(){const _0x36c90e=_0x2546c9;this[_0x36c90e(0x4f9)]=0x0;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x1ac)]=function(){const _0x10f39d=_0x2546c9;return this[_0x10f39d(0x9b1)]>0x0;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0xb47)]=function(_0x1435b4,_0x4b2dca,_0x3b4f33){const _0x23b6d8=_0x2546c9;if(this[_0x23b6d8(0x45c)]===_0x1435b4)return;this[_0x23b6d8(0x45c)]=_0x1435b4,this['_opacityDuration']=_0x4b2dca,this[_0x23b6d8(0x420)]=_0x4b2dca,this['_opacityEasing']=_0x3b4f33||_0x23b6d8(0x695);if(_0x4b2dca<=0x0)this[_0x23b6d8(0x3fc)]=_0x1435b4;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x143)]=function(){const _0x3aa327=_0x2546c9;if(this['constructor'][_0x3aa327(0x395)]===_0x3aa327(0x8fa))return;if(this[_0x3aa327(0x7f9)]<=0x0)return;const _0x32bdc8=this['_opacityDuration'],_0x2cb1fc=this['_opacityWholeDuration'],_0x3c43e5=this['_opacityEasing'];Imported['VisuMZ_0_CoreEngine']?this[_0x3aa327(0x3fc)]=this['applyEasing'](this[_0x3aa327(0x3fc)],this[_0x3aa327(0x45c)],_0x32bdc8,_0x2cb1fc,_0x3c43e5):_0x3aa327(0x9ac)!==_0x3aa327(0x77b)?this[_0x3aa327(0x3fc)]=(this['opacity']*(_0x32bdc8-0x1)+this[_0x3aa327(0x45c)])/_0x32bdc8:(this[_0x3aa327(0x183)]['svAnchorX']=_0x5389ba(_0x28804e['$1']),this[_0x3aa327(0x183)][_0x3aa327(0x26f)]=_0x8f2f25(_0x21aeb0['$2']));this[_0x3aa327(0x7f9)]--;if(this[_0x3aa327(0x7f9)]<=0x0)this[_0x3aa327(0x162)]();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x162)]=function(){const _0x5ad187=_0x2546c9;this[_0x5ad187(0x3fc)]=this['_targetOpacity'];},Sprite_Battler[_0x2546c9(0x79f)]['isChangingOpacity']=function(){const _0x256f82=_0x2546c9;return this[_0x256f82(0x7f9)]>0x0;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x135)]=function(){const _0x3f4825=_0x2546c9;this[_0x3f4825(0x731)][_0x3f4825(0xa5a)]=this[_0x3f4825(0xe2)][_0x3f4825(0x947)](),this[_0x3f4825(0x497)]();},Sprite_Battler[_0x2546c9(0x79f)]['updateShadowPosition']=function(){const _0x2c52ee=_0x2546c9;if(!this[_0x2c52ee(0x731)])return;this['_shadowSprite']['y']=this[_0x2c52ee(0x38a)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x2546c9(0x487)]=function(){const _0x4657cd=_0x2546c9;if(!this[_0x4657cd(0xe2)])return;this[_0x4657cd(0xa00)]=this[_0x4657cd(0xe2)]['battlerShadowScaleX'](),this[_0x4657cd(0x83b)]=this[_0x4657cd(0xe2)]['battlerShadowScaleY']();},Game_BattlerBase[_0x2546c9(0x79f)][_0x2546c9(0x19c)]=function(){const _0x2d27fd=_0x2546c9,_0x49e0c4=this[_0x2d27fd(0x55e)]()?this[_0x2d27fd(0x97d)]():this['enemy']();if(_0x49e0c4){const _0x542086=_0x49e0c4['note'];if(_0x542086[_0x2d27fd(0x1e0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x2d27fd(0x8c4)!==_0x2d27fd(0x733)?Number(RegExp['$1'])*0.01:![];else{if(_0x542086['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if(_0x2d27fd(0x1b9)==='sVYBI'){if(_0x1ff66d[_0x2d27fd(0xafd)](_0x811bfd))return!![];}else return Number(RegExp['$1'])||0x0;}}}return 0x1;},Game_BattlerBase[_0x2546c9(0x79f)]['battlerShadowScaleY']=function(){const _0xb54f9b=_0x2546c9,_0x44b7e4=this[_0xb54f9b(0x55e)]()?this[_0xb54f9b(0x97d)]():this[_0xb54f9b(0x951)]();if(_0x44b7e4){if(_0xb54f9b(0x79a)!==_0xb54f9b(0x79a))_0xe6a20b?this[_0xb54f9b(0x47e)](_0x568238[_0xb54f9b(0x223)],0x0):this['terminate']();else{const _0x3d1519=_0x44b7e4[_0xb54f9b(0x4c1)];if(_0x3d1519[_0xb54f9b(0x1e0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x3d1519[_0xb54f9b(0x1e0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if(_0xb54f9b(0x328)===_0xb54f9b(0x328))return Number(RegExp['$1'])||0x0;else{this[_0xb54f9b(0x9f9)]=_0x2afea1['width'],this[_0xb54f9b(0x3de)]=_0x2ac649[_0xb54f9b(0x3de)];const _0x4ac7b9=0x1;this[_0xb54f9b(0x6a1)]['x']=_0x4ac7b9,this[_0xb54f9b(0x6a1)]['y']=_0x4ac7b9,this['x']=0x0,this['y']=0x0;}}}}}return 0x1;},Sprite_Battler[_0x2546c9(0x79f)]['updateScale']=function(){const _0x7cad68=_0x2546c9;if(this[_0x7cad68(0x150)]===Sprite_SvEnemy)return;this[_0x7cad68(0x691)](),this[_0x7cad68(0x85f)]();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x85f)]=function(){const _0x480c55=_0x2546c9,_0x1bd361=this[_0x480c55(0x9bf)];_0x1bd361&&(_0x1bd361[_0x480c55(0x6a1)]['x']=this[_0x480c55(0x5e5)](),_0x1bd361[_0x480c55(0x6a1)]['y']=this['mainSpriteScaleY']());},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x5e5)]=function(){const _0xa1f64d=_0x2546c9;let _0x3c3cac=0x1;return _0x3c3cac*=this[_0xa1f64d(0x27e)],_0x3c3cac*=this['_growX'],_0x3c3cac;},Sprite_Battler[_0x2546c9(0x79f)]['mainSpriteScaleY']=function(){const _0x8b7863=_0x2546c9;return 0x1*this[_0x8b7863(0x3c4)];},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x62e)]=function(){const _0x2967e7=_0x2546c9;return this[_0x2967e7(0x9f9)]*this[_0x2967e7(0x5e5)]();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x617)]=function(){const _0x22f4ae=_0x2546c9;return this[_0x22f4ae(0x3de)]*this[_0x22f4ae(0x557)]();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x34b)]=function(_0x3825ca,_0x389707,_0x3380d1,_0x1e4b0a){const _0x1a8e0a=_0x2546c9;if(!this[_0x1a8e0a(0x28d)]())return;if(!this[_0x1a8e0a(0x9bf)])return;if(this['_targetGrowX']===_0x3825ca&&this[_0x1a8e0a(0x8e8)]===_0x389707)return;this[_0x1a8e0a(0x5f0)]=_0x3825ca,this[_0x1a8e0a(0x8e8)]=_0x389707,this['_growDuration']=_0x3380d1,this['_growWholeDuration']=_0x3380d1,this[_0x1a8e0a(0x74b)]=_0x1e4b0a||_0x1a8e0a(0x695),_0x3380d1<=0x0&&(_0x1a8e0a(0xf9)===_0x1a8e0a(0xf9)?(this[_0x1a8e0a(0x218)]=this[_0x1a8e0a(0x5f0)],this[_0x1a8e0a(0x3c4)]=this[_0x1a8e0a(0x8e8)]):(_0x24ee9c[_0x1a8e0a(0x79f)][_0x1a8e0a(0x9c)]['call'](this),this['enemy']()&&this[_0x1a8e0a(0x951)]()[_0x1a8e0a(0x395)]()!==this[_0x1a8e0a(0x155)]&&(this[_0x1a8e0a(0x155)]=this[_0x1a8e0a(0x951)]()['name'](),this[_0x1a8e0a(0x48c)]()),this[_0x1a8e0a(0x143)](),this[_0x1a8e0a(0x92a)]()));},Sprite_Battler['prototype'][_0x2546c9(0x691)]=function(){const _0x57420b=_0x2546c9;if(this[_0x57420b(0xb4f)]<=0x0)return;if(!this[_0x57420b(0x9bf)])return;const _0x172092=this[_0x57420b(0xb4f)],_0x29a18f=this['_growWholeDuration'],_0x4617b1=this[_0x57420b(0x74b)];Imported['VisuMZ_0_CoreEngine']?(this[_0x57420b(0x218)]=this[_0x57420b(0xac6)](this[_0x57420b(0x218)],this['_targetGrowX'],_0x172092,_0x29a18f,_0x4617b1),this[_0x57420b(0x3c4)]=this[_0x57420b(0xac6)](this['_growY'],this[_0x57420b(0x8e8)],_0x172092,_0x29a18f,_0x4617b1)):(this[_0x57420b(0x218)]=(this[_0x57420b(0x218)]*(_0x172092-0x1)+this['_targetGrowX'])/_0x172092,this['_growY']=(this[_0x57420b(0x3c4)]*(_0x172092-0x1)+this[_0x57420b(0x8e8)])/_0x172092);this[_0x57420b(0xb4f)]--;if(this[_0x57420b(0xb4f)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0xbe)]=function(){const _0x14288d=_0x2546c9;this[_0x14288d(0x218)]=this['_targetGrowX'],this['_growY']=this[_0x14288d(0x8e8)];},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x26e)]=function(){const _0x62524=_0x2546c9;return this[_0x62524(0xb4f)]>0x0;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0xa83)]=function(_0x24261c,_0x5d30b3,_0x28870a,_0x25a97f){const _0x47f243=_0x2546c9;if(!this[_0x47f243(0x28d)]())return;if(!this[_0x47f243(0x9bf)])return;if(this[_0x47f243(0x8de)]===_0x24261c&&this[_0x47f243(0x22b)]===_0x5d30b3)return;this[_0x47f243(0x8de)]=_0x24261c,this[_0x47f243(0x22b)]=_0x5d30b3,this[_0x47f243(0x468)]=_0x28870a,this[_0x47f243(0x73e)]=_0x28870a,this[_0x47f243(0x564)]=_0x25a97f||_0x47f243(0x695),_0x28870a<=0x0&&(this[_0x47f243(0x9bf)]['skew']['x']=this[_0x47f243(0x8de)],this[_0x47f243(0x9bf)][_0x47f243(0x969)]['y']=this[_0x47f243(0x22b)]);},Sprite_Battler['prototype']['updateSkew']=function(){const _0x7a0c38=_0x2546c9;if(this[_0x7a0c38(0x468)]<=0x0)return;if(!this[_0x7a0c38(0x9bf)])return;const _0x9b9bbd=this[_0x7a0c38(0x468)],_0x250411=this['_skewWholeDuration'],_0x19f496=this[_0x7a0c38(0x564)],_0x164703=this[_0x7a0c38(0x9bf)];if(Imported['VisuMZ_0_CoreEngine'])_0x164703[_0x7a0c38(0x969)]['x']=this[_0x7a0c38(0xac6)](_0x164703[_0x7a0c38(0x969)]['x'],this[_0x7a0c38(0x8de)],_0x9b9bbd,_0x250411,_0x19f496),_0x164703[_0x7a0c38(0x969)]['y']=this[_0x7a0c38(0xac6)](_0x164703[_0x7a0c38(0x969)]['y'],this[_0x7a0c38(0x22b)],_0x9b9bbd,_0x250411,_0x19f496);else{if(_0x7a0c38(0x54b)==='eXqqj')_0x164703[_0x7a0c38(0x969)]['x']=(_0x164703['skew']['x']*(_0x9b9bbd-0x1)+this[_0x7a0c38(0x8de)])/_0x9b9bbd,_0x164703[_0x7a0c38(0x969)]['y']=(_0x164703[_0x7a0c38(0x969)]['y']*(_0x9b9bbd-0x1)+this[_0x7a0c38(0x22b)])/_0x9b9bbd;else{_0x4eae47('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x245dad['exit']();return;}}this[_0x7a0c38(0x468)]--;if(this[_0x7a0c38(0x468)]<=0x0)this['onSkewEnd']();},Sprite_Battler['prototype'][_0x2546c9(0x88)]=function(){const _0x336d5c=_0x2546c9;this['_distortionSprite'][_0x336d5c(0x969)]['x']=this[_0x336d5c(0x8de)],this[_0x336d5c(0x9bf)]['skew']['y']=this[_0x336d5c(0x22b)];},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x39a)]=function(){const _0x346fc9=_0x2546c9;return this[_0x346fc9(0x468)]>0x0;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0xb05)]=function(_0x14231c,_0x4e3cd3,_0x265da9,_0x1b5ebb){const _0x44161c=_0x2546c9;if(!this[_0x44161c(0x28d)]())return;if(!this[_0x44161c(0x9bf)])return;if(this[_0x44161c(0x27a)]===_0x14231c)return;this['_targetAngle']=_0x14231c,this[_0x44161c(0x20e)]=_0x4e3cd3,this['_angleWholeDuration']=_0x4e3cd3,this[_0x44161c(0x1f2)]=_0x265da9||_0x44161c(0x695),this['_angleRevertOnFinish']=_0x1b5ebb,this[_0x44161c(0x566)]===undefined&&(this[_0x44161c(0x566)]=!![]),_0x4e3cd3<=0x0&&(this[_0x44161c(0x3ef)]=_0x14231c,this[_0x44161c(0x566)]&&(this['_targetAngle']=0x0,this[_0x44161c(0x3ef)]=0x0));},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x963)]=function(){const _0x4d9cbd=_0x2546c9;this[_0x4d9cbd(0x18d)](),this['applyAngleChange']();},Sprite_Battler[_0x2546c9(0x79f)]['updateAngleCalculations']=function(){const _0x58183b=_0x2546c9;if(this['_angleDuration']<=0x0)return;const _0x3bea68=this[_0x58183b(0x20e)],_0x561577=this['_angleWholeDuration'],_0x26b64e=this[_0x58183b(0x1f2)];Imported[_0x58183b(0x53c)]?this[_0x58183b(0x3ef)]=this['applyEasing'](this[_0x58183b(0x3ef)],this[_0x58183b(0x27a)],_0x3bea68,_0x561577,_0x26b64e):this['_currentAngle']=(this[_0x58183b(0x3ef)]*(_0x3bea68-0x1)+this[_0x58183b(0x27a)])/_0x3bea68;this[_0x58183b(0x20e)]--;if(this[_0x58183b(0x20e)]<=0x0)this[_0x58183b(0x60c)]();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x60c)]=function(){const _0x11ccf0=_0x2546c9;this[_0x11ccf0(0x3ef)]=this[_0x11ccf0(0x27a)],this['_angleRevertOnFinish']&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0xa4b)]=function(){const _0x221d02=_0x2546c9;return this[_0x221d02(0x20e)]>0x0;},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0xa1a)]=function(){const _0x4729fb=_0x2546c9;if(!this['_distortionSprite'])return;const _0x5be4dd=this[_0x4729fb(0x3ef)],_0xcb5506=this[_0x4729fb(0x6a1)]['x'],_0x449012=this[_0x4729fb(0xe2)]['isActor']()?-0x1:0x1;this[_0x4729fb(0x9bf)]['angle']=_0x5be4dd*_0xcb5506*_0x449012;const _0x3bb975=this['_distortionSprite'][_0x4729fb(0x6a1)]['y'];this[_0x4729fb(0x9bf)]['y']=this[_0x4729fb(0x3de)]*-0.5*(0x2-_0x3bb975),this['_distortionSprite']['y']=Math[_0x4729fb(0x57f)](this[_0x4729fb(0x9bf)]['y']);const _0xecc0c3=[this[_0x4729fb(0x53a)],this[_0x4729fb(0xaba)],this[_0x4729fb(0x697)]];for(const _0x4253ee of _0xecc0c3){if('aDogn'==='aDogn'){if(!_0x4253ee)continue;_0x4253ee['y']=this['height']*0.5;}else{if(_0x29294e[_0x4729fb(0x119)][_0x4729fb(0x88f)]===0x3)return![];}}this[_0x4729fb(0x731)]&&(this['_shadowScaleX']=this[_0x4729fb(0xa00)]??0x1,this[_0x4729fb(0x83b)]=this[_0x4729fb(0x83b)]??0x1,this[_0x4729fb(0x731)][_0x4729fb(0x6a1)]['x']=this[_0x4729fb(0x9bf)][_0x4729fb(0x6a1)]['x']*this['_shadowScaleX'],this[_0x4729fb(0x731)][_0x4729fb(0x6a1)]['y']=this[_0x4729fb(0x9bf)][_0x4729fb(0x6a1)]['y']*this['_shadowScaleY']);},VisuMZ[_0x2546c9(0x895)]['Sprite_Actor_createStateSprite']=Sprite_Actor['prototype'][_0x2546c9(0x527)],Sprite_Actor['prototype'][_0x2546c9(0x527)]=function(){const _0x3bc5e4=_0x2546c9;VisuMZ[_0x3bc5e4(0x895)][_0x3bc5e4(0x39e)]['call'](this),VisuMZ[_0x3bc5e4(0x895)][_0x3bc5e4(0x4b7)][_0x3bc5e4(0x85b)][_0x3bc5e4(0x462)]&&this[_0x3bc5e4(0xaf5)]();},VisuMZ[_0x2546c9(0x895)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy['prototype']['createStateIconSprite'],Sprite_Enemy[_0x2546c9(0x79f)]['createStateIconSprite']=function(){const _0x148104=_0x2546c9;VisuMZ[_0x148104(0x895)]['Settings'][_0x148104(0x85b)][_0x148104(0x942)]&&this[_0x148104(0xaf5)](),VisuMZ[_0x148104(0x895)]['Sprite_Enemy_createStateIconSprite'][_0x148104(0x40c)](this);},Sprite_Battler['prototype']['createHpGaugeSprite']=function(){const _0x14f5b6=_0x2546c9;if(!ConfigManager[_0x14f5b6(0xb0a)])return;if(this[_0x14f5b6(0x150)]===Sprite_SvEnemy)return;const _0x923e24=VisuMZ[_0x14f5b6(0x895)][_0x14f5b6(0x4b7)]['HpGauge'],_0x2d25cb=new Sprite_HpGauge();_0x2d25cb[_0x14f5b6(0x9a7)]['x']=_0x923e24[_0x14f5b6(0x72c)],_0x2d25cb[_0x14f5b6(0x9a7)]['y']=_0x923e24['AnchorY'],_0x2d25cb['scale']['x']=_0x2d25cb[_0x14f5b6(0x6a1)]['y']=_0x923e24['Scale'],this[_0x14f5b6(0x6cb)]=_0x2d25cb,this['addChild'](this[_0x14f5b6(0x6cb)]),Spriteset_Battle[_0x14f5b6(0x999)]&&BattleManager[_0x14f5b6(0x134)](this[_0x14f5b6(0x6cb)]);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x369)]=Sprite_Battler[_0x2546c9(0x79f)]['setBattler'],Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x806)]=function(_0x3af761){const _0x1a1078=_0x2546c9,_0x36c7ab=this['_battler'];VisuMZ[_0x1a1078(0x895)]['Sprite_Battler_setBattler'][_0x1a1078(0x40c)](this,_0x3af761),this[_0x1a1078(0x34d)](_0x3af761);if(_0x36c7ab!==_0x3af761)this[_0x1a1078(0x487)]();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x34d)]=function(_0x1bd482){const _0x3d150e=_0x2546c9;if(!_0x1bd482)return;if(!this['_hpGaugeSprite'])return;if(_0x1bd482[_0x3d150e(0x55e)]()){}else{if(_0x1bd482[_0x3d150e(0x2e4)]()){if(_0x3d150e(0x4e4)===_0x3d150e(0x4e4)){if(this['constructor']===Sprite_SvEnemy&&!_0x1bd482[_0x3d150e(0x947)]())return;}else{let _0x1ba9d8=_0x38ec89[_0x3d150e(0x895)][_0x3d150e(0x339)][_0x3d150e(0x40c)](this,_0x2b9381);return _0x1ba9d8=this[_0x3d150e(0x14b)]['hitRate']*_0x1ba9d8+this['_multipliers'][_0x3d150e(0x873)],_0x1ba9d8;}}}this['_hpGaugeSprite'][_0x3d150e(0x47e)](_0x1bd482,'hp');},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x3ea)]=function(){const _0x2ddd1e=_0x2546c9;return this[_0x2ddd1e(0xe2)]&&this[_0x2ddd1e(0xe2)]['hasStaticSvBattler']();},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x7b0)]=function(){const _0x57edb0=_0x2546c9,_0x10f43f=this['_mainSprite'][_0x57edb0(0x2c4)];if(!_0x10f43f)return;const _0x3abcea=_0x10f43f['width'];let _0x14ae70=_0x10f43f['height'];if(this['_battler'][_0x57edb0(0x4ca)]()){if(_0x57edb0(0x6a7)===_0x57edb0(0x6a7)){if(this[_0x57edb0(0x189)])_0x14ae70=Math[_0x57edb0(0x556)](0x0,this['_frame'][_0x57edb0(0x3de)]-0x4);}else this[_0x57edb0(0x69)]=new _0x5dd1a1(),this[_0x57edb0(0x8c8)](this[_0x57edb0(0x69)]);}this[_0x57edb0(0x53a)][_0x57edb0(0x2a1)](0x0,0x0,_0x3abcea,_0x14ae70),this[_0x57edb0(0x2a1)](0x0,0x0,_0x3abcea,_0x14ae70);},Sprite_Battler[_0x2546c9(0x79f)]['updateHpGaugePosition']=function(){const _0x452e15=_0x2546c9;if(!this['_battler'])return;if(!this[_0x452e15(0x6cb)])return;const _0x37c870=VisuMZ[_0x452e15(0x895)][_0x452e15(0x4b7)][_0x452e15(0x85b)],_0x37fed0=this[_0x452e15(0x6cb)];_0x37fed0[_0x452e15(0xa5a)]=this[_0x452e15(0x428)]();const _0x4ab503=_0x37c870['OffsetX'],_0x176150=_0x37c870[_0x452e15(0x97)];_0x37fed0['x']=_0x4ab503,_0x37fed0['x']+=this[_0x452e15(0xe2)][_0x452e15(0x6db)](),_0x37fed0['y']=-this['height']+_0x176150,_0x37fed0['y']+=this['_battler'][_0x452e15(0x4b9)](),Spriteset_Battle[_0x452e15(0x999)]&&SceneManager[_0x452e15(0x465)][_0x452e15(0x5a6)]&&(_0x37fed0['x']+=this['x'],_0x37fed0['y']+=this['y']);},Sprite_Battler[_0x2546c9(0x79f)]['isVisualHpGaugeDisplayed']=function(){const _0x5c5f16=_0x2546c9;if(!this[_0x5c5f16(0xe2)])return![];if(this[_0x5c5f16(0xe2)][_0x5c5f16(0x55e)]())return!![];if(this['_battler'][_0x5c5f16(0x1ae)]())return![];if(this['opacity']<=0x0)return![];const _0x3db2f2=this[_0x5c5f16(0xe2)]['enemy']()['note'];if(_0x3db2f2[_0x5c5f16(0x1e0)](/<SHOW HP GAUGE>/i))return!![];if(_0x3db2f2[_0x5c5f16(0x1e0)](/<HIDE HP GAUGE>/i))return![];const _0x5515a=VisuMZ[_0x5c5f16(0x895)][_0x5c5f16(0x4b7)][_0x5c5f16(0x85b)];if(_0x5515a[_0x5c5f16(0x377)]){if(_0x5515a[_0x5c5f16(0x362)]&&BattleManager['isBattleTest']())return!![];if(this[_0x5c5f16(0xe2)][_0x5c5f16(0x1dc)])return![];return this['_battler']['hasBeenDefeatedBefore']();}return!![];},VisuMZ['BattleCore']['Sprite_Battler_isMoving']=Sprite_Battler[_0x2546c9(0x79f)]['isMoving'],Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0xa7b)]=function(){const _0x3a57ee=_0x2546c9;if(!this[_0x3a57ee(0xe2)])return![];if(this[_0x3a57ee(0x865)]>0x0)return!![];return VisuMZ['BattleCore'][_0x3a57ee(0x372)][_0x3a57ee(0x40c)](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x923)]=Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0xc3)],Sprite_Battler[_0x2546c9(0x79f)]['startMove']=function(_0x54ad2d,_0x53a9de,_0x2ea518){const _0x219e64=_0x2546c9;if(this['canMove']()){if(_0x219e64(0x664)!=='oSJwb'){const _0x5d4173=_0x5bae9f[_0x219e64(0x505)]('['+_0x568e4a['$1'][_0x219e64(0x1e0)](/\d+/g)+']');for(const _0x1c580c of _0x5d4173){if(_0x23ada9[_0x219e64(0xafd)](_0x1c580c))return!![];}return![];}else VisuMZ[_0x219e64(0x895)][_0x219e64(0x923)][_0x219e64(0x40c)](this,_0x54ad2d,_0x53a9de,_0x2ea518);}},Sprite_Battler['prototype'][_0x2546c9(0x28d)]=function(){const _0x593863=_0x2546c9;if(this[_0x593863(0xe2)]&&this['_battler'][_0x593863(0x4ca)]())return![];if(this[_0x593863(0xe2)]&&!this[_0x593863(0xe2)]['canBattlerMove']())return![];return $gameSystem['isSideView']();},Sprite_Battler['prototype'][_0x2546c9(0x66b)]=function(){},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x757)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x2546c9(0x79f)]['retreat']=function(){},Sprite_Battler[_0x2546c9(0x79f)][_0x2546c9(0x6f9)]=function(){const _0xe72463=_0x2546c9,_0x1f5815=VisuMZ[_0xe72463(0x895)]['Settings']['Actor'],_0x547ee5=this['_battler']&&this[_0xe72463(0xe2)][_0xe72463(0x55e)]()?0x1:-0x1,_0x3d0ee0=this[_0xe72463(0xa2f)]-this[_0xe72463(0x493)]+_0x547ee5*_0x1f5815['FlinchDistanceX'],_0x1eba26=this[_0xe72463(0x38a)]-this['_homeY']+_0x547ee5*_0x1f5815[_0xe72463(0x3fd)],_0x2aad00=_0x1f5815[_0xe72463(0x96e)];this['startMove'](_0x3d0ee0,_0x1eba26,_0x2aad00);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x62f)]=Sprite_Actor['prototype'][_0x2546c9(0x3b2)],Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x3b2)]=function(){const _0x395e27=_0x2546c9;VisuMZ[_0x395e27(0x895)]['Sprite_Actor_initMembers'][_0x395e27(0x40c)](this),this[_0x395e27(0x3f6)]();},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0xbf)]=function(){const _0x39d126=_0x2546c9;return this[_0x39d126(0x9bf)]||this[_0x39d126(0x53a)]||this;},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8fc)]=Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x1fb)],Sprite_Actor['prototype'][_0x2546c9(0x1fb)]=function(){},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x16d)]=function(_0x5e32b3){const _0x16042d=_0x2546c9;if(SceneManager[_0x16042d(0x317)]())return;if(!_0x5e32b3)return;if(!_0x5e32b3[_0x16042d(0x28d)]())return;VisuMZ[_0x16042d(0x895)][_0x16042d(0x8fc)]['call'](this);},VisuMZ['BattleCore']['Sprite_Actor_setActorHome']=Sprite_Actor['prototype'][_0x2546c9(0xa27)],Sprite_Actor['prototype'][_0x2546c9(0xa27)]=function(_0x4338c0){const _0x32efbf=_0x2546c9;VisuMZ[_0x32efbf(0x895)][_0x32efbf(0x4b7)][_0x32efbf(0x99a)][_0x32efbf(0x43e)]?VisuMZ[_0x32efbf(0x895)][_0x32efbf(0x4b7)][_0x32efbf(0x99a)]['HomePosJS'][_0x32efbf(0x40c)](this,_0x4338c0):_0x32efbf(0x1db)===_0x32efbf(0x5f3)?_0x5f1e7f[_0x32efbf(0x465)][_0x32efbf(0x8b9)]():VisuMZ[_0x32efbf(0x895)][_0x32efbf(0x288)][_0x32efbf(0x40c)](this,_0x4338c0);},VisuMZ['BattleCore'][_0x2546c9(0x6e9)]=Sprite_Actor[_0x2546c9(0x79f)]['setBattler'],Sprite_Actor['prototype'][_0x2546c9(0x806)]=function(_0x6142c){const _0x1404ec=_0x2546c9;VisuMZ[_0x1404ec(0x895)][_0x1404ec(0x6e9)][_0x1404ec(0x40c)](this,_0x6142c),this['setBattlerBattleCore'](_0x6142c);},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x8da)]=function(_0x5c3322){const _0x1e91a1=_0x2546c9;if(!_0x5c3322)return;if(!this['_mainSprite'])return;this[_0x1e91a1(0x53a)]['anchor']['x']=this['_actor'][_0x1e91a1(0x914)](),this['_mainSprite'][_0x1e91a1(0x9a7)]['y']=this[_0x1e91a1(0x2f0)]['svBattlerAnchorY'](),this[_0x1e91a1(0x99d)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x5cb)]=Sprite_Actor['prototype'][_0x2546c9(0x9c)],Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x9c)]=function(){const _0x49c317=_0x2546c9;VisuMZ[_0x49c317(0x895)][_0x49c317(0x5cb)][_0x49c317(0x40c)](this),this[_0x49c317(0x2f0)]&&(this[_0x49c317(0x636)](),this[_0x49c317(0x656)]());},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x9ba)]=Sprite_Actor[_0x2546c9(0x79f)]['updateBitmap'],Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x907)]=function(){const _0x53c842=_0x2546c9;VisuMZ[_0x53c842(0x895)]['Sprite_Actor_updateBitmap'][_0x53c842(0x40c)](this);if(this[_0x53c842(0x53a)]&&this[_0x53c842(0x53a)]['bitmap']&&this['_battler']){if(_0x53c842(0x932)===_0x53c842(0x932)){if(this[_0x53c842(0x53a)][_0x53c842(0x2c4)]['smooth']!==this['_battler'][_0x53c842(0x4bb)]()){if(_0x53c842(0x454)!==_0x53c842(0x454)){const _0x1d4563=_0x408693[_0x53c842(0x4c1)];if(_0x1d4563['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x4b4f1d(_0x57b8c3['$1'])*0.01;else{if(_0x1d4563['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x481c36(_0x3a14b1['$1'])||0x0;}}else this[_0x53c842(0x53a)][_0x53c842(0x2c4)][_0x53c842(0xac1)]=this[_0x53c842(0xe2)][_0x53c842(0x4bb)]();}}else this[_0x53c842(0x20d)](_0x16d0bf,_0x42bf87,_0x3aef37);}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xb4a)]=Sprite_Actor['prototype'][_0x2546c9(0x135)],Sprite_Actor[_0x2546c9(0x79f)]['updateShadow']=function(){const _0x6b0e34=_0x2546c9;VisuMZ['BattleCore'][_0x6b0e34(0xb4a)]['call'](this),this[_0x6b0e34(0x5d0)]();},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x5d0)]=function(){const _0x29329d=_0x2546c9;if(!this[_0x29329d(0x53a)])return;if(!this['_shadowSprite'])return;this[_0x29329d(0x99d)](),this[_0x29329d(0x497)]();},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x636)]=function(){const _0x400160=_0x2546c9;this[_0x400160(0x355)]['scale']['x']=0x1/(this[_0x400160(0x6a1)]['x']||0.001),this[_0x400160(0x355)][_0x400160(0x6a1)]['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x656)]=function(){const _0x11d238=_0x2546c9;if(!$gameSystem[_0x11d238(0x165)]()&&this[_0x11d238(0x150)]===Sprite_Actor){const _0x1e620a=Scene_Battle[_0x11d238(0x79f)][_0x11d238(0x8e0)]();[_0x11d238(0x304),'list','portrait',_0x11d238(0x60d)][_0x11d238(0xa7e)](_0x1e620a)&&(this[_0x11d238(0x3fc)]=0x0);}},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0xc5)]=function(){const _0x28a3aa=_0x2546c9,_0xe615b7=this['_actor'];if(_0xe615b7){const _0x3a746=_0xe615b7['stateMotionIndex']();if(_0xe615b7[_0x28a3aa(0x680)]()||_0xe615b7[_0x28a3aa(0x8ed)]())this[_0x28a3aa(0x767)](_0x28a3aa(0x48a));else{if(_0x3a746===0x3)this['startMotion'](_0x28a3aa(0x1c1));else{if(_0x3a746===0x2)this['startMotion'](_0x28a3aa(0x842));else{if(this[_0x28a3aa(0x1e7)]){if(_0x28a3aa(0x8c5)!==_0x28a3aa(0x30a))this[_0x28a3aa(0x767)](_0x28a3aa(0x208));else return this['_immortal'];}else{if(_0xe615b7[_0x28a3aa(0x6e1)]()){if(_0x28a3aa(0x7b6)===_0x28a3aa(0x643)){if(!_0x1ef342['isSceneBattle']())return;const _0x1d631e=_0x17d056[_0x28a3aa(0x3fb)]();if(!_0x1d631e)return;_0x1d631e[_0x28a3aa(0x58f)](_0x28a3aa(0x113));}else this[_0x28a3aa(0x767)](_0x28a3aa(0x532));}else{if(_0xe615b7['isChanting']())this['startMotion'](_0x28a3aa(0x1a8));else{if(_0xe615b7['isGuard']()||_0xe615b7[_0x28a3aa(0x3a9)]())this[_0x28a3aa(0x767)]('guard');else{if(_0x3a746===0x1)this[_0x28a3aa(0x767)](_0x28a3aa(0x826));else{if(_0xe615b7['isDying']())this[_0x28a3aa(0x767)](_0x28a3aa(0x4ec));else{if(_0xe615b7[_0x28a3aa(0x8ca)]()){if(_0x28a3aa(0x9df)===_0x28a3aa(0x9df))this[_0x28a3aa(0x767)](_0x28a3aa(0x48a));else{if(this[_0x28a3aa(0x45c)]===_0x1163ce)return;this[_0x28a3aa(0x45c)]=_0x206bb0,this['_opacityDuration']=_0x382706,this['_opacityWholeDuration']=_0xc46707,this[_0x28a3aa(0x349)]=_0xd0dbf5||_0x28a3aa(0x695);if(_0x4fcd2f<=0x0)this[_0x28a3aa(0x3fc)]=_0x231c7b;}}else{if(_0xe615b7[_0x28a3aa(0xab2)]())this[_0x28a3aa(0x767)](_0x28a3aa(0x532));else{if(_0x28a3aa(0x7a2)!=='SmlrX')return _0x5408db[_0x28a3aa(0x895)][_0x28a3aa(0x4b7)][_0x28a3aa(0x2fa)][_0x28a3aa(0x70a)];else this[_0x28a3aa(0x767)](_0x28a3aa(0x48a));}}}}}}}}}}}}},Sprite_Actor[_0x2546c9(0x79f)]['retreat']=function(){const _0x5021b2=0xa,_0x4c7a57=0x12c*_0x5021b2,_0x28bd24=0x1e*_0x5021b2;this['startMove'](_0x4c7a57,0x0,_0x28bd24);},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x641)]=function(){const _0x3b0249=_0x2546c9;Sprite_Battler[_0x3b0249(0x79f)]['onMoveEnd'][_0x3b0249(0x40c)](this);},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x305)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x2546c9(0x79f)][_0x2546c9(0x533)]=function(){const _0x430e7d=_0x2546c9;return Sprite_Battler[_0x430e7d(0x436)];},Sprite_Actor['prototype'][_0x2546c9(0x790)]=function(){},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x933)]=function(){},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0xaa)]=function(){const _0x187f8e=_0x2546c9;if(this[_0x187f8e(0x28b)]&&++this[_0x187f8e(0x14d)]>=this[_0x187f8e(0x305)]()){if('JRdOr'===_0x187f8e(0x5db)){if(this[_0x187f8e(0x28b)][_0x187f8e(0x1b7)])this[_0x187f8e(0x772)]=(this[_0x187f8e(0x772)]+0x1)%0x4;else this[_0x187f8e(0x772)]<0x2?'FoIFH'!==_0x187f8e(0x46b)?(_0x1a625e['BattleCore'][_0x187f8e(0xb2f)]['call'](this,_0x5ceb39),this[_0x187f8e(0x2e4)]()&&_0x4113e9===this[_0x187f8e(0x91)]()&&this[_0x187f8e(0x21f)]()&&(this[_0x187f8e(0x1dc)]=![]),!this[_0x187f8e(0x460)]&&!this[_0x187f8e(0x91c)]&&_0x59b67d[_0x187f8e(0x671)]()&&this[_0x187f8e(0x32f)]()):this[_0x187f8e(0x772)]++:this[_0x187f8e(0xc5)]();this['_motionCount']=0x0;}else _0x29e16a[_0x187f8e(0x2f9)](_0x414fe4[0x2],_0x20aa3a[0x3]),_0x8b2c0e['forceAction'](_0x468679);}},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x45b)]=function(_0x26b872){const _0x4d5e75=_0x2546c9;if(_0x26b872===_0x4d5e75(0xae6))this[_0x4d5e75(0x442)]=!![];if(this[_0x4d5e75(0xe2)]&&this[_0x4d5e75(0xe2)][_0x4d5e75(0x4ca)]()){this[_0x4d5e75(0x28b)]=Sprite_Actor[_0x4d5e75(0x7e2)][_0x4d5e75(0x1c1)];return;}const _0x4c8d2d=Sprite_Actor[_0x4d5e75(0x7e2)][_0x26b872];this[_0x4d5e75(0x28b)]=_0x4c8d2d,this[_0x4d5e75(0x14d)]=0x0,this[_0x4d5e75(0x772)]=0x0;},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x52b)]=function(_0x159d04){const _0x4b8e3b=_0x2546c9;if(this[_0x4b8e3b(0x3ea)]())return;this[_0x4b8e3b(0x2c7)](),this[_0x4b8e3b(0x451)][_0x4b8e3b(0x47e)](_0x159d04),this['_actor']['clearWeaponAnimation']();},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x2c7)]=function(){const _0x54bffc=_0x2546c9;let _0x54c174=-0x10,_0x38a82b=this[_0x54bffc(0x3de)]*0.5;const _0xf45449=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x27a693=this[_0x54bffc(0xe2)][_0x54bffc(0x6b1)]()['map'](_0x3b6295=>_0x3b6295&&_0x3b6295['note']['match'](_0xf45449)?Number(RegExp['$1']):0x0),_0x472a26=this[_0x54bffc(0xe2)][_0x54bffc(0x6b1)]()[_0x54bffc(0x1b0)](_0x386fcd=>_0x386fcd&&_0x386fcd['note']['match'](_0xf45449)?Number(RegExp['$2']):0x0);_0x54c174=_0x27a693[_0x54bffc(0x4e3)]((_0x1856cb,_0x34491c)=>_0x1856cb+_0x34491c,_0x54c174),_0x38a82b=_0x472a26[_0x54bffc(0x4e3)]((_0xc47875,_0xcddc98)=>_0xc47875+_0xcddc98,_0x38a82b),this[_0x54bffc(0x451)]['x']=_0x54c174,this[_0x54bffc(0x451)]['y']=_0x38a82b,this[_0x54bffc(0x451)]['update']();},Sprite_Weapon[_0x2546c9(0x79f)][_0x2546c9(0x47e)]=function(_0x5cc070){const _0x16f22f=_0x2546c9;this['_weaponImageId']=_0x5cc070,this['_animationCount']=-0x1,this[_0x16f22f(0x772)]=0x0,this['loadBitmap'](),this[_0x16f22f(0x8dc)]();},Sprite_Actor['prototype'][_0x2546c9(0x816)]=function(){},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x66b)]=function(){const _0x3ced29=_0x2546c9,_0x2a9680=VisuMZ[_0x3ced29(0x895)]['Settings'][_0x3ced29(0x950)],_0x43be0c=_0x2a9680['StepDistanceX'],_0x12ab86=_0x2a9680[_0x3ced29(0x582)],_0x1f3022=_0x2a9680[_0x3ced29(0x8d)];this[_0x3ced29(0xc3)](-_0x43be0c,-_0x12ab86,_0x1f3022);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x712)]=Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x8dc)],Sprite_Actor[_0x2546c9(0x79f)]['updateFrame']=function(){const _0x300cb4=_0x2546c9;if(this['hasStaticSvBattler']())this[_0x300cb4(0x7b0)]();else{if(_0x300cb4(0x30e)===_0x300cb4(0x661)){let _0x3e2c79=_0x119b4e(_0x11bf60['$1']);while(_0x3e2c79--){_0x436fb3[_0x300cb4(0x40b)](this[_0x300cb4(0x2ec)]()[_0x300cb4(0x799)]());}return this[_0x300cb4(0x61f)](_0x214078);}else this[_0x300cb4(0x9a)](),VisuMZ['BattleCore'][_0x300cb4(0x712)][_0x300cb4(0x40c)](this);}},Sprite_Actor[_0x2546c9(0x79f)][_0x2546c9(0x9a)]=function(){const _0x409af=_0x2546c9;if(this['_battler']&&this[_0x409af(0xe2)][_0x409af(0x66a)]){if(_0x409af(0x8eb)!=='dvlHe'){const _0x2a25c9=this[_0x409af(0xe2)][_0x409af(0x66a)];this[_0x409af(0x28b)]=Sprite_Actor[_0x409af(0x7e2)][_0x2a25c9[_0x409af(0x4ad)]],this['_pattern']=_0x2a25c9[_0x409af(0xb5)];const _0x4d4c65=this[_0x409af(0x451)];_0x4d4c65[_0x409af(0xa92)](_0x2a25c9[_0x409af(0xad7)],_0x2a25c9[_0x409af(0xb5)]),this[_0x409af(0x2c7)]();}else{if(!this[_0x409af(0x825)]())return;if(!this['_borderPortraitSprite'])this['createBorderStylePortraitSprite']();this[_0x409af(0x202)](),this[_0x409af(0x9d4)]();}}},Sprite_Weapon[_0x2546c9(0x79f)][_0x2546c9(0xa92)]=function(_0x5776f9,_0x2ccb99){const _0x14cb72=_0x2546c9;this['_weaponImageId']=_0x5776f9,this[_0x14cb72(0x68f)]=-Infinity,this[_0x14cb72(0x772)]=_0x2ccb99,this['loadBitmap'](),this[_0x14cb72(0x8dc)]();},Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x3b2)]=function(){const _0x2e3f93=_0x2546c9;Sprite_Battler[_0x2e3f93(0x79f)][_0x2e3f93(0x3b2)][_0x2e3f93(0x40c)](this),this['_enemy']=null,this[_0x2e3f93(0x93)]=![],this[_0x2e3f93(0x85a)]='',this['_battlerHue']=0x0,this[_0x2e3f93(0x751)]=null,this[_0x2e3f93(0x707)]=0x0,this[_0x2e3f93(0x4d0)]=0x0,this[_0x2e3f93(0x180)](),this['createStateIconSprite']();},VisuMZ[_0x2546c9(0x895)]['Sprite_Enemy_update']=Sprite_Enemy['prototype'][_0x2546c9(0x9c)],Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x9c)]=function(){const _0x419bc4=_0x2546c9;VisuMZ['BattleCore']['Sprite_Enemy_update'][_0x419bc4(0x40c)](this),this[_0x419bc4(0x99d)]();},Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x180)]=function(){const _0x5e49e3=_0x2546c9;this['_mainSprite']=new Sprite(),this[_0x5e49e3(0x53a)]['anchor']['x']=0.5,this['_mainSprite'][_0x5e49e3(0x9a7)]['y']=0x1,this[_0x5e49e3(0x8c8)](this[_0x5e49e3(0x53a)]),this[_0x5e49e3(0x3f6)]();},Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0xbf)]=function(){const _0x5c5c74=_0x2546c9;return this['_distortionSprite']||this[_0x5c5c74(0x53a)]||this;},Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x978)]=function(_0x177675){const _0x55ad06=_0x2546c9;this[_0x55ad06(0x2c4)]=new Bitmap(0x1,0x1);if(this[_0x55ad06(0x947)]()){const _0x275aa9=this['_enemy'][_0x55ad06(0x425)]();this[_0x55ad06(0x2c4)]=new Bitmap(_0x275aa9['width'],_0x275aa9[_0x55ad06(0x3de)]),this[_0x55ad06(0x53a)][_0x55ad06(0x2c4)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x55ad06(0x165)]()){if('LVerW'!==_0x55ad06(0x1e4))return this['_isBattlerFlipped'];else this[_0x55ad06(0x53a)]['bitmap']=ImageManager[_0x55ad06(0x177)](_0x177675),this[_0x55ad06(0x53a)][_0x55ad06(0x2c4)][_0x55ad06(0x67)](this[_0x55ad06(0x259)][_0x55ad06(0x768)](this));}else{if(_0x55ad06(0xa30)!=='Nfitv'){if(this[_0x55ad06(0x865)]<=0x0)return;const _0x7d3048=this[_0x55ad06(0x865)],_0x409076=this['_homeWholeDuration'],_0x508367=this[_0x55ad06(0x13c)];_0x48b3fb[_0x55ad06(0x53c)]?(this[_0x55ad06(0x493)]=this['applyEasing'](this['_homeX'],this['_targetHomeX'],_0x7d3048,_0x409076,_0x508367),this[_0x55ad06(0x450)]=this[_0x55ad06(0xac6)](this[_0x55ad06(0x450)],this[_0x55ad06(0x4c9)],_0x7d3048,_0x409076,_0x508367)):(this[_0x55ad06(0x493)]=(this['_homeX']*(_0x7d3048-0x1)+this['_targetHomeX'])/_0x7d3048,this[_0x55ad06(0x450)]=(this['_homeY']*(_0x7d3048-0x1)+this[_0x55ad06(0x4c9)])/_0x7d3048);this[_0x55ad06(0x865)]--;if(this[_0x55ad06(0x865)]<=0x0)this[_0x55ad06(0x6da)]();}else this[_0x55ad06(0x53a)]['bitmap']=ImageManager[_0x55ad06(0x966)](_0x177675),this[_0x55ad06(0x53a)]['bitmap'][_0x55ad06(0x67)](this[_0x55ad06(0x259)][_0x55ad06(0x768)](this));}}},Sprite_Enemy['prototype'][_0x2546c9(0x259)]=function(){const _0x526d18=_0x2546c9,_0x391680=this[_0x526d18(0x53a)][_0x526d18(0x2c4)];_0x391680&&(this[_0x526d18(0x2c4)]=new Bitmap(_0x391680[_0x526d18(0x9f9)],_0x391680[_0x526d18(0x3de)]));},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x483)]=Sprite_Enemy['prototype'][_0x2546c9(0xa6d)],Sprite_Enemy['prototype'][_0x2546c9(0xa6d)]=function(_0x2da146){const _0xa5084d=_0x2546c9;this[_0xa5084d(0x53a)]&&(_0xa5084d(0x44c)===_0xa5084d(0x9c7)?_0x36844a[_0xa5084d(0x134)](this[_0xa5084d(0x6cb)]):this[_0xa5084d(0x53a)][_0xa5084d(0xa6d)](_0x2da146));},VisuMZ['BattleCore'][_0x2546c9(0x58c)]=Sprite_Enemy['prototype'][_0x2546c9(0x8b8)],Sprite_Enemy[_0x2546c9(0x79f)]['initVisibility']=function(){const _0x3e2481=_0x2546c9;if(this[_0x3e2481(0x781)]()){if('xTbUg'!=='KJvQF')VisuMZ[_0x3e2481(0x895)][_0x3e2481(0x58c)][_0x3e2481(0x40c)](this);else{if(!this[_0x3e2481(0x28d)]())return;if(!this[_0x3e2481(0x9bf)])return;if(this[_0x3e2481(0x27a)]===_0x211e94)return;this['_targetAngle']=_0x4e8ebe,this[_0x3e2481(0x20e)]=_0x529d63,this['_angleWholeDuration']=_0x5434eb,this[_0x3e2481(0x1f2)]=_0x1f85a0||_0x3e2481(0x695),this[_0x3e2481(0x566)]=_0x12b812,this[_0x3e2481(0x566)]===_0x4bc44c&&(this['_angleRevertOnFinish']=!![]),_0x237d42<=0x0&&(this[_0x3e2481(0x3ef)]=_0x571b8c,this[_0x3e2481(0x566)]&&(this[_0x3e2481(0x27a)]=0x0,this[_0x3e2481(0x3ef)]=0x0));}}else{this[_0x3e2481(0x93)]=!this['_enemy'][_0x3e2481(0x1ae)]();if(!this['_appeared']){if(_0x3e2481(0x958)!=='ubSZX')this[_0x3e2481(0x3fc)]=0x0;else return _0x1a89d9[_0x3e2481(0x895)][_0x3e2481(0x4b7)][_0x3e2481(0x1a3)][_0x3e2481(0x1d0)];}}},VisuMZ[_0x2546c9(0x895)]['Sprite_Enemy_updateCollapse']=Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x7bb)],Sprite_Enemy[_0x2546c9(0x79f)]['updateCollapse']=function(){const _0x1f7ce9=_0x2546c9;if(this['allowCollapse']())VisuMZ[_0x1f7ce9(0x895)][_0x1f7ce9(0x824)][_0x1f7ce9(0x40c)](this);},Sprite_Enemy[_0x2546c9(0x79f)]['updateFrame']=function(){const _0x3187d6=_0x2546c9;Sprite_Battler[_0x3187d6(0x79f)][_0x3187d6(0x8dc)]['call'](this);const _0x413848=this[_0x3187d6(0xbf)]()||this;if(!_0x413848)return;if(!_0x413848[_0x3187d6(0x2c4)]){if(_0x3187d6(0x4af)!==_0x3187d6(0x36a))_0x413848[_0x3187d6(0x2c4)]=new Bitmap(this[_0x3187d6(0x9f9)],this[_0x3187d6(0x3de)]);else{if(_0x107478[_0x3187d6(0x777)]())return'TPB';return _0x3187d6(0x11f);}}this[_0x3187d6(0x751)]===_0x3187d6(0x7ae)?'lsWNH'!==_0x3187d6(0xa0)?_0x2f759f=_0x28e1a6[_0x3187d6(0x80d)](_0x11b5fd):this[_0x3187d6(0x53a)]['setFrame'](0x0,0x0,this[_0x3187d6(0x53a)][_0x3187d6(0x9f9)],this['_effectDuration']):_0x3187d6(0x5d7)===_0x3187d6(0x5c7)?(_0x243749[_0x3187d6(0x895)][_0x3187d6(0xb00)]['call'](this),this[_0x3187d6(0x455)]()):_0x413848[_0x3187d6(0x2a1)](0x0,0x0,_0x413848[_0x3187d6(0x2c4)][_0x3187d6(0x9f9)],this[_0x3187d6(0x2c4)][_0x3187d6(0x3de)]);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x46f)]=Sprite_Enemy[_0x2546c9(0x79f)]['updateBossCollapse'],Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x753)]=function(){const _0x88318c=_0x2546c9;if(this[_0x88318c(0x781)]())VisuMZ['BattleCore'][_0x88318c(0x46f)]['call'](this);},Sprite_Enemy['prototype'][_0x2546c9(0xa7b)]=function(){const _0x20317a=_0x2546c9;return Sprite_Battler[_0x20317a(0x79f)][_0x20317a(0xa7b)]['call'](this);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x7e6)]=Sprite_Enemy['prototype'][_0x2546c9(0x636)],Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x636)]=function(){const _0x406357=_0x2546c9;VisuMZ[_0x406357(0x895)][_0x406357(0x7e6)][_0x406357(0x40c)](this),this[_0x406357(0x98c)]();},Sprite_Enemy[_0x2546c9(0x79f)]['updateStateSpriteBattleCore']=function(){const _0x5a4549=_0x2546c9,_0x49d856=VisuMZ['BattleCore'][_0x5a4549(0x4b7)][_0x5a4549(0x862)];if(_0x49d856[_0x5a4549(0x686)]&&!_0x49d856['NameLegacy']){this['_stateIconSprite'][_0x5a4549(0x3fc)]=0x0;return;}this[_0x5a4549(0x5eb)]['x']=0x0,this[_0x5a4549(0x5eb)]['x']+=this['_battler'][_0x5a4549(0x6db)](),this[_0x5a4549(0x5eb)]['y']=-this[_0x5a4549(0x2c4)]['height']-this['_stateIconSprite'][_0x5a4549(0x3de)]-0x4,this[_0x5a4549(0x5eb)]['y']+=this[_0x5a4549(0xe2)][_0x5a4549(0x4b9)](),this[_0x5a4549(0x5eb)][_0x5a4549(0x6a1)]['x']=0x1/(this[_0x5a4549(0x6a1)]['x']||0.001),this[_0x5a4549(0x5eb)]['scale']['y']=0x1/(this[_0x5a4549(0x6a1)]['y']||0.001),this['hasSvBattler']()&&(this[_0x5a4549(0xaba)][_0x5a4549(0x355)]['scale']['x']=-0x1/(this[_0x5a4549(0x6a1)]['x']||0.001),this[_0x5a4549(0xaba)][_0x5a4549(0x355)][_0x5a4549(0x6a1)]['y']=0x1/(this[_0x5a4549(0x6a1)]['y']||0.001));},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x4c6)]=Sprite_Enemy[_0x2546c9(0x79f)]['setBattler'],Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x806)]=function(_0x58fe7d){const _0x422ed8=_0x2546c9;VisuMZ['BattleCore'][_0x422ed8(0x4c6)][_0x422ed8(0x40c)](this,_0x58fe7d),this[_0x422ed8(0x31e)](_0x58fe7d);},Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x31e)]=function(_0x2027c1){const _0x532d4b=_0x2546c9;!this[_0x532d4b(0xaba)]&&('jkTtF'!==_0x532d4b(0x725)?(this[_0x532d4b(0x52a)](),this['addAutoBattleCommand'](),this[_0x532d4b(0x605)](),this[_0x532d4b(0x6f0)](),this[_0x532d4b(0x193)]()):(this[_0x532d4b(0xaba)]=new Sprite_SvEnemy(_0x2027c1),this['attachSpritesToDistortionSprite']())),this['_svBattlerSprite']['setBattler'](_0x2027c1);},Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x947)]=function(){const _0x3cd68c=_0x2546c9;return this[_0x3cd68c(0x2f2)]&&this[_0x3cd68c(0x2f2)]['hasSvBattler']();},Sprite_Enemy['prototype'][_0x2546c9(0x781)]=function(){const _0x576143=_0x2546c9;if(this[_0x576143(0x947)]()){if(_0x576143(0x290)===_0x576143(0x290))return this[_0x576143(0x2f2)]['allowCollapse']();else{if(!_0x1d0bf0)return;const _0x516e32=new _0x3352a8();this['addOnceParallelInterpreter'](_0x516e32),_0x516e32[_0x576143(0x677)](_0x2c0ff3);}}else return!![];},Sprite_Enemy['prototype']['refreshMotion']=function(){const _0x3900e0=_0x2546c9;this['hasSvBattler']()&&this[_0x3900e0(0xaba)][_0x3900e0(0xc5)]();},Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x45b)]=function(_0x5a82f0){const _0x17e309=_0x2546c9;if(this[_0x17e309(0x947)]())this[_0x17e309(0xaba)][_0x17e309(0x45b)](_0x5a82f0);},Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x52b)]=function(_0x378ec9){const _0x4f0446=_0x2546c9;if(this[_0x4f0446(0x947)]())this['_svBattlerSprite'][_0x4f0446(0x52b)](_0x378ec9);},Sprite_Enemy[_0x2546c9(0x79f)][_0x2546c9(0x66b)]=function(){const _0x36b0f2=_0x2546c9,_0xaed9d4=VisuMZ[_0x36b0f2(0x895)][_0x36b0f2(0x4b7)][_0x36b0f2(0x950)],_0x5e7e15=_0xaed9d4[_0x36b0f2(0x8b)],_0x21cf8c=_0xaed9d4[_0x36b0f2(0x582)],_0xbaed6a=_0xaed9d4[_0x36b0f2(0x8d)];this['startMove'](_0x5e7e15,_0x21cf8c,_0xbaed6a);};function Sprite_SvEnemy(){const _0x2762fc=_0x2546c9;this[_0x2762fc(0x4c3)](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x2546c9(0x315)](Sprite_Actor[_0x2546c9(0x79f)]),Sprite_SvEnemy[_0x2546c9(0x79f)]['constructor']=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x2546c9(0x4c3)]=function(_0x5073cb){const _0x306e27=_0x2546c9;Sprite_Actor[_0x306e27(0x79f)][_0x306e27(0x4c3)][_0x306e27(0x40c)](this,_0x5073cb),this['scale']['x']=-0x1,this['_stateSprite'][_0x306e27(0x6a1)]['x']=-0x1;},Sprite_SvEnemy[_0x2546c9(0x79f)][_0x2546c9(0x8b5)]=function(){},Sprite_SvEnemy['prototype'][_0x2546c9(0x1fb)]=function(){},Sprite_SvEnemy[_0x2546c9(0x79f)][_0x2546c9(0xa27)]=function(_0x785b41){},Sprite_SvEnemy[_0x2546c9(0x79f)][_0x2546c9(0x135)]=function(){},Sprite_SvEnemy[_0x2546c9(0x79f)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x2546c9(0x79f)][_0x2546c9(0x636)]=function(){const _0x1f88dc=_0x2546c9;this[_0x1f88dc(0x355)][_0x1f88dc(0xa5a)]=![];},Sprite_SvEnemy[_0x2546c9(0x79f)]['updateBitmap']=function(){const _0x4e78d0=_0x2546c9;Sprite_Battler[_0x4e78d0(0x79f)]['updateBitmap'][_0x4e78d0(0x40c)](this);const _0x593dd2=this[_0x4e78d0(0x2f0)][_0x4e78d0(0xac9)]();this[_0x4e78d0(0x85a)]!==_0x593dd2&&(this['_battlerName']=_0x593dd2,this['_mainSprite'][_0x4e78d0(0x2c4)]=ImageManager[_0x4e78d0(0x109)](_0x593dd2)),this[_0x4e78d0(0x53a)]&&this['_mainSprite']['bitmap']&&this[_0x4e78d0(0xe2)]&&(_0x4e78d0(0x9dd)===_0x4e78d0(0x846)?(this[_0x4e78d0(0x5ff)](),this['requestMotionRefresh']()):this[_0x4e78d0(0x53a)][_0x4e78d0(0x2c4)][_0x4e78d0(0xac1)]!==this['_battler'][_0x4e78d0(0x4bb)]()&&(this['_mainSprite'][_0x4e78d0(0x2c4)][_0x4e78d0(0xac1)]=this[_0x4e78d0(0xe2)][_0x4e78d0(0x4bb)]()));},Sprite_SvEnemy[_0x2546c9(0x79f)][_0x2546c9(0x8ee)]=function(){},Sprite_SvEnemy[_0x2546c9(0x79f)][_0x2546c9(0xc3)]=function(_0x444687,_0x19fb05,_0x4963a7){const _0x52d331=_0x2546c9;if(this['parent'])this[_0x52d331(0x59a)]['startMove'](_0x444687,_0x19fb05,_0x4963a7);},Sprite_SvEnemy['prototype']['refreshMotion']=function(){const _0x3f31fc=_0x2546c9,_0x838de5=this['_actor'];if(_0x838de5){const _0x314ea3=_0x838de5[_0x3f31fc(0xb22)]();if(_0x838de5['isInputting']()||_0x838de5[_0x3f31fc(0x8ed)]()){if(_0x3f31fc(0x77a)!==_0x3f31fc(0x77a)){_0x51dc58[_0x3f31fc(0x53c)]&&this[_0x3f31fc(0x5b1)]()&&this[_0x3f31fc(0xb02)]();const _0x5a6578=_0x550136['members'](),_0x386a96=[];for(const _0x2a762f of _0x5a6578){_0x386a96[_0x3f31fc(0x40b)](new _0x65216f(_0x2a762f));}_0x386a96[_0x3f31fc(0xa58)](this[_0x3f31fc(0x87f)]['bind'](this));for(const _0x39f763 of _0x386a96){this[_0x3f31fc(0x3da)][_0x3f31fc(0x8c8)](_0x39f763);}this['_enemySprites']=_0x386a96;}else this[_0x3f31fc(0x767)](_0x3f31fc(0x48a));}else{if(_0x314ea3===0x3)this['startMotion'](_0x3f31fc(0x1c1));else{if(_0x314ea3===0x2)this['startMotion'](_0x3f31fc(0x842));else{if(_0x838de5[_0x3f31fc(0x9e1)]())'HJLOe'===_0x3f31fc(0x18f)?this['startMotion'](_0x3f31fc(0x1a8)):(this[_0x3f31fc(0x684)]=_0x546643,this['_forcedHomeY']=_0x2650d0);else{if(_0x838de5[_0x3f31fc(0x642)]()||_0x838de5[_0x3f31fc(0x3a9)]()){if(_0x3f31fc(0x831)===_0x3f31fc(0xabc)){const _0x384002=_0x424205[_0x3f31fc(0x895)]['Settings'][_0x3f31fc(0x950)],_0x523e9d=_0x384002[_0x3f31fc(0x8b)],_0x583efa=_0x384002[_0x3f31fc(0x582)],_0x57974c=_0x384002[_0x3f31fc(0x8d)];this['startMove'](-_0x523e9d,-_0x583efa,_0x57974c);}else this[_0x3f31fc(0x767)](_0x3f31fc(0x2fb));}else{if(_0x314ea3===0x1){if(_0x3f31fc(0x7d6)===_0x3f31fc(0x506)){if(_0x457953['isBattleRefreshRequested']())this[_0x3f31fc(0x64f)](),this['_requestRefresh']=![],_0x5c82d6[_0x3f31fc(0x316)]();else this[_0x3f31fc(0xa29)]&&(this[_0x3f31fc(0xa29)]=![],this[_0x3f31fc(0x48c)](),this['updateAttachmentSprites']());}else this[_0x3f31fc(0x767)](_0x3f31fc(0x826));}else{if(_0x838de5['isDying']()){if(_0x3f31fc(0x955)===_0x3f31fc(0x955))this[_0x3f31fc(0x767)](_0x3f31fc(0x4ec));else return _0x44d7ce[_0x3f31fc(0x895)][_0x3f31fc(0x8d0)][_0x3f31fc(0x40c)](this);}else _0x838de5['isUndecided']()?this[_0x3f31fc(0x767)](_0x3f31fc(0x48a)):_0x3f31fc(0xf2)!=='UVSXq'?this[_0x3f31fc(0x1d9)][_0x3f31fc(0x8c8)](this[_0x3f31fc(0xac3)]):this['startMotion'](_0x838de5[_0x3f31fc(0x425)]()[_0x3f31fc(0x66e)]||_0x3f31fc(0x48a));}}}}}}}},Sprite_SvEnemy[_0x2546c9(0x79f)][_0x2546c9(0x48d)]=function(){const _0x2a1110=_0x2546c9;return this[_0x2a1110(0x59a)]?this[_0x2a1110(0x59a)][_0x2a1110(0x919)]===0x0&&this[_0x2a1110(0x59a)][_0x2a1110(0x17f)]===0x0:!![];},Sprite_SvEnemy[_0x2546c9(0x79f)][_0x2546c9(0x8be)]=function(){},VisuMZ[_0x2546c9(0x895)]['Sprite_Animation_targetSpritePosition']=Sprite_Animation[_0x2546c9(0x79f)]['targetSpritePosition'],Sprite_Animation['prototype'][_0x2546c9(0x615)]=function(_0x10796c){const _0x32848a=_0x2546c9;return _0x10796c['_distortionSprite']?this[_0x32848a(0x870)](_0x10796c):VisuMZ[_0x32848a(0x895)][_0x32848a(0x802)][_0x32848a(0x40c)](this,_0x10796c);},Sprite_Animation[_0x2546c9(0x79f)][_0x2546c9(0x870)]=function(_0x2353b7){const _0x50f074=_0x2546c9;let _0x3b6baf=_0x2353b7['x'],_0x5bfdd6=_0x2353b7['y'],_0x4e4b3d=_0x2353b7[_0x50f074(0x3de)],_0x3ae32f=_0x2353b7['_distortionSprite']['scale']['y'];_0x2353b7['x']=_0x2353b7[_0x50f074(0xa2f)]+_0x2353b7[_0x50f074(0x21b)](),_0x2353b7['y']=_0x2353b7[_0x50f074(0x38a)]+_0x2353b7['extraPositionY'](),_0x2353b7[_0x50f074(0x3de)]*=_0x3ae32f;let _0x292191=VisuMZ[_0x50f074(0x895)][_0x50f074(0x802)][_0x50f074(0x40c)](this,_0x2353b7);return _0x2353b7['x']=_0x3b6baf,_0x2353b7['y']=_0x5bfdd6,_0x2353b7['height']=_0x4e4b3d,_0x292191;},VisuMZ['BattleCore'][_0x2546c9(0x50a)]=Sprite_AnimationMV[_0x2546c9(0x79f)][_0x2546c9(0x92a)],Sprite_AnimationMV[_0x2546c9(0x79f)]['updatePosition']=function(){const _0x3a0ea2=_0x2546c9;VisuMZ[_0x3a0ea2(0x895)][_0x3a0ea2(0x50a)][_0x3a0ea2(0x40c)](this);if(this['_animation'][_0x3a0ea2(0x88f)]===0x3){if(this['x']===0x0)this['x']=Math[_0x3a0ea2(0x19b)](Graphics['width']/0x2);if(this['y']===0x0)this['y']=Math[_0x3a0ea2(0x19b)](Graphics['height']/0x2);}},Sprite_Damage[_0x2546c9(0x79f)][_0x2546c9(0x9a3)]=function(_0x53dbed){const _0x28cbab=_0x2546c9,_0x49878b=_0x53dbed[_0x28cbab(0x277)]()||_0x53dbed['result']();if(_0x49878b[_0x28cbab(0x235)]||_0x49878b[_0x28cbab(0xaf6)]){if(_0x28cbab(0x6c5)===_0x28cbab(0x6c5))this[_0x28cbab(0x8d8)]=0x0,this['createMiss']();else return this[_0x28cbab(0x468)]>0x0;}else{if(_0x49878b[_0x28cbab(0xabb)])this['_colorType']=_0x49878b[_0x28cbab(0x717)]>=0x0?0x0:0x1,this[_0x28cbab(0xa15)](_0x49878b[_0x28cbab(0x717)]);else _0x53dbed[_0x28cbab(0x21f)]()&&_0x49878b[_0x28cbab(0x622)]!==0x0&&(this[_0x28cbab(0x8d8)]=_0x49878b[_0x28cbab(0x622)]>=0x0?0x2:0x3,this[_0x28cbab(0xa15)](_0x49878b[_0x28cbab(0x622)]));}_0x49878b[_0x28cbab(0x7aa)]&&this[_0x28cbab(0x98e)]();},Sprite_Damage[_0x2546c9(0x79f)][_0x2546c9(0x47e)]=function(_0x5aa2a3){},Sprite_Damage[_0x2546c9(0x79f)]['createDigits']=function(_0x4190f7){const _0x2fc38a=_0x2546c9;let _0x394e5a=this[_0x2fc38a(0x6e0)](_0x4190f7);const _0x5dfffe=this[_0x2fc38a(0x68a)](),_0x255a83=Math[_0x2fc38a(0x296)](_0x5dfffe*0.75);for(let _0x1e5ee8=0x0;_0x1e5ee8<_0x394e5a[_0x2fc38a(0x4ce)];_0x1e5ee8++){const _0x513f27=this['createChildSprite'](_0x255a83,_0x5dfffe);_0x513f27[_0x2fc38a(0x2c4)][_0x2fc38a(0x620)](_0x394e5a[_0x1e5ee8],0x0,0x0,_0x255a83,_0x5dfffe,_0x2fc38a(0x6d3)),_0x513f27['x']=(_0x1e5ee8-(_0x394e5a[_0x2fc38a(0x4ce)]-0x1)/0x2)*_0x255a83,_0x513f27['dy']=-_0x1e5ee8;}},Sprite_Damage[_0x2546c9(0x79f)]['createString']=function(_0x3e4c9d){const _0x373fe8=_0x2546c9;let _0x1c362c=Math[_0x373fe8(0x9d2)](_0x3e4c9d)['toString']();this[_0x373fe8(0xec)]()&&(_0x1c362c=VisuMZ[_0x373fe8(0x80d)](_0x1c362c));const _0x38a12c=VisuMZ[_0x373fe8(0x895)][_0x373fe8(0x4b7)][_0x373fe8(0x2f3)];let _0x452442='',_0x2b8ebe='';switch(this[_0x373fe8(0x8d8)]){case 0x0:_0x452442=_0x38a12c[_0x373fe8(0x821)]||'-%1',_0x2b8ebe=TextManager['hp'];if(_0x3e4c9d===0x0)_0x452442='%1';break;case 0x1:_0x452442=_0x38a12c[_0x373fe8(0x660)]||'+%1',_0x2b8ebe=TextManager['hp'];break;case 0x2:_0x452442=_0x38a12c[_0x373fe8(0x2d2)]||'-%1\x20MP',_0x2b8ebe=TextManager['mp'];break;case 0x3:_0x452442=_0x38a12c[_0x373fe8(0x396)]||_0x373fe8(0xb31),_0x2b8ebe=TextManager['mp'];break;}return _0x452442[_0x373fe8(0xa3e)](_0x1c362c,_0x2b8ebe)[_0x373fe8(0xb19)]();},Sprite_Damage['prototype'][_0x2546c9(0xec)]=function(){const _0x48d4a8=_0x2546c9;return Imported['VisuMZ_0_CoreEngine']?VisuMZ['CoreEngine'][_0x48d4a8(0x4b7)][_0x48d4a8(0x4ae)]['DigitGroupingDamageSprites']:![];},Sprite_Damage[_0x2546c9(0x79f)][_0x2546c9(0x98e)]=function(){const _0x2d3f70=_0x2546c9,_0x362437=VisuMZ[_0x2d3f70(0x895)][_0x2d3f70(0x4b7)]['Damage'];this[_0x2d3f70(0xb34)]=_0x362437[_0x2d3f70(0x6f1)][_0x2d3f70(0x699)](0x0),this[_0x2d3f70(0x6b6)]=_0x362437['CriticalDuration'];},Sprite_Damage[_0x2546c9(0x79f)][_0x2546c9(0x5b6)]=function(_0x1dc5c5,_0x53721c){const _0x3216df=_0x2546c9;this['_flashColor']=_0x53721c[_0x3216df(0x635)]||[0x0,0x0,0x0,0x0],this[_0x3216df(0xb34)]=JsonEx[_0x3216df(0x785)](this[_0x3216df(0xb34)]),this[_0x3216df(0x6b6)]=_0x53721c[_0x3216df(0x257)]||0x0;const _0x8706d1=this[_0x3216df(0x68a)](),_0xd216d7=Math[_0x3216df(0x296)](_0x8706d1*0x1e),_0xcbf784=this['createChildSprite'](_0xd216d7,_0x8706d1);_0xcbf784[_0x3216df(0x2c4)][_0x3216df(0x484)]=ColorManager[_0x3216df(0x3b4)](_0x53721c[_0x3216df(0x484)]),_0xcbf784['bitmap']['drawText'](_0x1dc5c5,0x0,0x0,_0xd216d7,_0x8706d1,'center'),_0xcbf784['dy']=0x0;},Sprite_Damage['prototype'][_0x2546c9(0x4e8)]=function(_0x2b797e,_0x1b79f0,_0x391ac0){const _0x265a18=_0x2546c9,_0x4653da=Math['max'](this[_0x265a18(0x68a)](),ImageManager[_0x265a18(0xa5c)]),_0x17563e=Math[_0x265a18(0x296)](_0x4653da*0x1e),_0x1f9d09=this['createChildSprite'](_0x17563e,_0x4653da),_0x51f5ee=ImageManager[_0x265a18(0x7d)]/0x2,_0x9a7dc0=_0x1f9d09['bitmap'][_0x265a18(0xa4)](_0x1b79f0+'\x20');_0x1f9d09[_0x265a18(0x2c4)][_0x265a18(0x484)]=ColorManager['getColor'](_0x391ac0[_0x265a18(0x484)]),_0x1f9d09['bitmap'][_0x265a18(0x620)](_0x1b79f0,_0x51f5ee,0x0,_0x17563e-_0x51f5ee,_0x4653da,'center');const _0x9d8f63=Math['round']((_0x4653da-ImageManager[_0x265a18(0xa5c)])/0x2),_0x21ad03=_0x17563e/0x2-ImageManager[_0x265a18(0x7d)]-_0x9a7dc0/0x2+_0x51f5ee/0x2,_0x3a1a60=ImageManager[_0x265a18(0xa70)](_0x265a18(0x4a6)),_0x4cb184=ImageManager[_0x265a18(0x7d)],_0x5ae631=ImageManager[_0x265a18(0xa5c)],_0x56c396=_0x2b797e%0x10*_0x4cb184,_0x4074d8=Math['floor'](_0x2b797e/0x10)*_0x5ae631;_0x1f9d09[_0x265a18(0x2c4)][_0x265a18(0x1a6)](_0x3a1a60,_0x56c396,_0x4074d8,_0x4cb184,_0x5ae631,_0x21ad03,_0x9d8f63),this[_0x265a18(0xb34)]=_0x391ac0[_0x265a18(0x635)]||[0x0,0x0,0x0,0x0],this[_0x265a18(0xb34)]=JsonEx[_0x265a18(0x785)](this[_0x265a18(0xb34)]),this[_0x265a18(0x6b6)]=_0x391ac0[_0x265a18(0x257)]||0x0,_0x1f9d09['dy']=0x0;},VisuMZ['BattleCore']['Sprite_Damage_createChildSprite']=Sprite_Damage['prototype']['createChildSprite'],Sprite_Damage['prototype']['createChildSprite']=function(_0x37dd81,_0xe51186){const _0x3108a0=_0x2546c9;return _0xe51186=Math[_0x3108a0(0x19b)](_0xe51186*1.2),VisuMZ[_0x3108a0(0x895)][_0x3108a0(0x67b)]['call'](this,_0x37dd81,_0xe51186);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xa5b)]=Sprite_StateIcon[_0x2546c9(0x79f)][_0x2546c9(0x8dc)],Sprite_StateIcon[_0x2546c9(0x79f)]['updateFrame']=function(){const _0x336fe4=_0x2546c9;VisuMZ[_0x336fe4(0x895)][_0x336fe4(0xa5b)]['call'](this),this[_0x336fe4(0x3fc)]=this[_0x336fe4(0x35f)]>0x0?0xff:0x0;},VisuMZ[_0x2546c9(0x895)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x2546c9(0x79f)][_0x2546c9(0x978)],Sprite_Weapon['prototype'][_0x2546c9(0x978)]=function(){const _0x34a402=_0x2546c9;VisuMZ[_0x34a402(0x895)]['Sprite_Weapon_loadBitmap'][_0x34a402(0x40c)](this),this[_0x34a402(0x2c4)]&&(_0x34a402(0x669)!==_0x34a402(0x669)?(this['_frontAttachmentSprite']&&this[_0x34a402(0x8c8)](this[_0x34a402(0x1eb)]),this[_0x34a402(0x5f9)]&&this[_0x34a402(0x17b)](this[_0x34a402(0x5f9)])):this['bitmap']['smooth']=VisuMZ[_0x34a402(0x895)][_0x34a402(0x4b7)][_0x34a402(0x99a)][_0x34a402(0xa52)]);};function Sprite_HpGauge(){const _0x33c042=_0x2546c9;this[_0x33c042(0x4c3)](...arguments);}Sprite_HpGauge['prototype']=Object[_0x2546c9(0x315)](Sprite_Gauge[_0x2546c9(0x79f)]),Sprite_HpGauge['prototype'][_0x2546c9(0x150)]=Sprite_HpGauge,Sprite_HpGauge[_0x2546c9(0x79f)][_0x2546c9(0x4c3)]=function(){const _0x2a9f70=_0x2546c9;Sprite_Gauge[_0x2a9f70(0x79f)][_0x2a9f70(0x4c3)][_0x2a9f70(0x40c)](this);},Sprite_HpGauge[_0x2546c9(0x79f)][_0x2546c9(0x356)]=function(){return 0x0;},Sprite_HpGauge[_0x2546c9(0x79f)][_0x2546c9(0x5e2)]=function(){const _0x1a63ef=_0x2546c9;this[_0x1a63ef(0x2c4)][_0x1a63ef(0x3b6)]();const _0x9558ff=this[_0x1a63ef(0xb09)]();!isNaN(_0x9558ff)&&(_0x1a63ef(0x93e)!=='RsfpS'?this['drawGauge']():this['_cache'][_0x1a63ef(0x48e)]=_0x349d4c[_0x1a63ef(0x79f)][_0x1a63ef(0x914)][_0x1a63ef(0x40c)](this));};function Sprite_EnemyName(){const _0x42f994=_0x2546c9;this[_0x42f994(0x4c3)](...arguments);}Sprite_EnemyName['prototype']=Object[_0x2546c9(0x315)](Sprite_Name[_0x2546c9(0x79f)]),Sprite_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x150)]=Sprite_EnemyName,Sprite_EnemyName['prototype']['initialize']=function(){const _0x4dd8f6=_0x2546c9;Sprite_Name['prototype'][_0x4dd8f6(0x4c3)][_0x4dd8f6(0x40c)](this),this[_0x4dd8f6(0x5a2)]();},Sprite_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x3b2)]=function(){const _0xf77a0d=_0x2546c9;Sprite_Name[_0xf77a0d(0x79f)]['initMembers'][_0xf77a0d(0x40c)](this),this['opacity']=0x0,this['_linkedSprite']=null,this['anchor']['x']=0.5,this[_0xf77a0d(0x9a7)]['y']=0x0;},Sprite_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x5a2)]=function(){const _0x520a0a=_0x2546c9;VisuMZ[_0x520a0a(0x895)][_0x520a0a(0x4b7)][_0x520a0a(0x862)]['NameAttachStateIcon']&&(this[_0x520a0a(0x5eb)]=new Sprite_StateIcon(),this['addChild'](this['_stateIconSprite']));},Sprite_EnemyName['prototype'][_0x2546c9(0x7c8)]=function(){const _0x1de65c=_0x2546c9;return Graphics[_0x1de65c(0x8e7)];},Sprite_EnemyName[_0x2546c9(0x79f)]['bitmapHeight']=function(){const _0x1b8d38=_0x2546c9;return this[_0x1b8d38(0x3d8)]=this['_lineHeight']||Window_Base[_0x1b8d38(0x79f)][_0x1b8d38(0x7e8)]()||0x24,this[_0x1b8d38(0x3d8)]*0x4;},Sprite_EnemyName['prototype']['fontSize']=function(){const _0x227ba1=_0x2546c9;return VisuMZ[_0x227ba1(0x895)][_0x227ba1(0x4b7)][_0x227ba1(0x862)][_0x227ba1(0x530)]||$gameSystem[_0x227ba1(0x10a)]();},Sprite_EnemyName[_0x2546c9(0x79f)]['linkSprite']=function(_0x3aa162){this['_linkedSprite']=_0x3aa162;},Sprite_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x9c)]=function(){const _0x43b103=_0x2546c9;Sprite_Name['prototype']['update'][_0x43b103(0x40c)](this),this[_0x43b103(0x201)](),this['updatePosition'](),this['updateAttachedSprites'](),this[_0x43b103(0x143)]();},Sprite_EnemyName[_0x2546c9(0x79f)]['redraw']=function(){const _0x290c08=_0x2546c9;this['_cacheTextWidth']=undefined;const _0x56d82a=this[_0x290c08(0x395)](),_0x5b4e4a=this[_0x290c08(0x7c8)](),_0x5ad434=Window_Base['prototype']['lineHeight']();this[_0x290c08(0x42b)](),this['bitmap'][_0x290c08(0x3b6)](),this['bitmap'][_0x290c08(0x620)](_0x56d82a,0x0,0x0,_0x5b4e4a,_0x5ad434,'center');},Sprite_EnemyName[_0x2546c9(0x79f)]['updateLink']=function(){const _0x460c0f=_0x2546c9;if(!this[_0x460c0f(0x57e)])return;if(this['_battler']!==this[_0x460c0f(0x57e)]['_battler']){if(_0x460c0f(0x5fa)!=='RINFm')this[_0x460c0f(0x47e)](this[_0x460c0f(0x57e)][_0x460c0f(0xe2)]);else return _0x30ad1c[_0x460c0f(0x895)][_0x460c0f(0x803)][_0x460c0f(0x40c)](this);}},Sprite_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x92a)]=function(){const _0x1587e5=_0x2546c9;if(!this[_0x1587e5(0x57e)])return;this[_0x1587e5(0x3d8)]=this[_0x1587e5(0x3d8)]||Window_Base[_0x1587e5(0x79f)]['lineHeight'](),this['x']=this[_0x1587e5(0x57e)]['_baseX'],this['y']=this[_0x1587e5(0x57e)][_0x1587e5(0x38a)]-this['_lineHeight']*0.5;const _0x2674cb=VisuMZ[_0x1587e5(0x895)][_0x1587e5(0x4b7)]['Enemy'];this['x']+=_0x2674cb[_0x1587e5(0x386)]||0x0,this['y']+=_0x2674cb[_0x1587e5(0x77)]||0x0;},Sprite_EnemyName['prototype']['updateAttachedSprites']=function(){const _0xb36b9c=_0x2546c9;this[_0xb36b9c(0x8e6)]();},Sprite_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x8e6)]=function(){const _0x4fdb2a=_0x2546c9;if(!this['_stateIconSprite'])return;this[_0x4fdb2a(0xe2)]!==this['_stateIconSprite'][_0x4fdb2a(0xe2)]&&this[_0x4fdb2a(0x5eb)][_0x4fdb2a(0x47e)](this['_battler']);const _0x2fc355=this[_0x4fdb2a(0x551)]();this[_0x4fdb2a(0x3d8)]=this[_0x4fdb2a(0x3d8)]||Window_Base[_0x4fdb2a(0x79f)][_0x4fdb2a(0x7e8)](),this[_0x4fdb2a(0x5eb)]['x']=Math[_0x4fdb2a(0x19b)]((_0x2fc355+ImageManager['iconWidth'])/0x2)+0x8,this[_0x4fdb2a(0x5eb)]['y']=this[_0x4fdb2a(0x3d8)]/0x2;const _0x346836=VisuMZ[_0x4fdb2a(0x895)][_0x4fdb2a(0x4b7)]['Enemy'];this[_0x4fdb2a(0x5eb)]['x']+=_0x346836[_0x4fdb2a(0x5b0)]||0x0,this['_stateIconSprite']['y']+=_0x346836[_0x4fdb2a(0x42a)]||0x0;},Sprite_EnemyName['prototype']['updateOpacity']=function(){const _0x364611=_0x2546c9,_0x239562=this[_0x364611(0x908)]();if(_0x239562&&this['opacity']<0xff)this[_0x364611(0x3fc)]+=0x10;else!_0x239562&&this[_0x364611(0x3fc)]>0x0&&(this[_0x364611(0x3fc)]-=0x10);},Sprite_EnemyName['prototype'][_0x2546c9(0x908)]=function(){const _0x4368ed=_0x2546c9;if(this[_0x4368ed(0x813)]())return![];else{if(!this[_0x4368ed(0xe2)])return![];else{if(this[_0x4368ed(0xe2)][_0x4368ed(0x4ca)]())return![];else{if(!this[_0x4368ed(0xe2)][_0x4368ed(0xab4)]()){if(_0x4368ed(0x46c)===_0x4368ed(0x46c))return![];else _0x8041c8[_0x4368ed(0x9e8)](0x0);}else{if(this[_0x4368ed(0x49a)]())return!![];else{if(this[_0x4368ed(0xae3)]())return!![];else{if(this['isIncludedInEnemyWindow']())return _0x4368ed(0x298)!==_0x4368ed(0xa2d)?!![]:_0x2a1a76[_0x4368ed(0x771)]();else{if(this['opacity']>0x0){if(_0x4368ed(0x9bc)!==_0x4368ed(0x609))return![];else{if(!this[_0x4368ed(0x14c)]())return![];return _0x175ee2[_0x4368ed(0x895)][_0x4368ed(0x683)]['call'](this);}}}}}}}}}},Sprite_EnemyName[_0x2546c9(0x79f)]['isAlwaysHidden']=function(){const _0x5d04ed=_0x2546c9;return VisuMZ[_0x5d04ed(0x895)][_0x5d04ed(0x4b7)][_0x5d04ed(0x862)][_0x5d04ed(0x14f)];},Sprite_EnemyName[_0x2546c9(0x79f)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0xae3)]=function(){const _0x2a73a8=_0x2546c9;return VisuMZ[_0x2a73a8(0x895)]['Settings']['Enemy'][_0x2a73a8(0x678)];},Sprite_EnemyName['prototype']['isIncludedInEnemyWindow']=function(){const _0x44456f=_0x2546c9;return VisuMZ[_0x44456f(0x895)][_0x44456f(0x4b7)][_0x44456f(0x862)][_0x44456f(0xb03)]?_0x44456f(0x1f1)!==_0x44456f(0x1f1)?_0x311271[_0x44456f(0xae4)](_0x3a5755=>_0x3a5755['isAlive']()):this['_battler'][_0x44456f(0x3b8)]():SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x44456f(0x465)][_0x44456f(0x62d)][_0x44456f(0x631)]&&SceneManager[_0x44456f(0x465)][_0x44456f(0x62d)][_0x44456f(0x628)]['includes'](this[_0x44456f(0xe2)]);},Sprite_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x551)]=function(){const _0x191a05=_0x2546c9;if(!this[_0x191a05(0xe2)])return 0x0;if(this[_0x191a05(0x987)])return this[_0x191a05(0x987)];const _0x4b894a=this[_0x191a05(0x395)]();return this[_0x191a05(0x42b)](),this['_cacheTextWidth']=this[_0x191a05(0x2c4)]['measureTextWidth'](_0x4b894a)||0x1,this[_0x191a05(0x987)];},VisuMZ['BattleCore'][_0x2546c9(0x35e)]=Sprite_Battleback[_0x2546c9(0x79f)][_0x2546c9(0x253)],Sprite_Battleback[_0x2546c9(0x79f)]['adjustPosition']=function(){const _0x4c5dee=_0x2546c9,_0x331614=VisuMZ['BattleCore']['Settings'][_0x4c5dee(0x2b2)];if(!_0x331614){if(_0x4c5dee(0x28f)==='VTefd')return VisuMZ[_0x4c5dee(0x895)][_0x4c5dee(0x35e)]['call'](this);else _0x3eca55['result']()[_0x4c5dee(0x717)]>0x0&&!_0x50964c[_0x4c5dee(0x51b)]()[_0x4c5dee(0x879)]&&this[_0x4c5dee(0x40b)]('performDamage',_0x2464de),_0x3886af[_0x4c5dee(0x51b)]()[_0x4c5dee(0x717)]<0x0&&this[_0x4c5dee(0x40b)]('performRecovery',_0x4c308b),_0x4f7298[_0x4c5dee(0x895)][_0x4c5dee(0x4b7)][_0x4c5dee(0x8a4)][_0x4c5dee(0x91a)]&&this[_0x4c5dee(0x40b)](_0x4c5dee(0x9d6),this[_0x4c5dee(0x5fb)](_0x9cc726));}const _0xa31559=String(_0x331614[_0x4c5dee(0x45e)])||'MZ';switch(_0xa31559){case'MZ':VisuMZ['BattleCore'][_0x4c5dee(0x35e)][_0x4c5dee(0x40c)](this);break;case _0x4c5dee(0x4df):this[_0x4c5dee(0x910)]();break;case _0x4c5dee(0xb0d):this[_0x4c5dee(0x853)]();break;case _0x4c5dee(0xaaf):this[_0x4c5dee(0x945)]();break;case _0x4c5dee(0x39b):this['adjustPosition_ScaleUp']();break;}},Sprite_Battleback['prototype'][_0x2546c9(0x910)]=function(){const _0x429e8b=_0x2546c9;this['width']=Graphics['width'],this[_0x429e8b(0x3de)]=Graphics['height'];const _0x98a570=0x1;this['scale']['x']=_0x98a570,this[_0x429e8b(0x6a1)]['y']=_0x98a570,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x2546c9(0x79f)][_0x2546c9(0x853)]=function(){const _0x57ce2f=_0x2546c9;this[_0x57ce2f(0x9f9)]=Graphics[_0x57ce2f(0x9f9)],this[_0x57ce2f(0x3de)]=Graphics[_0x57ce2f(0x3de)];const _0x21e961=this[_0x57ce2f(0x9f9)]/this[_0x57ce2f(0x2c4)]['width'],_0x3e2209=this[_0x57ce2f(0x3de)]/this['bitmap']['height'],_0x257c83=Math[_0x57ce2f(0x556)](_0x21e961,_0x3e2209);this[_0x57ce2f(0x6a1)]['x']=_0x257c83,this[_0x57ce2f(0x6a1)]['y']=_0x257c83,this['x']=(Graphics[_0x57ce2f(0x9f9)]-this[_0x57ce2f(0x9f9)])/0x2,this['y']=Graphics[_0x57ce2f(0x3de)]-this['height'];},Sprite_Battleback[_0x2546c9(0x79f)]['adjustPosition_ScaleDown']=function(){const _0x5712ec=_0x2546c9;this['width']=Graphics[_0x5712ec(0x9f9)],this[_0x5712ec(0x3de)]=Graphics[_0x5712ec(0x3de)];const _0x419b66=Math[_0x5712ec(0xaaa)](0x1,this[_0x5712ec(0x9f9)]/this[_0x5712ec(0x2c4)]['width']),_0x2533c7=Math[_0x5712ec(0xaaa)](0x1,this[_0x5712ec(0x3de)]/this[_0x5712ec(0x2c4)]['height']),_0x561b9a=Math['max'](_0x419b66,_0x2533c7);this[_0x5712ec(0x6a1)]['x']=_0x561b9a,this[_0x5712ec(0x6a1)]['y']=_0x561b9a,this['x']=(Graphics[_0x5712ec(0x9f9)]-this[_0x5712ec(0x9f9)])/0x2,this['y']=Graphics['height']-this['height'];},Sprite_Battleback['prototype'][_0x2546c9(0x6fa)]=function(){const _0x565c09=_0x2546c9;this[_0x565c09(0x9f9)]=Graphics[_0x565c09(0x9f9)],this['height']=Graphics[_0x565c09(0x3de)];const _0x3392be=Math['max'](0x1,this[_0x565c09(0x9f9)]/this[_0x565c09(0x2c4)]['width']),_0x33e021=Math[_0x565c09(0x556)](0x1,this[_0x565c09(0x3de)]/this['bitmap']['height']),_0x4c3c35=Math['max'](_0x3392be,_0x33e021);this[_0x565c09(0x6a1)]['x']=_0x4c3c35,this['scale']['y']=_0x4c3c35,this['x']=(Graphics[_0x565c09(0x9f9)]-this[_0x565c09(0x9f9)])/0x2,this['y']=Graphics[_0x565c09(0x3de)]-this[_0x565c09(0x3de)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x4b7)][_0x2546c9(0x8c9)][_0x2546c9(0x517)]??!![],Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x977)]=function(){const _0x7a09a1=_0x2546c9;if(!$gameSystem[_0x7a09a1(0x165)]())return![];return![];},Spriteset_Battle['prototype'][_0x2546c9(0x3aa)]=function(){return 0x0;},Spriteset_Battle[_0x2546c9(0x79f)]['animationNextDelay']=function(){return 0x0;},VisuMZ['BattleCore']['Spriteset_Battle_createLowerLayer']=Spriteset_Battle['prototype']['createLowerLayer'],Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x6af)]=function(){const _0x456f88=_0x2546c9;VisuMZ[_0x456f88(0x895)][_0x456f88(0x3c1)]['call'](this),this[_0x456f88(0x595)](),this[_0x456f88(0xb45)]();},VisuMZ[_0x2546c9(0x895)]['Spriteset_Battle_update']=Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x9c)],Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x9c)]=function(){const _0x40d1e5=_0x2546c9;VisuMZ[_0x40d1e5(0x895)][_0x40d1e5(0x9af)]['call'](this),this[_0x40d1e5(0xd8)](),this[_0x40d1e5(0x438)]();},Spriteset_Battle['prototype'][_0x2546c9(0x595)]=function(){const _0x24b365=_0x2546c9;this[_0x24b365(0x7fc)]=new Weather(),this[_0x24b365(0x1d9)][_0x24b365(0x8c8)](this[_0x24b365(0x7fc)]);},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x438)]=function(){const _0xc7595c=_0x2546c9;this[_0xc7595c(0x7fc)][_0xc7595c(0x59f)]=$gameScreen['weatherType'](),this[_0xc7595c(0x7fc)][_0xc7595c(0x591)]=$gameScreen[_0xc7595c(0x327)]();},Game_Interpreter[_0x2546c9(0x79f)][_0x2546c9(0xa56)]=function(_0x3cfb72){const _0x30e787=_0x2546c9;$gameScreen[_0x30e787(0x19d)](_0x3cfb72[0x0],_0x3cfb72[0x1],_0x3cfb72[0x2]);if(_0x3cfb72[0x3])this['wait'](_0x3cfb72[0x2]);return!![];},VisuMZ[_0x2546c9(0x895)]['Game_Interpreter_command283']=Game_Interpreter[_0x2546c9(0x79f)][_0x2546c9(0x584)],Game_Interpreter[_0x2546c9(0x79f)][_0x2546c9(0x584)]=function(_0x3fb0c5){const _0x4b6643=_0x2546c9;return SceneManager['isSceneBattle']()?(SceneManager[_0x4b6643(0x465)][_0x4b6643(0x5a6)][_0x4b6643(0xa60)](_0x3fb0c5[0x0],_0x3fb0c5[0x1]),!![]):VisuMZ[_0x4b6643(0x895)][_0x4b6643(0x481)][_0x4b6643(0x40c)](this,_0x3fb0c5);},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0xb2c)]=function(_0x5da828,_0x3abf41){const _0x567199=_0x2546c9;_0x5da828[_0x567199(0x2c4)]=_0x3abf41;},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0xa60)]=function(_0x1d861f,_0xfcecd){const _0x200678=_0x2546c9;_0x1d861f=_0x1d861f||'',_0xfcecd=_0xfcecd||'';_0x1d861f===''&&_0xfcecd===''&&(_0x1d861f=this['_back1Sprite'][_0x200678(0x3e5)](),_0xfcecd=this[_0x200678(0xaf1)][_0x200678(0x124)]());const _0x346940=ImageManager['loadBattleback1'](_0x1d861f),_0x574639=ImageManager[_0x200678(0x88c)](_0xfcecd);_0x346940[_0x200678(0x67)](this[_0x200678(0xb12)][_0x200678(0x768)](this,this[_0x200678(0x854)],this[_0x200678(0xaf1)],_0x346940,_0x574639));},Spriteset_Battle['prototype'][_0x2546c9(0xb12)]=function(_0x3215c1,_0x448000,_0x497a30,_0x50d1e3){const _0x490c71=_0x2546c9;_0x50d1e3['addLoadListener'](this[_0x490c71(0xadd)][_0x490c71(0x768)](this,_0x3215c1,_0x448000,_0x497a30,_0x50d1e3));},Spriteset_Battle['prototype'][_0x2546c9(0xadd)]=function(_0x3f98a4,_0x51758c,_0x8a72ae,_0xa34228){const _0x3962f1=_0x2546c9;_0x3f98a4[_0x3962f1(0x2c4)]=_0x8a72ae,_0x51758c['bitmap']=_0xa34228,_0x3f98a4[_0x3962f1(0x253)](),_0x51758c['adjustPosition']();},VisuMZ['BattleCore'][_0x2546c9(0x880)]=Spriteset_Battle['prototype']['createBattleField'],Spriteset_Battle[_0x2546c9(0x79f)]['createBattleField']=function(){const _0x486527=_0x2546c9;VisuMZ['BattleCore'][_0x486527(0x880)][_0x486527(0x40c)](this),this[_0x486527(0x644)]();},Spriteset_Battle[_0x2546c9(0x79f)]['createBattleFieldBattleCore']=function(){const _0x1b5780=_0x2546c9;this[_0x1b5780(0xce)](),this['createUIContainer'](),this[_0x1b5780(0x980)](),this[_0x1b5780(0x614)](),this[_0x1b5780(0x558)]();},Spriteset_Battle['prototype']['createBattleFieldContainer']=function(){const _0x3a7664=_0x2546c9;this['_battlerContainer']=new Sprite(),this['_battleField'][_0x3a7664(0x8c8)](this['_battlerContainer']);},Spriteset_Battle['prototype'][_0x2546c9(0x980)]=function(){const _0x12424b=_0x2546c9;this[_0x12424b(0xa82)]=new Sprite(),Spriteset_Battle[_0x12424b(0x999)]?this[_0x12424b(0x8c8)](this['_animationContainer']):this[_0x12424b(0x1d9)][_0x12424b(0x8c8)](this[_0x12424b(0xa82)]);},Spriteset_Battle['prototype'][_0x2546c9(0x614)]=function(){const _0x263842=_0x2546c9;this[_0x263842(0x69)]=new Sprite(),this[_0x263842(0x69)]['x']=this[_0x263842(0x1d9)]['x'],this['_damageContainer']['y']=this[_0x263842(0x1d9)]['y'],this[_0x263842(0x8c8)](this[_0x263842(0x69)]);},Spriteset_Battle[_0x2546c9(0x79f)]['adjustFlippedBattlefield']=function(){const _0x38cdcb=_0x2546c9;if(!this[_0x38cdcb(0x977)]())return;this[_0x38cdcb(0x3da)][_0x38cdcb(0x6a1)]['x']=-0x1,this[_0x38cdcb(0x3da)]['x']=this[_0x38cdcb(0x1d9)]['width'],this['_uiContainer']['scale']['x']=-0x1,this[_0x38cdcb(0xac3)]['x']=this['_battleField'][_0x38cdcb(0x9f9)],this[_0x38cdcb(0xa82)][_0x38cdcb(0x6a1)]['x']=-0x1,this['_animationContainer']['x']=this[_0x38cdcb(0x1d9)][_0x38cdcb(0x9f9)],this[_0x38cdcb(0x69)][_0x38cdcb(0x6a1)]['x']=-0x1,this['_damageContainer']['x']=this[_0x38cdcb(0x1d9)]['x']+this['_battleField'][_0x38cdcb(0x9f9)];},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x479)]=function(){const _0x28144b=_0x2546c9;Imported[_0x28144b(0x53c)]&&this[_0x28144b(0x5b1)]()&&this[_0x28144b(0xb02)]();const _0x1a7f6c=$gameTroop[_0x28144b(0x930)](),_0x20a586=[];for(const _0x721f1b of _0x1a7f6c){_0x20a586['push'](new Sprite_Enemy(_0x721f1b));}_0x20a586[_0x28144b(0xa58)](this['compareEnemySprite'][_0x28144b(0x768)](this));for(const _0x815b4a of _0x20a586){if(_0x28144b(0x1f7)===_0x28144b(0x1f7))this['_battlerContainer'][_0x28144b(0x8c8)](_0x815b4a);else{if(_0x138b32[_0x28144b(0xafd)](_0x1635ed))return![];}}this[_0x28144b(0x574)]=_0x20a586;},Spriteset_Battle[_0x2546c9(0x79f)]['createActors']=function(){const _0x468359=_0x2546c9;this['_actorSprites']=[];for(let _0x48b394=0x0;_0x48b394<$gameParty['maxBattleMembers']();_0x48b394++){const _0x27ed3f=$gameParty[_0x468359(0xb15)]()[_0x48b394],_0x5660d9=new Sprite_Actor();_0x5660d9[_0x468359(0x16d)](_0x27ed3f),_0x5660d9[_0x468359(0x806)](_0x27ed3f),_0x5660d9[_0x468359(0x9c)](),this[_0x468359(0x19f)][_0x468359(0x40b)](_0x5660d9),this[_0x468359(0x3da)][_0x468359(0x8c8)](_0x5660d9);}},Spriteset_Battle[_0x2546c9(0x79f)]['createAnimationSprite']=function(_0xed015e,_0x343c72,_0x1651c8,_0x320015){const _0x132831=_0x2546c9,_0x269a72=this[_0x132831(0x68d)](_0x343c72),_0x220899=new(_0x269a72?Sprite_AnimationMV:Sprite_Animation)(),_0xaeb48e=this[_0x132831(0x708)](_0xed015e);this[_0x132831(0xb50)](_0xed015e[0x0])&&('MZBJa'===_0x132831(0x81d)?(_0x11f91b&&_0x4d0e43['isActor']()&&_0x813283[_0x132831(0x286)](_0xb26871),this[_0x132831(0x839)]()):_0x1651c8=!_0x1651c8),_0x220899[_0x132831(0x90c)]=_0xed015e,_0x220899['setup'](_0xaeb48e,_0x343c72,_0x1651c8,_0x320015),this['addAnimationSpriteToContainer'](_0x220899);},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x48b)]=function(_0x5839b9){const _0x437c3c=_0x2546c9;this[_0x437c3c(0x217)](_0x5839b9)?_0x437c3c(0x1e6)===_0x437c3c(0x75d)?this[_0x437c3c(0x3ef)]=(this[_0x437c3c(0x3ef)]*(_0x3efdbf-0x1)+this[_0x437c3c(0x27a)])/_0x191283:this[_0x437c3c(0x968)]()[_0x437c3c(0x8c8)](_0x5839b9):this[_0x437c3c(0xa82)][_0x437c3c(0x8c8)](_0x5839b9),this[_0x437c3c(0x9e6)][_0x437c3c(0x40b)](_0x5839b9);},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x217)]=function(_0x5ce121){const _0x5e85da=_0x2546c9;if(!_0x5ce121)return![];if(!_0x5ce121[_0x5e85da(0x119)])return![];if(!_0x5ce121['targetObjects'][0x0])return![];if(_0x5ce121['targetObjects'][0x0]['isActor']&&!_0x5ce121[_0x5e85da(0x90c)][0x0][_0x5e85da(0x55e)]())return![];if($gameSystem[_0x5e85da(0x165)]())return![];if(!this[_0x5e85da(0x968)]())return![];if(_0x5ce121[_0x5e85da(0x150)]===Sprite_Animation){if(_0x5ce121['_animation']['displayType']!==0x0)return![];}else{if(_0x5ce121[_0x5e85da(0x150)]===Sprite_AnimationMV){if(_0x5e85da(0x783)!=='wrfxi'){if(_0x5ce121[_0x5e85da(0x119)][_0x5e85da(0x88f)]===0x3)return![];}else{const _0x42993c=_0x2a3918[_0x5e85da(0x97d)](),_0x3428c5=_0x42993c['battler']();if(_0x3428c5)_0x3428c5[_0x5e85da(0x757)]();const _0x52b0cd=_0x52cbbc[_0x5e85da(0x332)]()[_0x5e85da(0xae4)](_0x52ac62=>_0x52ac62[_0x5e85da(0x3bf)]()&&_0x52ac62[_0x5e85da(0x962)]()),_0x3d756f=_0x52b0cd[_0x5e85da(0x402)](_0x42993c),_0x1dc234=_0x52b0cd[_0x3d756f+0x1];_0x52e10c[_0x5e85da(0xb07)]=_0x1dc234||null;if(_0x1dc234)_0x1dc234['setActionState'](_0x5e85da(0xada));_0x42993c[_0x5e85da(0x2f5)](_0x5e85da(0x34c)),this[_0x5e85da(0x7e7)]();}}}return!![];const _0x204bbf=Window_BattleStatus[_0x5e85da(0x79f)][_0x5e85da(0x8e0)]();return['xp',_0x5e85da(0x57c)][_0x5e85da(0x953)](_0x204bbf);},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x968)]=function(){const _0x21348b=_0x2546c9;if(!SceneManager['_scene'])return null;if(!SceneManager['_scene'][_0x21348b(0x432)])return null;if(!SceneManager[_0x21348b(0x465)][_0x21348b(0x432)][_0x21348b(0x6ee)])return null;return SceneManager[_0x21348b(0x465)][_0x21348b(0x432)][_0x21348b(0x6ee)];},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0xa75)]=function(_0x30d645){const _0x179a0f=_0x2546c9;this[_0x179a0f(0x434)](_0x30d645);for(const _0xca973b of _0x30d645[_0x179a0f(0x90c)]){_0xca973b[_0x179a0f(0xa6)]&&_0xca973b[_0x179a0f(0xa6)]();}_0x30d645[_0x179a0f(0x71)]();},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x434)]=function(_0x196602){const _0x6a4c47=_0x2546c9;this['_animationSprites'][_0x6a4c47(0x8ad)](_0x196602),this[_0x6a4c47(0x217)](_0x196602)?this[_0x6a4c47(0x968)]()['removeChild'](_0x196602):'thmQM'==='thmQM'?this['_animationContainer'][_0x6a4c47(0xaa1)](_0x196602):_0x230568=_0x38805b>=_0x1a2d2d?_0x53e260:_0x424979;},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x496)]=Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x675)],Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x675)]=function(){const _0x54d4aa=_0x2546c9;VisuMZ[_0x54d4aa(0x895)][_0x54d4aa(0x496)]['call'](this),this[_0x54d4aa(0xa72)]();},Spriteset_Battle[_0x2546c9(0x79f)]['updateBattlerContainer']=function(){const _0x456253=_0x2546c9;this[_0x456253(0x3da)][_0x456253(0x2b7)]['sort'](this[_0x456253(0x7ea)][_0x456253(0x768)](this)),this[_0x456253(0x5b9)]();},Spriteset_Battle[_0x2546c9(0x79f)]['compareBattlerSprites']=function(_0x4dba3e,_0x1fb745){const _0x338db7=_0x2546c9;if(VisuMZ[_0x338db7(0x895)]['Settings'][_0x338db7(0x99a)]['PrioritySortActors']){if(_0x4dba3e[_0x338db7(0xe2)]&&_0x1fb745[_0x338db7(0xe2)]){if(_0x338db7(0x4a3)===_0x338db7(0x56c))this['removeStatesAuto'](0x1);else{if(_0x4dba3e[_0x338db7(0xe2)][_0x338db7(0x55e)]()&&_0x1fb745['_battler'][_0x338db7(0x2e4)]())return 0x1;else{if(_0x1fb745[_0x338db7(0xe2)][_0x338db7(0x55e)]()&&_0x4dba3e[_0x338db7(0xe2)]['isEnemy']())return-0x1;}}}}if(_0x4dba3e['_baseY']!==_0x1fb745['_baseY']){if('jAOet'===_0x338db7(0x7f5))this['addPartyCommand']();else return _0x4dba3e[_0x338db7(0x38a)]-_0x1fb745['_baseY'];}else return _0x1fb745[_0x338db7(0x6a5)]-_0x4dba3e['spriteId'];},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x5b9)]=function(){const _0x3b1b5e=_0x2546c9;if(!VisuMZ[_0x3b1b5e(0x895)][_0x3b1b5e(0x4b7)]['Actor'][_0x3b1b5e(0x28e)])return;const _0x28d913=BattleManager[_0x3b1b5e(0x41d)];if(_0x28d913){if(_0x28d913[_0x3b1b5e(0x55e)]()&&!$gameSystem[_0x3b1b5e(0x165)]())return;const _0xf1d4ef=_0x28d913[_0x3b1b5e(0x2dc)]();if(_0xf1d4ef&&_0x28d913[_0x3b1b5e(0x55e)]())this[_0x3b1b5e(0x3da)][_0x3b1b5e(0x8c8)](_0xf1d4ef);}},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x7e5)]=function(){const _0x53ae1b=_0x2546c9;for(const _0x4ea189 of $gameParty['aliveMembers']()){if(!_0x4ea189)continue;if(!_0x4ea189[_0x53ae1b(0x2dc)]())continue;_0x4ea189['battler']()[_0x53ae1b(0x1e7)]=!![],_0x4ea189[_0x53ae1b(0x2dc)]()['retreat']();}},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0xa8d)]=function(){const _0x5a1e76=_0x2546c9;this[_0x5a1e76(0xac3)]=new Sprite();if(Spriteset_Battle[_0x5a1e76(0x999)]){if('yOHeJ'===_0x5a1e76(0x7ff))this[_0x5a1e76(0x8c8)](this[_0x5a1e76(0xac3)]);else return this[_0x5a1e76(0xe2)]&&this[_0x5a1e76(0xe2)][_0x5a1e76(0x3ea)]();}else this[_0x5a1e76(0x1d9)][_0x5a1e76(0x8c8)](this['_uiContainer']);SceneManager[_0x5a1e76(0x465)][_0x5a1e76(0xac3)]=this[_0x5a1e76(0xac3)];},Spriteset_Battle[_0x2546c9(0x79f)]['createEnemyNames']=function(){const _0x1c26ec=_0x2546c9;if(VisuMZ['BattleCore']['Settings'][_0x1c26ec(0x862)][_0x1c26ec(0xac2)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x1c26ec(0x134)](this[_0x1c26ec(0x5c4)]);for(const _0x32d62b of this[_0x1c26ec(0x574)]){if(_0x1c26ec(0x737)!==_0x1c26ec(0x4d8)){const _0x2dd850=new Sprite_EnemyName();this[_0x1c26ec(0x5c4)][_0x1c26ec(0x8c8)](_0x2dd850),_0x2dd850['linkSprite'](_0x32d62b);}else{if(_0x1e4cf2['battleCameraData']()[_0x1c26ec(0x890)]>0x0)return!![];if(_0x56261b[_0x1c26ec(0xb2e)]()[_0x1c26ec(0x291)]>0x0)return!![];this[_0x1c26ec(0x66d)]='';}}},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0xd8)]=function(){const _0x5c1981=_0x2546c9;if(!this[_0x5c1981(0x69)])return;if(!this[_0x5c1981(0xac3)])return;const _0x4bd39d=Spriteset_Battle[_0x5c1981(0x999)]?this[_0x5c1981(0x69)]['x']:0x0,_0x4b3ba4=Spriteset_Battle[_0x5c1981(0x999)]?this[_0x5c1981(0x69)]['y']:0x0,_0x368a7c=Imported['VisuMZ_3_ActSeqCamera']?this[_0x5c1981(0x1d9)]['x']:0x0,_0x1ef53c=Imported[_0x5c1981(0x87b)]?this[_0x5c1981(0x1d9)]['y']:0x0;this[_0x5c1981(0xac3)]['x']=_0x4bd39d+_0x368a7c,this['_uiContainer']['y']=_0x4b3ba4+_0x1ef53c;},BattleManager['addChildToUiContainer']=function(_0x556017){const _0x4c6ca6=_0x2546c9;if(!SceneManager[_0x4c6ca6(0x465)][_0x4c6ca6(0xac3)])return;SceneManager[_0x4c6ca6(0x465)][_0x4c6ca6(0xac3)][_0x4c6ca6(0x8c8)](_0x556017);},Spriteset_Battle['prototype'][_0x2546c9(0x303)]=function(){return![];},Spriteset_Battle['prototype'][_0x2546c9(0x7d8)]=function(){const _0x3a8d26=_0x2546c9;return this[_0x3a8d26(0x5de)]()['some'](_0x30a34c=>_0x30a34c[_0x3a8d26(0x173)]());},Spriteset_Battle[_0x2546c9(0x79f)]['isAnyoneJumping']=function(){const _0x34875a=_0x2546c9;return this[_0x34875a(0x5de)]()[_0x34875a(0x335)](_0xea2f47=>_0xea2f47[_0x34875a(0x1ac)]());},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x4fa)]=function(){const _0x393a3b=_0x2546c9;return this[_0x393a3b(0x5de)]()['some'](_0xf43aae=>_0xf43aae[_0x393a3b(0x26e)]());},Spriteset_Battle[_0x2546c9(0x79f)]['isAnyoneSkewing']=function(){const _0x114f5f=_0x2546c9;return this[_0x114f5f(0x5de)]()[_0x114f5f(0x335)](_0x76991b=>_0x76991b[_0x114f5f(0x39a)]());},Spriteset_Battle['prototype'][_0x2546c9(0x44b)]=function(){const _0x1ef505=_0x2546c9;return this[_0x1ef505(0x5de)]()[_0x1ef505(0x335)](_0x1b3dca=>_0x1b3dca[_0x1ef505(0xa4b)]());},Spriteset_Battle[_0x2546c9(0x79f)][_0x2546c9(0x9ad)]=function(){const _0x2a4fac=_0x2546c9;return this[_0x2a4fac(0x5de)]()[_0x2a4fac(0x335)](_0x5f0b93=>_0x5f0b93[_0x2a4fac(0x26a)]());},VisuMZ[_0x2546c9(0x895)]['Window_ItemList_maxCols']=Window_ItemList['prototype'][_0x2546c9(0x12c)],Window_ItemList[_0x2546c9(0x79f)][_0x2546c9(0x12c)]=function(){const _0xe58d02=_0x2546c9;if(SceneManager[_0xe58d02(0x671)]()){if(_0xe58d02(0x1f9)===_0xe58d02(0x1f9)){if(SceneManager[_0xe58d02(0x465)][_0xe58d02(0x8e0)]()===_0xe58d02(0x60d))return VisuMZ['BattleCore'][_0xe58d02(0x4b7)][_0xe58d02(0x8c9)][_0xe58d02(0x94a)];else{if(_0xe58d02(0x715)!==_0xe58d02(0x36d))return VisuMZ[_0xe58d02(0x895)]['Settings']['BattleLayout']['SkillItemStandardCols'];else _0x5d1187[_0xe58d02(0x895)][_0xe58d02(0xb2b)][_0xe58d02(0x40c)](this,_0x3ddfc3);}}else _0x10ca3d*=-0x1,_0x56501b*=-0x1;}else return VisuMZ['BattleCore'][_0xe58d02(0x913)][_0xe58d02(0x40c)](this);},VisuMZ[_0x2546c9(0x895)]['Window_SkillList_maxCols']=Window_SkillList[_0x2546c9(0x79f)]['maxCols'],Window_SkillList[_0x2546c9(0x79f)][_0x2546c9(0x12c)]=function(){const _0x20071a=_0x2546c9;if(SceneManager[_0x20071a(0x671)]()){if(SceneManager['_scene'][_0x20071a(0x8e0)]()===_0x20071a(0x60d))return VisuMZ[_0x20071a(0x895)]['Settings'][_0x20071a(0x8c9)][_0x20071a(0x94a)];else{if(_0x20071a(0x226)==='SGywP')_0x13979a+=_0xb8a802,_0x2e20d2+=_0x201d13[_0x20071a(0x55e)]()?-_0x4f6e1d:_0xc92ee5;else return VisuMZ[_0x20071a(0x895)][_0x20071a(0x4b7)][_0x20071a(0x8c9)][_0x20071a(0xdc)];}}else return VisuMZ[_0x20071a(0x895)][_0x20071a(0x71e)]['call'](this);},VisuMZ['BattleCore']['Window_Options_addGeneralOptions']=Window_Options[_0x2546c9(0x79f)][_0x2546c9(0x929)],Window_Options[_0x2546c9(0x79f)][_0x2546c9(0x929)]=function(){const _0x3b0fa6=_0x2546c9;VisuMZ[_0x3b0fa6(0x895)][_0x3b0fa6(0x56b)][_0x3b0fa6(0x40c)](this),this['addAutoBattleCommands'](),this[_0x3b0fa6(0x7c9)]();},Window_Options[_0x2546c9(0x79f)][_0x2546c9(0xab8)]=function(){const _0x4cba33=_0x2546c9;VisuMZ[_0x4cba33(0x895)][_0x4cba33(0x4b7)][_0x4cba33(0x2fa)][_0x4cba33(0x243)]&&(this[_0x4cba33(0x9bb)](),this[_0x4cba33(0x9fd)]());},Window_Options[_0x2546c9(0x79f)][_0x2546c9(0x7c9)]=function(){const _0x17d134=_0x2546c9;if(!VisuMZ['BattleCore']['Settings']['HpGauge'][_0x17d134(0xaed)])return;const _0x166d7c=TextManager[_0x17d134(0xb0a)],_0x2992ea=_0x17d134(0xb0a);this[_0x17d134(0x9ee)](_0x166d7c,_0x2992ea);},Window_Options[_0x2546c9(0x79f)][_0x2546c9(0x9bb)]=function(){const _0x218742=_0x2546c9,_0x2a5705=TextManager[_0x218742(0x6de)],_0x4ea935=_0x218742(0xd9);this[_0x218742(0x9ee)](_0x2a5705,_0x4ea935);},Window_Options['prototype'][_0x2546c9(0x9fd)]=function(){const _0x2c239f=_0x2546c9,_0x51bffc=TextManager[_0x2c239f(0xb44)],_0x5be398=_0x2c239f(0x1c8);this[_0x2c239f(0x9ee)](_0x51bffc,_0x5be398);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x788)]=Window_Options[_0x2546c9(0x79f)][_0x2546c9(0x3f8)],Window_Options['prototype'][_0x2546c9(0x3f8)]=function(_0x316309){const _0xfa410b=_0x2546c9,_0x3e6f75=this[_0xfa410b(0x6e)](_0x316309);return _0x3e6f75===_0xfa410b(0x1c8)?this[_0xfa410b(0x86b)]():VisuMZ['BattleCore']['Window_Options_statusText'][_0xfa410b(0x40c)](this,_0x316309);},Window_Options[_0x2546c9(0x79f)][_0x2546c9(0x86b)]=function(){const _0x29961e=_0x2546c9,_0x604f25=VisuMZ[_0x29961e(0x895)][_0x29961e(0x4b7)][_0x29961e(0x2fa)],_0x5de35d=this[_0x29961e(0x711)](_0x29961e(0x1c8));return _0x5de35d?_0x604f25['StyleON']:_0x604f25[_0x29961e(0x40f)];},Window_ShopStatus['prototype']['getItemDamageAmountLabelBattleCore']=function(){const _0x3b7223=_0x2546c9,_0x41498a=DataManager[_0x3b7223(0x840)](this[_0x3b7223(0x6c3)]),_0x59a5de=VisuMZ[_0x3b7223(0x3e3)][_0x41498a];if(!_0x59a5de)return this[_0x3b7223(0x17e)]();const _0x483958=_0x3b7223(0xadb)[_0x3b7223(0xa3e)](this[_0x3b7223(0x6c3)][_0x3b7223(0x471)][_0x3b7223(0x59f)]),_0x5618b5=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x3b7223(0x6c3)]['damage']['type']];return _0x59a5de[_0x483958]['format'](_0x5618b5);},Window_ShopStatus[_0x2546c9(0x79f)][_0x2546c9(0x50c)]=function(){const _0xd90463=_0x2546c9,_0x1e3095=DataManager[_0xd90463(0x840)](this[_0xd90463(0x6c3)]),_0x2e1f2f=VisuMZ[_0xd90463(0x3e3)][_0x1e3095];if(!_0x2e1f2f)return this[_0xd90463(0x13f)]();return _0x2e1f2f['DamageDisplay'][_0xd90463(0x40c)](this);},VisuMZ['BattleCore'][_0x2546c9(0x7fe)]=Window_PartyCommand['prototype']['initialize'],Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x4c3)]=function(_0x4ccbee){const _0x30d665=_0x2546c9;VisuMZ[_0x30d665(0x895)][_0x30d665(0x7fe)]['call'](this,_0x4ccbee),this[_0x30d665(0x640)](_0x4ccbee);},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x640)]=function(_0x4af862){const _0x1bff61=_0x2546c9,_0x46d6fe=new Rectangle(0x0,0x0,_0x4af862[_0x1bff61(0x9f9)],_0x4af862['height']);this[_0x1bff61(0x971)]=new Window_Base(_0x46d6fe),this['_commandNameWindow'][_0x1bff61(0x3fc)]=0x0,this[_0x1bff61(0x8c8)](this[_0x1bff61(0x971)]),this[_0x1bff61(0x9e0)]();},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x9de)]=function(){const _0x1f0905=_0x2546c9;Window_Command[_0x1f0905(0x79f)]['callUpdateHelp']['call'](this);if(this[_0x1f0905(0x971)])this[_0x1f0905(0x9e0)]();},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x9e0)]=function(){const _0x38e8ea=_0x2546c9,_0x4aba92=this['_commandNameWindow'];_0x4aba92[_0x38e8ea(0x92e)][_0x38e8ea(0x3b6)]();const _0x21d2a1=this[_0x38e8ea(0x3bd)](this[_0x38e8ea(0xde)]());if(_0x21d2a1===_0x38e8ea(0x51c)&&this[_0x38e8ea(0x973)]()>0x0){const _0x3442e2=this['itemLineRect'](this[_0x38e8ea(0xde)]());let _0x2afcae=this['commandName'](this[_0x38e8ea(0xde)]());_0x2afcae=_0x2afcae[_0x38e8ea(0x795)](/\\I\[(\d+)\]/gi,''),_0x4aba92[_0x38e8ea(0x9e3)](),this[_0x38e8ea(0x7d5)](_0x2afcae,_0x3442e2),this[_0x38e8ea(0x835)](_0x2afcae,_0x3442e2),this[_0x38e8ea(0x592)](_0x2afcae,_0x3442e2);}},Window_PartyCommand['prototype']['commandNameWindowDrawBackground']=function(_0x9d3ec3,_0x52053c){},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x835)]=function(_0x1517f2,_0x44bdb8){const _0x59fb39=_0x2546c9,_0x69a2e7=this[_0x59fb39(0x971)];_0x69a2e7[_0x59fb39(0x620)](_0x1517f2,0x0,_0x44bdb8['y'],_0x69a2e7[_0x59fb39(0x651)],_0x59fb39(0x6d3));},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x592)]=function(_0x37d78d,_0x35738d){const _0x490f7b=_0x2546c9,_0x25b16c=this[_0x490f7b(0x971)],_0x47ed16=$gameSystem[_0x490f7b(0x9f6)](),_0x1ccc10=_0x35738d['x']+Math['floor'](_0x35738d['width']/0x2)+_0x47ed16;_0x25b16c['x']=_0x25b16c['width']/-0x2+_0x1ccc10,_0x25b16c['y']=Math[_0x490f7b(0x296)](_0x35738d['height']/0x2);},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x469)]=function(){const _0x4572d2=_0x2546c9;this[_0x4572d2(0x52a)](),this[_0x4572d2(0xa25)](),this[_0x4572d2(0x605)](),this['addOptionsCommand'](),this[_0x4572d2(0x193)]();},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x52a)]=function(){const _0x34ae64=_0x2546c9,_0xfc520b=this['commandStyle'](),_0x21b3a7=VisuMZ[_0x34ae64(0x895)][_0x34ae64(0x4b7)][_0x34ae64(0x1a3)]['CmdIconFight'],_0x4a30aa=_0xfc520b===_0x34ae64(0x388)?TextManager[_0x34ae64(0x2ca)]:_0x34ae64(0x378)[_0x34ae64(0xa3e)](_0x21b3a7,TextManager[_0x34ae64(0x2ca)]),_0x47f37f=this[_0x34ae64(0x878)]();this[_0x34ae64(0x9ee)](_0x4a30aa,_0x34ae64(0x2ca),_0x47f37f);},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x878)]=function(){return!![];},Window_PartyCommand[_0x2546c9(0x79f)]['addAutoBattleCommand']=function(){const _0x1b0ce6=_0x2546c9;if(!this[_0x1b0ce6(0x2fe)]())return;const _0x3dc8d5=this[_0x1b0ce6(0x952)](),_0x31a1c8=VisuMZ['BattleCore']['Settings']['PartyCmd'][_0x1b0ce6(0x5bb)],_0x3d0240=_0x3dc8d5===_0x1b0ce6(0x388)?TextManager[_0x1b0ce6(0x1b3)]:_0x1b0ce6(0x378)[_0x1b0ce6(0xa3e)](_0x31a1c8,TextManager[_0x1b0ce6(0x1b3)]),_0x4bc6bc=this[_0x1b0ce6(0x485)]();this[_0x1b0ce6(0x9ee)](_0x3d0240,_0x1b0ce6(0x1b3),_0x4bc6bc);},Window_PartyCommand['prototype'][_0x2546c9(0x2fe)]=function(){const _0x7564b3=_0x2546c9;return VisuMZ[_0x7564b3(0x895)]['Settings'][_0x7564b3(0x1a3)][_0x7564b3(0xb1e)];},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x485)]=function(){return!![];},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x605)]=function(){},Window_PartyCommand['prototype'][_0x2546c9(0x6f0)]=function(){const _0x5a78ca=_0x2546c9;if(!this[_0x5a78ca(0x2be)]())return;const _0x25336d=this['commandStyle'](),_0x5595f9=VisuMZ[_0x5a78ca(0x895)][_0x5a78ca(0x4b7)][_0x5a78ca(0x1a3)][_0x5a78ca(0x2e6)],_0x1a123a=_0x25336d===_0x5a78ca(0x388)?TextManager['options']:'\x5cI[%1]%2'['format'](_0x5595f9,TextManager[_0x5a78ca(0x5a4)]),_0xe16a6c=this['isOptionsCommandEnabled']();this['addCommand'](_0x1a123a,_0x5a78ca(0x5a4),_0xe16a6c);},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x2be)]=function(){const _0x5c5648=_0x2546c9;return VisuMZ[_0x5c5648(0x895)]['Settings'][_0x5c5648(0x1a3)]['CommandAddOptions'];},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x11e)]=function(){return!![];},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x193)]=function(){const _0x521b5a=_0x2546c9,_0x16899b=this[_0x521b5a(0x952)](),_0x192352=VisuMZ[_0x521b5a(0x895)][_0x521b5a(0x4b7)]['PartyCmd'][_0x521b5a(0x5d5)],_0x5dfb13=_0x16899b===_0x521b5a(0x388)?TextManager['escape']:_0x521b5a(0x378)[_0x521b5a(0xa3e)](_0x192352,TextManager['escape']),_0x4c459a=this[_0x521b5a(0x99)]();this[_0x521b5a(0x9ee)](_0x5dfb13,_0x521b5a(0x208),_0x4c459a);},Window_PartyCommand[_0x2546c9(0x79f)]['isEscapeCommandEnabled']=function(){return BattleManager['canEscape']();},Window_PartyCommand['prototype'][_0x2546c9(0x311)]=function(){const _0x226f00=_0x2546c9;return VisuMZ[_0x226f00(0x895)][_0x226f00(0x4b7)][_0x226f00(0x1a3)][_0x226f00(0x1d0)];},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x96b)]=function(_0x26827c){const _0xfdc694=_0x2546c9,_0x35c8c0=this[_0xfdc694(0x3bd)](_0x26827c);if(_0x35c8c0===_0xfdc694(0x689))this[_0xfdc694(0x289)](_0x26827c);else{if(_0x35c8c0==='icon'){if('azKOA'==='azKOA')this[_0xfdc694(0x15e)](_0x26827c);else return this['battlerSprites']()[_0xfdc694(0x335)](_0x21bb7f=>_0x21bb7f[_0xfdc694(0x1ac)]());}else _0xfdc694(0x836)==='WEHdg'?this[_0xfdc694(0x289)](_0x173f42):Window_Command[_0xfdc694(0x79f)][_0xfdc694(0x96b)]['call'](this,_0x26827c);}},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x952)]=function(){const _0x5c9f4c=_0x2546c9;return VisuMZ[_0x5c9f4c(0x895)][_0x5c9f4c(0x4b7)][_0x5c9f4c(0x1a3)][_0x5c9f4c(0x7ca)];},Window_PartyCommand['prototype'][_0x2546c9(0x3bd)]=function(_0x1db888){const _0x3d9219=_0x2546c9;if(_0x1db888<0x0)return _0x3d9219(0x388);const _0x311dea=this[_0x3d9219(0x952)]();if(_0x311dea!=='auto')return _0x311dea;else{if(this['maxItems']()>0x0){if(_0x3d9219(0x357)!=='dBTqP'){const _0x35232f=this['commandName'](_0x1db888);if(_0x35232f[_0x3d9219(0x1e0)](/\\I\[(\d+)\]/i)){const _0x5a0abc=this['itemLineRect'](_0x1db888),_0x4de438=this['textSizeEx'](_0x35232f)[_0x3d9219(0x9f9)];if(_0x4de438<=_0x5a0abc[_0x3d9219(0x9f9)]){if(_0x3d9219(0x231)!==_0x3d9219(0x78f))return'iconText';else this[_0x3d9219(0x9bb)](),this['addBattleCoreAutoBattleStyleCommand']();}else return'icon';}}else{const _0x588c07=_0x4393a9[_0x3ff466];if(!_0x588c07)return;const _0x3b93a1=new _0x3c2751();this[_0x3d9219(0x949)](_0x3b93a1),_0x3b93a1['setCommonEvent'](_0x49aba1);}}}return _0x3d9219(0x388);},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x289)]=function(_0x1d0efb){const _0x54eac2=_0x2546c9,_0x4de01b=this[_0x54eac2(0x4ff)](_0x1d0efb),_0x583b8c=this[_0x54eac2(0x82d)](_0x1d0efb),_0x5ed875=this['textSizeEx'](_0x583b8c)[_0x54eac2(0x9f9)];this['changePaintOpacity'](this[_0x54eac2(0x4bc)](_0x1d0efb));const _0x39a077=this[_0x54eac2(0x311)]();if(_0x39a077===_0x54eac2(0x9c8))this[_0x54eac2(0x9ec)](_0x583b8c,_0x4de01b['x']+_0x4de01b['width']-_0x5ed875,_0x4de01b['y'],_0x5ed875);else{if(_0x39a077==='center'){if(_0x54eac2(0x90d)===_0x54eac2(0x96a)){const _0x500638=_0x41f6f9(_0x36da51['$1']);return[_0x1ab189['members']()[_0x500638]];}else{const _0x52f1f6=_0x4de01b['x']+Math['floor']((_0x4de01b['width']-_0x5ed875)/0x2);this[_0x54eac2(0x9ec)](_0x583b8c,_0x52f1f6,_0x4de01b['y'],_0x5ed875);}}else this[_0x54eac2(0x9ec)](_0x583b8c,_0x4de01b['x'],_0x4de01b['y'],_0x5ed875);}},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x15e)]=function(_0x50a694){const _0x5cc923=_0x2546c9;this['commandName'](_0x50a694)[_0x5cc923(0x1e0)](/\\I\[(\d+)\]/i);const _0x35709c=Number(RegExp['$1'])||0x0,_0x494824=this[_0x5cc923(0x4ff)](_0x50a694),_0x24489f=_0x494824['x']+Math[_0x5cc923(0x296)]((_0x494824[_0x5cc923(0x9f9)]-ImageManager[_0x5cc923(0x7d)])/0x2),_0x5f4e17=_0x494824['y']+(_0x494824[_0x5cc923(0x3de)]-ImageManager[_0x5cc923(0xa5c)])/0x2;this[_0x5cc923(0x594)](_0x35709c,_0x24489f,_0x5f4e17);},Window_PartyCommand[_0x2546c9(0x79f)]['hide']=function(){},Window_PartyCommand[_0x2546c9(0x79f)][_0x2546c9(0x570)]=function(){const _0x45a452=_0x2546c9;Window_Command[_0x45a452(0x79f)]['activate'][_0x45a452(0x40c)](this);const _0x42093a=this['battleLayoutStyle']();_0x42093a===_0x45a452(0x60d)&&(_0x45a452(0x3ed)!==_0x45a452(0x3ed)?(this[_0x45a452(0x8e5)][_0x45a452(0x40b)]('addText',_0x34460e[_0x45a452(0x8db)]['format'](_0x4b0e4b)),this['_logWindow'][_0x45a452(0x40b)](_0x45a452(0x532)),_0x46a4a4=!![]):this['showHelpWindow']());},Window_PartyCommand['prototype'][_0x2546c9(0x8e0)]=function(){const _0x2363b3=_0x2546c9;if(this[_0x2363b3(0x774)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=SceneManager['_scene'][_0x2363b3(0x8e0)](),this[_0x2363b3(0x774)];},Window_PartyCommand['prototype']['updateHelp']=function(){const _0x4f7ca=_0x2546c9,_0x272b7b=VisuMZ[_0x4f7ca(0x895)][_0x4f7ca(0x4b7)]['PartyCmd'],_0x71c3f2=this[_0x4f7ca(0x562)]();switch(_0x71c3f2){case _0x4f7ca(0x2ca):this[_0x4f7ca(0x8b2)][_0x4f7ca(0x6c8)](_0x272b7b[_0x4f7ca(0xa5e)]);break;case _0x4f7ca(0x1b3):this[_0x4f7ca(0x8b2)][_0x4f7ca(0x6c8)](_0x272b7b[_0x4f7ca(0x7e3)]);break;case'options':this[_0x4f7ca(0x8b2)]['setText'](_0x272b7b['HelpOptions']);break;case _0x4f7ca(0x208):this[_0x4f7ca(0x8b2)][_0x4f7ca(0x6c8)](_0x272b7b[_0x4f7ca(0x24f)]);break;default:this[_0x4f7ca(0x8b2)]['setText']('');break;}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x29b)]=Window_ActorCommand['prototype'][_0x2546c9(0x4c3)],Window_ActorCommand['prototype']['initialize']=function(_0x53d7e2){const _0x2008e7=_0x2546c9;VisuMZ[_0x2008e7(0x895)][_0x2008e7(0x29b)][_0x2008e7(0x40c)](this,_0x53d7e2),this[_0x2008e7(0x640)](_0x53d7e2);},Window_ActorCommand[_0x2546c9(0x79f)]['createCommandNameWindow']=function(_0x41976c){const _0x1c73aa=_0x2546c9,_0x2f0878=new Rectangle(0x0,0x0,_0x41976c['width'],_0x41976c[_0x1c73aa(0x3de)]);this[_0x1c73aa(0x971)]=new Window_Base(_0x2f0878),this['_commandNameWindow'][_0x1c73aa(0x3fc)]=0x0,this[_0x1c73aa(0x8c8)](this['_commandNameWindow']),this['updateCommandNameWindow']();},Window_ActorCommand['prototype'][_0x2546c9(0x9de)]=function(){const _0x53c872=_0x2546c9;Window_Command['prototype'][_0x53c872(0x9de)][_0x53c872(0x40c)](this);if(this[_0x53c872(0x971)])this[_0x53c872(0x9e0)]();},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x9e0)]=function(){const _0x5d6c3d=_0x2546c9,_0x1704b8=this[_0x5d6c3d(0x971)];_0x1704b8[_0x5d6c3d(0x92e)][_0x5d6c3d(0x3b6)]();const _0x167969=this[_0x5d6c3d(0x3bd)](this['index']());if(_0x167969===_0x5d6c3d(0x51c)&&this['maxItems']()>0x0){const _0x2628ad=this[_0x5d6c3d(0x4ff)](this[_0x5d6c3d(0xde)]());let _0x3fa60c=this[_0x5d6c3d(0x82d)](this[_0x5d6c3d(0xde)]());_0x3fa60c=_0x3fa60c[_0x5d6c3d(0x795)](/\\I\[(\d+)\]/gi,''),_0x1704b8['resetFontSettings'](),this[_0x5d6c3d(0x7d5)](_0x3fa60c,_0x2628ad),this[_0x5d6c3d(0x835)](_0x3fa60c,_0x2628ad),this[_0x5d6c3d(0x592)](_0x3fa60c,_0x2628ad);}},Window_ActorCommand[_0x2546c9(0x79f)]['commandNameWindowDrawBackground']=function(_0x196826,_0x3c8a24){},Window_ActorCommand['prototype']['commandNameWindowDrawText']=function(_0x2f8e18,_0x11a9a0){const _0x1c31ce=_0x2546c9,_0x1422a8=this[_0x1c31ce(0x971)];_0x1422a8[_0x1c31ce(0x620)](_0x2f8e18,0x0,_0x11a9a0['y'],_0x1422a8[_0x1c31ce(0x651)],_0x1c31ce(0x6d3));},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x592)]=function(_0x2a48c9,_0x367e2f){const _0x1f9117=_0x2546c9,_0x586e3c=this['_commandNameWindow'],_0x5cb000=$gameSystem[_0x1f9117(0x9f6)](),_0x3375e5=_0x367e2f['x']+Math[_0x1f9117(0x296)](_0x367e2f[_0x1f9117(0x9f9)]/0x2)+_0x5cb000;_0x586e3c['x']=_0x586e3c['width']/-0x2+_0x3375e5,_0x586e3c['y']=Math['floor'](_0x367e2f[_0x1f9117(0x3de)]/0x2);},Window_ActorCommand['prototype']['makeCommandList']=function(){const _0x24a6c9=_0x2546c9;if(!this[_0x24a6c9(0x2f0)])return;const _0x5bd457=this[_0x24a6c9(0x2f0)]['battleCommands']();for(const _0x22005c of _0x5bd457){this[_0x24a6c9(0x89d)](_0x22005c[_0x24a6c9(0x13e)]()[_0x24a6c9(0xb19)]());}},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x89d)]=function(_0x4057f7){const _0x163f2a=_0x2546c9;_0x4057f7===_0x163f2a(0x1dd)&&this[_0x163f2a(0xade)]();['STYPES',_0x163f2a(0x94b)][_0x163f2a(0xa7e)](_0x4057f7)&&(_0x163f2a(0x413)===_0x163f2a(0x413)?this[_0x163f2a(0xa38)]():(_0x3fb830[_0x163f2a(0x80c)]=_0x547728,_0x21c1c4[_0x163f2a(0x508)]=!![],this['stop']()));_0x4057f7===_0x163f2a(0x3ca)&&this[_0x163f2a(0x242)]();_0x4057f7===_0x163f2a(0x18c)&&(_0x163f2a(0x585)==='CYBPy'?this[_0x163f2a(0xaf5)]():this['addItemCommand']());_0x4057f7===_0x163f2a(0x33a)&&this['addEscapeCommand']();_0x4057f7===_0x163f2a(0x118)&&('jmZYB'!==_0x163f2a(0x2a0)?_0x37b427[_0x163f2a(0x7a5)](_0x2f26e4[_0x163f2a(0x6b3)],![]):this[_0x163f2a(0xa25)]());if(_0x4057f7[_0x163f2a(0x1e0)](/STYPE: (\d+)/i)){const _0xf8499d=Number(RegExp['$1']);this[_0x163f2a(0x350)](_0xf8499d);}else{if(_0x4057f7['match'](/STYPE: (.*)/i)){const _0x26b5c0=DataManager[_0x163f2a(0x2ef)](RegExp['$1']);this[_0x163f2a(0x350)](_0x26b5c0);}}_0x4057f7===_0x163f2a(0xa41)&&this[_0x163f2a(0x1aa)]();if(_0x4057f7[_0x163f2a(0x1e0)](/SKILL: (\d+)/i)){if(_0x163f2a(0x441)===_0x163f2a(0xa0f)){if(!_0x271489)return![];return _0x7f2023[_0x163f2a(0x408)]()===this[_0x163f2a(0x408)]();}else{const _0x195740=Number(RegExp['$1']);this[_0x163f2a(0xa0c)]($dataSkills[_0x195740]);}}else{if(_0x4057f7[_0x163f2a(0x1e0)](/SKILL: (.*)/i)){const _0x4cba8b=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x163f2a(0xa0c)]($dataSkills[_0x4cba8b]);}}_0x4057f7==='PARTY'&&Imported[_0x163f2a(0x703)]&&(_0x163f2a(0x4c0)===_0x163f2a(0x4c0)?this[_0x163f2a(0x266)]():this[_0x163f2a(0x767)](_0x163f2a(0x48a))),[_0x163f2a(0x6f6),_0x163f2a(0x740)][_0x163f2a(0xa7e)](_0x4057f7)&&Imported[_0x163f2a(0xcc)]&&this[_0x163f2a(0xa63)](),_0x4057f7===_0x163f2a(0x25a)&&Imported[_0x163f2a(0x2ac)]&&this['addWeaponSwapCommand'](!![]);},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0xade)]=function(){const _0x3169ae=_0x2546c9,_0x130434=$dataSkills[this[_0x3169ae(0x2f0)]['attackSkillId']()];if(!_0x130434)return;if(!this[_0x3169ae(0x6ef)](_0x130434))return;const _0x248e1b=this[_0x3169ae(0x952)](),_0x26bae4=DataManager[_0x3169ae(0x82e)](_0x130434),_0x2c2c1c=DataManager['battleCommandIcon'](_0x130434),_0x297687=_0x248e1b==='text'?_0x26bae4:'\x5cI[%1]%2'[_0x3169ae(0xa3e)](_0x2c2c1c,_0x26bae4);this[_0x3169ae(0x9ee)](_0x297687,_0x3169ae(0x8f4),this[_0x3169ae(0x2f0)]['canAttack']());},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x242)]=function(){const _0xd183de=_0x2546c9,_0xdfcc50=$dataSkills[this[_0xd183de(0x2f0)][_0xd183de(0xa45)]()];if(!_0xdfcc50)return;if(!this[_0xd183de(0x6ef)](_0xdfcc50))return;const _0x18f6f7=this[_0xd183de(0x952)](),_0x54dede=DataManager[_0xd183de(0x82e)](_0xdfcc50),_0x1e2789=DataManager['battleCommandIcon'](_0xdfcc50),_0x138ff1=_0x18f6f7==='text'?_0x54dede:_0xd183de(0x378)['format'](_0x1e2789,_0x54dede);this[_0xd183de(0x9ee)](_0x138ff1,_0xd183de(0x2fb),this['_actor'][_0xd183de(0xaf9)]());},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x62a)]=function(){const _0x2a2fa8=_0x2546c9,_0x405e5d=this[_0x2a2fa8(0x952)](),_0x3dd289=VisuMZ['BattleCore'][_0x2a2fa8(0x4b7)]['ActorCmd'][_0x2a2fa8(0x82f)],_0xf01597=_0x405e5d===_0x2a2fa8(0x388)?TextManager[_0x2a2fa8(0x1ff)]:_0x2a2fa8(0x378)['format'](_0x3dd289,TextManager[_0x2a2fa8(0x1ff)]),_0x69a54d=this['isItemCommandEnabled']();this[_0x2a2fa8(0x9ee)](_0xf01597,_0x2a2fa8(0x1ff),_0x69a54d);},Window_ActorCommand[_0x2546c9(0x79f)]['isItemCommandEnabled']=function(){const _0x476202=_0x2546c9;return this[_0x476202(0x2f0)]&&this['_actor'][_0x476202(0x95)]();},Window_ActorCommand[_0x2546c9(0x79f)]['addSkillCommands']=function(){const _0x5de91f=_0x2546c9,_0x3275a1=this[_0x5de91f(0x2f0)][_0x5de91f(0x4d9)]();for(const _0x2f3acd of _0x3275a1){this[_0x5de91f(0x350)](_0x2f3acd);}},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x350)]=function(_0x4e60d9){const _0x59a3a8=_0x2546c9;let _0x16bdcf=$dataSystem[_0x59a3a8(0x4d9)][_0x4e60d9];if(!_0x16bdcf)return;let _0x1fb8fc=_0x16bdcf;const _0x1c0640=this[_0x59a3a8(0x952)]();if(_0x1c0640===_0x59a3a8(0x388))_0x59a3a8(0xa22)===_0x59a3a8(0x986)?_0xa9252e['prototype'][_0x59a3a8(0x96b)]['call'](this,_0x13cf68):(_0x1fb8fc=_0x1fb8fc[_0x59a3a8(0x795)](/\x1I\[(\d+)\]/gi,''),_0x1fb8fc=_0x1fb8fc[_0x59a3a8(0x795)](/\\I\[(\d+)\]/gi,''));else{if(!_0x16bdcf[_0x59a3a8(0x1e0)](/\\I\[(\d+)\]/i)){const _0x10d129=Imported[_0x59a3a8(0x1c2)]?VisuMZ['SkillsStatesCore'][_0x59a3a8(0x4b7)][_0x59a3a8(0x456)]:VisuMZ['BattleCore'][_0x59a3a8(0x4b7)][_0x59a3a8(0x702)],_0x5a919c=$dataSystem[_0x59a3a8(0xae)][_0x59a3a8(0xa7e)](_0x4e60d9),_0x3eb139=_0x5a919c?_0x10d129['IconStypeMagic']:_0x10d129[_0x59a3a8(0xb21)];_0x1fb8fc='\x5cI[%1]%2'[_0x59a3a8(0xa3e)](_0x3eb139,_0x16bdcf);}}this[_0x59a3a8(0x9ee)](_0x1fb8fc,_0x59a3a8(0x185),!![],_0x4e60d9);},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x1aa)]=function(){const _0x475036=_0x2546c9,_0x22ef67=this[_0x475036(0x2f0)][_0x475036(0x4d9)](),_0x116ebf=this[_0x475036(0x2f0)][_0x475036(0x9b2)]();for(const _0x254fce of _0x116ebf){if(!_0x254fce)continue;if(Imported[_0x475036(0x1c2)]){if(_0x475036(0x159)!==_0x475036(0x159)){const _0x1ca9bc=this[_0x475036(0x2dc)]();if(_0x1ca9bc)_0x1ca9bc[_0x475036(0x52b)](_0x15f7bc);}else{if(this[_0x475036(0x56d)](_0x254fce))continue;if(this[_0x475036(0x990)](_0x254fce))continue;}}else{if(!_0x22ef67['includes'](_0x254fce['stypeId']))continue;}this['addSingleSkillCommand'](_0x254fce);}},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x56d)]=function(_0x35afb5){const _0x4ea5e2=_0x2546c9,_0x466846=this[_0x4ea5e2(0x2f0)][_0x4ea5e2(0x4d9)](),_0x385acf=_0x466846['filter'](_0xd18ee9=>DataManager[_0x4ea5e2(0x39d)](_0x35afb5)['includes'](_0xd18ee9));return _0x385acf[_0x4ea5e2(0x4ce)]<=0x0;},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x990)]=function(_0x1e4341){const _0x42aa29=_0x2546c9;if(Imported['VisuMZ_1_SkillsStatesCore']){if(_0x42aa29(0x743)!==_0x42aa29(0x2ea)){if(VisuMZ[_0x42aa29(0x607)][_0x42aa29(0xa05)]>=1.24){if(this['_actor']){if(_0x42aa29(0x1b5)===_0x42aa29(0x1b5)){if(!VisuMZ[_0x42aa29(0x607)]['CheckVisibleBattleNotetags'](this[_0x42aa29(0x2f0)],_0x1e4341))return!![];if(!VisuMZ['SkillsStatesCore']['CheckVisibleSwitchNotetags'](this[_0x42aa29(0x2f0)],_0x1e4341))return!![];if(!VisuMZ[_0x42aa29(0x607)]['CheckVisibleSkillNotetags'](this[_0x42aa29(0x2f0)],_0x1e4341))return!![];}else{const _0x45a575=this[_0x42aa29(0x8e0)]();if(_0x38c27b&&['xp',_0x42aa29(0x57c)][_0x42aa29(0xa7e)](_0x45a575))this['resizeWindowXPStyle'](_0x3c18f5);else _0x3cd1ff&&[_0x42aa29(0x60d)][_0x42aa29(0xa7e)](_0x45a575)&&(this[_0x42aa29(0x53b)](_0x472c45),this['showHelpWindow']());_0x124c8a['BattleCore'][_0x42aa29(0x25b)][_0x42aa29(0x40c)](this,_0x2d4aa2),_0x5a11ce&&_0x48c774[_0x42aa29(0x332)]()[_0x42aa29(0x4ce)]>0x0&&_0x17a4d6[_0x42aa29(0x2dc)]()&&_0x5e02a8['battler']()['stepForward']();}}}else{if(_0x42aa29(0x69e)===_0x42aa29(0xa5))_0x160f04[_0x42aa29(0x1d1)][_0x42aa29(0xa05)]<1.11&&(_0x3dd6a6(_0x57e6db[_0x42aa29(0xa3e)](_0x42aa29(0x565))),_0x2e24cc['exit']());else{if(!Window_SkillList[_0x42aa29(0x79f)][_0x42aa29(0x72d)][_0x42aa29(0x40c)](this,_0x1e4341))return!![];if(!Window_SkillList[_0x42aa29(0x79f)][_0x42aa29(0x1e3)][_0x42aa29(0x40c)](this,_0x1e4341))return!![];if(!Window_SkillList[_0x42aa29(0x79f)]['checkShowHideSkillNotetags'][_0x42aa29(0x40c)](this,_0x1e4341))return!![];}}}else{if(this[_0x42aa29(0xa3a)]()<=0x0)return;}}return![];},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0xa0c)]=function(_0x48a281){const _0x10a9e7=_0x2546c9;if(!_0x48a281)return;if(!this['canAddSkillCommand'](_0x48a281))return;const _0x278dc7=this[_0x10a9e7(0x952)](),_0x2427ee=DataManager[_0x10a9e7(0x82e)](_0x48a281),_0x27ab9f=DataManager[_0x10a9e7(0x8f9)](_0x48a281),_0xe9c9b9=_0x278dc7==='text'?_0x2427ee:_0x10a9e7(0x378)[_0x10a9e7(0xa3e)](_0x27ab9f,_0x2427ee),_0x3545d9=this[_0x10a9e7(0x2f0)][_0x10a9e7(0x9cb)](_0x48a281);this[_0x10a9e7(0x9ee)](_0xe9c9b9,_0x10a9e7(0x224),_0x3545d9,_0x48a281['id']);},Window_ActorCommand[_0x2546c9(0x79f)]['canAddSkillCommand']=function(_0x223314){const _0x39ae97=_0x2546c9,_0xec9d1e=_0x223314[_0x39ae97(0x4c1)];if(_0xec9d1e[_0x39ae97(0x1e0)](/<COMMAND REQUIRE LEARN>/i)){if(_0x39ae97(0x63b)==='JIHNe'){if(!this[_0x39ae97(0x2f0)]['isLearnedSkill'](_0x223314['id']))return![];}else{this[_0x39ae97(0x40b)](_0x39ae97(0x5cc),_0x1b255d);_0x181ac7[_0x39ae97(0x895)][_0x39ae97(0x4b7)][_0x39ae97(0x950)][_0x39ae97(0x79)]&&this[_0x39ae97(0x40b)](_0x39ae97(0x74a),_0x522cc1,[_0x57052e['_subject']],-0x1);if(!_0xcfe13e[_0x39ae97(0x895)][_0x39ae97(0x4b7)]['BattleLog'][_0x39ae97(0x688)])return;this[_0x39ae97(0x40b)]('addText',_0x21ff1b[_0x39ae97(0xa9b)][_0x39ae97(0xa3e)](_0x2535ef[_0x39ae97(0x395)]()));}}if(_0xec9d1e[_0x39ae97(0x1e0)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x39ae97(0x2f0)]['hasSkill'](_0x223314['id']))return![];}const _0x533ed6=VisuMZ[_0x39ae97(0x895)][_0x39ae97(0x3c6)](_0x223314,_0x39ae97(0x5e9));if(VisuMZ[_0x39ae97(0x895)]['JS'][_0x533ed6]){if(!VisuMZ[_0x39ae97(0x895)]['JS'][_0x533ed6][_0x39ae97(0x40c)](this,this[_0x39ae97(0x2f0)],_0x223314))return![];}return VisuMZ['BattleCore']['CheckSkillCommandShowSwitches'](_0x223314);},VisuMZ['BattleCore'][_0x2546c9(0x834)]=function(_0x234a4c){const _0x432cc2=_0x2546c9,_0x29d9d0=_0x234a4c[_0x432cc2(0x4c1)];if(_0x29d9d0[_0x432cc2(0x1e0)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x328957=JSON['parse']('['+RegExp['$1'][_0x432cc2(0x1e0)](/\d+/g)+']');for(const _0x596c68 of _0x328957){if(!$gameSwitches[_0x432cc2(0xafd)](_0x596c68))return![];}return!![];}if(_0x29d9d0[_0x432cc2(0x1e0)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x432cc2(0x45f)===_0x432cc2(0x1b8)){if(!_0x3dbfd9[_0x432cc2(0x671)]())return;if(!_0x687ab[_0x432cc2(0x87b)])return;_0x1c9c90['ConvertParams'](_0x328e36,_0x3c110c);const _0x48af07=_0x30a2c0[_0x432cc2(0x3fb)](),_0x83dd25=_0x49463e[_0x432cc2(0x90b)];if(!_0x48af07)return;_0x960692[_0x432cc2(0x82b)](0x0,_0x38e461[_0x432cc2(0xa6a)],_0x872f8b[_0x432cc2(0xc2)]);if(_0x83dd25)_0x48af07['setWaitMode']('battleAngle');}else{const _0x284f3c=JSON[_0x432cc2(0x505)]('['+RegExp['$1'][_0x432cc2(0x1e0)](/\d+/g)+']');for(const _0x464fa3 of _0x284f3c){if(!$gameSwitches[_0x432cc2(0xafd)](_0x464fa3))return![];}return!![];}}if(_0x29d9d0[_0x432cc2(0x1e0)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('LQYLk'!==_0x432cc2(0x503)){const _0xfaae00=JSON['parse']('['+RegExp['$1'][_0x432cc2(0x1e0)](/\d+/g)+']');for(const _0xe19290 of _0xfaae00){if($gameSwitches[_0x432cc2(0xafd)](_0xe19290))return!![];}return![];}else _0x17e841+=_0x1f794f;}if(_0x29d9d0['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2e38fc=JSON['parse']('['+RegExp['$1'][_0x432cc2(0x1e0)](/\d+/g)+']');for(const _0x21c738 of _0x2e38fc){if(!$gameSwitches[_0x432cc2(0xafd)](_0x21c738))return!![];}return![];}if(_0x29d9d0['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x432cc2(0x2c1)!=='LYWcc'){const _0x4be5a7=JSON['parse']('['+RegExp['$1'][_0x432cc2(0x1e0)](/\d+/g)+']');for(const _0x6e19ce of _0x4be5a7){if(!$gameSwitches['value'](_0x6e19ce))return!![];}return![];}else this[_0x432cc2(0x426)]=_0x2b7b90;}if(_0x29d9d0[_0x432cc2(0x1e0)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3c05d5=JSON[_0x432cc2(0x505)]('['+RegExp['$1'][_0x432cc2(0x1e0)](/\d+/g)+']');for(const _0x2bf90d of _0x3c05d5){if(_0x432cc2(0x87c)!=='Kyarb'){if($gameSwitches[_0x432cc2(0xafd)](_0x2bf90d))return![];}else{if(!(_0x493a6f[_0x432cc2(0x895)][_0x432cc2(0x4b7)]['ActorCmd']['ShowCosts']??!![]))return;const _0x4c6139=this['commandSymbol'](_0x2679a2);if(![_0x432cc2(0x8f4),'guard','singleSkill'][_0x432cc2(0xa7e)](_0x4c6139))return;const _0x5a05bf=this[_0x432cc2(0x4ff)](_0x4324b7);let _0x5f328c=null;if(_0x4c6139==='attack')_0x5f328c=_0xcc6c32[this[_0x432cc2(0x2f0)][_0x432cc2(0x820)]()];else _0x4c6139===_0x432cc2(0x2fb)?_0x5f328c=_0x1f502e[this[_0x432cc2(0x2f0)][_0x432cc2(0xa45)]()]:_0x5f328c=_0xe34487[this[_0x432cc2(0x466)][_0x168d4c][_0x432cc2(0x101)]];this[_0x432cc2(0x634)](this[_0x432cc2(0x2f0)],_0x5f328c,_0x5a05bf['x'],_0x5a05bf['y'],_0x5a05bf['width']);}}return!![];}return!![];},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x193)]=function(){const _0x59451e=_0x2546c9,_0x1c6118=this[_0x59451e(0x952)](),_0xc650bb=VisuMZ[_0x59451e(0x895)][_0x59451e(0x4b7)][_0x59451e(0x1a3)]['CmdIconEscape'],_0x356443=_0x1c6118===_0x59451e(0x388)?TextManager['escape']:'\x5cI[%1]%2'[_0x59451e(0xa3e)](_0xc650bb,TextManager[_0x59451e(0x208)]),_0x104913=this['isEscapeCommandEnabled']();this[_0x59451e(0x9ee)](_0x356443,_0x59451e(0x208),_0x104913);},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x99)]=function(){const _0x4d745c=_0x2546c9;return BattleManager[_0x4d745c(0x14e)]();},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0xa25)]=function(){const _0x420dd7=_0x2546c9,_0x7359ff=this['commandStyle'](),_0x4c28c8=VisuMZ[_0x420dd7(0x895)]['Settings'][_0x420dd7(0x1a3)][_0x420dd7(0x5bb)],_0x538758=_0x7359ff==='text'?TextManager[_0x420dd7(0x1b3)]:_0x420dd7(0x378)[_0x420dd7(0xa3e)](_0x4c28c8,TextManager[_0x420dd7(0x1b3)]),_0x185681=this[_0x420dd7(0x485)]();this[_0x420dd7(0x9ee)](_0x538758,_0x420dd7(0x1b3),_0x185681);},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x485)]=function(){return!![];},Window_ActorCommand['prototype']['itemTextAlign']=function(){const _0x143b58=_0x2546c9;return VisuMZ[_0x143b58(0x895)][_0x143b58(0x4b7)][_0x143b58(0x702)]['CmdTextAlign'];},Window_ActorCommand['prototype']['drawItem']=function(_0x2146e6){const _0x25a5f8=_0x2546c9,_0x225e88=this[_0x25a5f8(0x3bd)](_0x2146e6);if(_0x225e88===_0x25a5f8(0x689))'bFWCQ'!==_0x25a5f8(0x5a3)?this[_0x25a5f8(0x289)](_0x2146e6):this[_0x25a5f8(0xa38)]();else{if(_0x225e88===_0x25a5f8(0x51c)){if(_0x25a5f8(0x6e3)!==_0x25a5f8(0x276))this[_0x25a5f8(0x15e)](_0x2146e6);else return this[_0x25a5f8(0x5de)]()[_0x25a5f8(0x335)](_0x21aa4c=>_0x21aa4c['isGrowing']());}else Window_Command['prototype']['drawItem'][_0x25a5f8(0x40c)](this,_0x2146e6);}this['drawSingleSkillCost'](_0x2146e6);},Window_ActorCommand['prototype']['commandStyle']=function(){const _0x3f0773=_0x2546c9;return VisuMZ[_0x3f0773(0x895)][_0x3f0773(0x4b7)][_0x3f0773(0x702)]['CmdStyle'];},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x3bd)]=function(_0x4a9faf){const _0x38b8ae=_0x2546c9;if(_0x4a9faf<0x0)return _0x38b8ae(0x388);const _0x3bc51a=this[_0x38b8ae(0x952)]();if(_0x3bc51a!==_0x38b8ae(0x7da))return _0x38b8ae(0xe7)===_0x38b8ae(0xe7)?_0x3bc51a:_0x38b8ae(0x112)[_0x38b8ae(0xa3e)](_0x2f48b6(_0x15acdb['$1']));else{if(this[_0x38b8ae(0x973)]()>0x0){if(_0x38b8ae(0xadc)!=='HJrpI'){const _0x1a7b73=this['commandName'](_0x4a9faf);if(_0x1a7b73['match'](/\\I\[(\d+)\]/i)){if(_0x38b8ae(0x9a0)!=='McXXK'){const _0x19a610=this[_0x38b8ae(0x4ff)](_0x4a9faf),_0x365cd0=this['textSizeEx'](_0x1a7b73)['width'];if(_0x365cd0<=_0x19a610[_0x38b8ae(0x9f9)]){if(_0x38b8ae(0x2da)!==_0x38b8ae(0x2da))_0x57853f[_0x38b8ae(0x895)]['JS'][_0x6425a8][_0x38b8ae(0x40c)](this,this[_0x38b8ae(0x294)](),this[_0x38b8ae(0x294)](),_0x3ef0b7,_0x288ff9);else return _0x38b8ae(0x689);}else{if(_0x38b8ae(0x273)==='ttHAn'){if(!_0x24bd5e[_0x38b8ae(0x63d)])return;const _0x449089=_0x35ebd3[_0x38b8ae(0x465)]['_spriteset'];if(!_0x449089)return;if(_0x3c5dda['ActSeqImpact'][_0x38b8ae(0xa05)]<=1.04){_0xd00883('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x289adb[_0x38b8ae(0x510)]();return;}_0x26bdc7[_0x38b8ae(0x96)](_0x4e2d44,_0x11170a);const _0x5054bd=_0x1fb727['getLastPluginCommandInterpreter'](),_0x4799cb=_0x4f6959[_0x38b8ae(0x556)](0.01,_0x228ee7[_0x38b8ae(0xb33)]);_0x5b21d1[_0x38b8ae(0x35d)](_0x4799cb,_0x5054bd);}else return'icon';}}else{if(!_0x3ad5a3['VisuMZ_3_ActSeqImpact'])return;const _0x3d70d4=_0x2e1c1b[_0x38b8ae(0x465)]['_spriteset'];if(!_0x3d70d4)return;if(_0x3d290e[_0x38b8ae(0x4b4)][_0x38b8ae(0xa05)]<=1.04){_0x2f953e(_0x38b8ae(0x892)),_0x5b0259[_0x38b8ae(0x510)]();return;}_0x27474c[_0x38b8ae(0x96)](_0x2d5e99,_0xec6517);const _0x38cab2=_0x16b54d[_0x38b8ae(0x7c)];_0x3d70d4[_0x38b8ae(0xaf)](_0x38cab2);}}}else _0x20daa8[_0x38b8ae(0x67)](this[_0x38b8ae(0xadd)][_0x38b8ae(0x768)](this,_0x4175db,_0x3dc2f7,_0x19ca54,_0xf84e6f));}}return _0x38b8ae(0x388);},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x289)]=function(_0x9a586c){const _0x100b7e=_0x2546c9,_0x1aa71b=this[_0x100b7e(0x4ff)](_0x9a586c),_0x46f6d9=this[_0x100b7e(0x82d)](_0x9a586c),_0x571606=this[_0x100b7e(0x234)](_0x46f6d9)[_0x100b7e(0x9f9)];this['changePaintOpacity'](this[_0x100b7e(0x4bc)](_0x9a586c));const _0x2c30ad=this[_0x100b7e(0x311)]();if(_0x2c30ad===_0x100b7e(0x9c8)){if(_0x100b7e(0x23c)!==_0x100b7e(0xad6))this[_0x100b7e(0x9ec)](_0x46f6d9,_0x1aa71b['x']+_0x1aa71b[_0x100b7e(0x9f9)]-_0x571606,_0x1aa71b['y'],_0x571606);else{_0x27e1d4(_0x100b7e(0x892)),_0x190cb6['exit']();return;}}else{if(_0x2c30ad===_0x100b7e(0x6d3)){const _0x28a1e3=_0x1aa71b['x']+Math[_0x100b7e(0x296)]((_0x1aa71b[_0x100b7e(0x9f9)]-_0x571606)/0x2);this[_0x100b7e(0x9ec)](_0x46f6d9,_0x28a1e3,_0x1aa71b['y'],_0x571606);}else{if(_0x100b7e(0x186)==='lzWFq')this['drawTextEx'](_0x46f6d9,_0x1aa71b['x'],_0x1aa71b['y'],_0x571606);else{const _0x499394=this['_distortionSprite']['scale']['y'];_0x2bd63e-=(_0x499394-0x1)*this[_0x100b7e(0x3de)];}}}},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x15e)]=function(_0x3a258c){const _0x3dc704=_0x2546c9;this['commandName'](_0x3a258c)[_0x3dc704(0x1e0)](/\\I\[(\d+)\]/i);const _0x58bb29=Number(RegExp['$1'])||0x0,_0x439ecb=this[_0x3dc704(0x4ff)](_0x3a258c),_0xcf3705=_0x439ecb['x']+Math[_0x3dc704(0x296)]((_0x439ecb[_0x3dc704(0x9f9)]-ImageManager[_0x3dc704(0x7d)])/0x2),_0x441c85=_0x439ecb['y']+(_0x439ecb[_0x3dc704(0x3de)]-ImageManager[_0x3dc704(0xa5c)])/0x2;this[_0x3dc704(0x594)](_0x58bb29,_0xcf3705,_0x441c85);},Window_ActorCommand[_0x2546c9(0x79f)]['drawSingleSkillCost']=function(_0x257bbc){const _0x2fcc3a=_0x2546c9;if(!(VisuMZ[_0x2fcc3a(0x895)][_0x2fcc3a(0x4b7)][_0x2fcc3a(0x702)]['ShowCosts']??!![]))return;const _0x4fce33=this[_0x2fcc3a(0x6e)](_0x257bbc);if(![_0x2fcc3a(0x8f4),_0x2fcc3a(0x2fb),_0x2fcc3a(0x224)][_0x2fcc3a(0xa7e)](_0x4fce33))return;const _0x2c1dc3=this[_0x2fcc3a(0x4ff)](_0x257bbc);let _0x7717d9=null;if(_0x4fce33===_0x2fcc3a(0x8f4))_0x7717d9=$dataSkills[this[_0x2fcc3a(0x2f0)]['attackSkillId']()];else _0x4fce33===_0x2fcc3a(0x2fb)?_0x7717d9=$dataSkills[this['_actor'][_0x2fcc3a(0xa45)]()]:_0x7717d9=$dataSkills[this[_0x2fcc3a(0x466)][_0x257bbc][_0x2fcc3a(0x101)]];this[_0x2fcc3a(0x634)](this[_0x2fcc3a(0x2f0)],_0x7717d9,_0x2c1dc3['x'],_0x2c1dc3['y'],_0x2c1dc3[_0x2fcc3a(0x9f9)]);},Window_ActorCommand['prototype']['drawSkillCost']=function(_0x224881,_0x10f370,_0x230a18,_0x280d87,_0x281bba){const _0x5001b4=_0x2546c9;if(!_0x10f370)return;if(Imported[_0x5001b4(0x1c2)]){if('YGVIJ'==='NUdYQ'){const _0x2495a5=_0x10fb83[_0x5001b4(0x785)](_0x2e8702);_0x2495a5[_0x5001b4(0xabb)]=![],_0x2495a5[_0x5001b4(0x622)]=0x0,this[_0x5001b4(0xa3)]['push'](_0x2495a5);}else Window_Command[_0x5001b4(0x79f)]['drawSkillCost'][_0x5001b4(0x40c)](this,_0x224881,_0x10f370,_0x230a18,_0x280d87,_0x281bba);}else{if(_0x5001b4(0x5e3)===_0x5001b4(0xaf4)){if(_0x9b7311['ParseAllNotetags'])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x5001b4(0x75)]();}else Window_SkillList[_0x5001b4(0x79f)][_0x5001b4(0x634)][_0x5001b4(0x40c)](this,_0x10f370,_0x230a18,_0x280d87,_0x281bba);}},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0xb16)]=function(){},Window_ActorCommand['prototype']['activate']=function(){const _0xe2c464=_0x2546c9;Window_Command['prototype']['activate'][_0xe2c464(0x40c)](this);const _0x575e7a=this['battleLayoutStyle']();_0x575e7a==='border'&&(_0xe2c464(0x129)!==_0xe2c464(0x172)?this[_0xe2c464(0xbd)]():this[_0xe2c464(0x8c8)](this[_0xe2c464(0xac3)]));},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x8e0)]=function(){const _0x359d5f=_0x2546c9;if(this[_0x359d5f(0x774)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=SceneManager[_0x359d5f(0x465)][_0x359d5f(0x8e0)](),this[_0x359d5f(0x774)];},VisuMZ['BattleCore'][_0x2546c9(0x25b)]=Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x47e)],Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x47e)]=function(_0x32ed78){const _0x21fb95=_0x2546c9,_0x3e2982=this[_0x21fb95(0x8e0)]();if(_0x32ed78&&['xp',_0x21fb95(0x57c)][_0x21fb95(0xa7e)](_0x3e2982))this[_0x21fb95(0x55c)](_0x32ed78);else _0x32ed78&&['border'][_0x21fb95(0xa7e)](_0x3e2982)&&(this[_0x21fb95(0x53b)](_0x32ed78),this['showHelpWindow']());VisuMZ['BattleCore'][_0x21fb95(0x25b)][_0x21fb95(0x40c)](this,_0x32ed78),_0x32ed78&&$gameTroop['aliveMembers']()[_0x21fb95(0x4ce)]>0x0&&_0x32ed78[_0x21fb95(0x2dc)]()&&_0x32ed78['battler']()['stepForward']();},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x55c)]=function(_0x361e01){const _0x275a0a=_0x2546c9,_0x573f64=Math['round'](Graphics[_0x275a0a(0x8e7)]/0x3),_0x52e39c=Math[_0x275a0a(0x19b)](Graphics['boxWidth']/$gameParty[_0x275a0a(0xb15)]()['length']),_0x2eb0f8=Math['min'](_0x573f64,_0x52e39c),_0x14a45f=this[_0x275a0a(0x79b)](VisuMZ[_0x275a0a(0x895)][_0x275a0a(0x4b7)]['BattleLayout'][_0x275a0a(0x5bf)]),_0x46e313=_0x52e39c*_0x361e01[_0x275a0a(0xde)]()+(_0x52e39c-_0x2eb0f8)/0x2,_0x406819=SceneManager[_0x275a0a(0x465)]['_statusWindow']['y']-_0x14a45f;this[_0x275a0a(0x175)](_0x46e313,_0x406819,_0x2eb0f8,_0x14a45f),this[_0x275a0a(0x593)](),this[_0x275a0a(0x10d)](0x1);},Window_ActorCommand[_0x2546c9(0x79f)]['resizeWindowBorderStyle']=function(_0x33e680){const _0x3a452a=_0x2546c9,_0x44c551=SceneManager[_0x3a452a(0x465)][_0x3a452a(0x884)]();this[_0x3a452a(0x175)](_0x44c551['x'],_0x44c551['y'],_0x44c551[_0x3a452a(0x9f9)],_0x44c551[_0x3a452a(0x3de)]),this[_0x3a452a(0x593)](),this[_0x3a452a(0x10d)](0x0);},Window_ActorCommand[_0x2546c9(0x79f)][_0x2546c9(0x151)]=function(){const _0x58d79e=_0x2546c9;if(this['_dimmerSprite']){if(_0x58d79e(0x1d3)==='tjYTb')this[_0x58d79e(0x578)]['x']=0x0,this['_borderPortraitTargetX']=_0x149a7f[_0x58d79e(0x57f)](_0x2f3e5d[_0x58d79e(0x9f9)]/0x2);else{const _0x2c63d6=this['_dimmerSprite']['bitmap'],_0x37db06=this['width']-0x8,_0x543856=this[_0x58d79e(0x3de)],_0x50b74f=this[_0x58d79e(0x7a1)],_0x9ed1ad=ColorManager[_0x58d79e(0xca)](),_0x500e98=ColorManager[_0x58d79e(0x3fa)]();this[_0x58d79e(0x868)]['x']=0x4,_0x2c63d6['resize'](_0x37db06,_0x543856),_0x2c63d6[_0x58d79e(0x3df)](0x0,0x0,_0x37db06,_0x50b74f,_0x500e98,_0x9ed1ad,!![]),_0x2c63d6[_0x58d79e(0x7d1)](0x0,_0x50b74f,_0x37db06,_0x543856-_0x50b74f*0x2,_0x9ed1ad),_0x2c63d6[_0x58d79e(0x3df)](0x0,_0x543856-_0x50b74f,_0x37db06,_0x50b74f,_0x9ed1ad,_0x500e98,!![]),this['_dimmerSprite'][_0x58d79e(0x2a1)](0x0,0x0,_0x37db06,_0x543856);}}},Window_ActorCommand['prototype']['updateHelp']=function(){const _0x3e3ecb=_0x2546c9;if(!this[_0x3e3ecb(0x2f0)])return;const _0x640d78=VisuMZ[_0x3e3ecb(0x895)][_0x3e3ecb(0x4b7)][_0x3e3ecb(0x702)],_0x31a9ee=this[_0x3e3ecb(0x562)]();switch(_0x31a9ee){case _0x3e3ecb(0x8f4):this[_0x3e3ecb(0x345)]($dataSkills[this[_0x3e3ecb(0x2f0)][_0x3e3ecb(0x820)]()]);break;case _0x3e3ecb(0x2fb):this[_0x3e3ecb(0x345)]($dataSkills[this[_0x3e3ecb(0x2f0)][_0x3e3ecb(0xa45)]()]);break;case'skill':const _0x2c0577=_0x640d78[_0x3e3ecb(0xb26)],_0x4af52d=_0x2c0577[_0x3e3ecb(0xa3e)]($dataSystem[_0x3e3ecb(0x4d9)][this['currentExt']()]);this[_0x3e3ecb(0x8b2)][_0x3e3ecb(0x6c8)](_0x4af52d);break;case _0x3e3ecb(0x224):this[_0x3e3ecb(0x345)]($dataSkills[this[_0x3e3ecb(0xab)]()]);break;case _0x3e3ecb(0x1ff):this[_0x3e3ecb(0x8b2)][_0x3e3ecb(0x6c8)](_0x640d78['HelpItem']);break;case _0x3e3ecb(0x208):this['_helpWindow'][_0x3e3ecb(0x6c8)](_0x640d78[_0x3e3ecb(0x24f)]);break;case'autoBattle':this[_0x3e3ecb(0x8b2)][_0x3e3ecb(0x6c8)](_0x640d78['HelpAutoBattle']);break;default:this[_0x3e3ecb(0x8b2)][_0x3e3ecb(0x6c8)]('');break;}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xa1c)]=Window_BattleStatus['prototype'][_0x2546c9(0x4c3)],Window_BattleStatus[_0x2546c9(0x79f)]['initialize']=function(_0x398462){const _0xdc01a4=_0x2546c9;VisuMZ[_0xdc01a4(0x895)][_0xdc01a4(0xa1c)][_0xdc01a4(0x40c)](this,_0x398462),this['initBattleCore'](),this[_0xdc01a4(0x8ae)]();},Window_BattleStatus[_0x2546c9(0x79f)]['battleLayoutStyle']=function(){const _0x5be95f=_0x2546c9;if(this[_0x5be95f(0x774)])return this[_0x5be95f(0x774)];return this[_0x5be95f(0x774)]=SceneManager[_0x5be95f(0x465)][_0x5be95f(0x8e0)](),this[_0x5be95f(0x774)];},Window_BattleStatus[_0x2546c9(0x79f)]['initBattleCore']=function(){const _0x442a95=_0x2546c9;this[_0x442a95(0x338)]=this['isFrameVisible']();const _0x9e9c2b=VisuMZ[_0x442a95(0x895)][_0x442a95(0x4b7)][_0x442a95(0x8c9)];_0x9e9c2b[_0x442a95(0x95a)]&&(_0x442a95(0x8ff)===_0x442a95(0x8ff)?this['opacity']=0x0:(_0x4666ae[_0x442a95(0x79f)]['update'][_0x442a95(0x40c)](this),this['updateLink'](),this['updatePosition'](),this['updateAttachedSprites'](),this[_0x442a95(0x143)]()));},Window_BattleStatus['prototype'][_0x2546c9(0x267)]=function(){const _0x419c6f=_0x2546c9,_0x2477ef=VisuMZ[_0x419c6f(0x895)][_0x419c6f(0x4b7)][_0x419c6f(0x8c9)];if(_0x2477ef['StatusWindowSkinFilename'])return!![];const _0x9fe51d=this[_0x419c6f(0x8e0)]();switch(_0x9fe51d){case _0x419c6f(0x223):case _0x419c6f(0x60d):return!![];break;case _0x419c6f(0x304):case'xp':case _0x419c6f(0x57c):default:return![];break;}},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x170)]=function(){const _0x58c8c1=_0x2546c9;return this[_0x58c8c1(0x267)]()?0x0:_0x58c8c1(0x9e5)===_0x58c8c1(0x9e5)?0xa:0x1;},Window_BattleStatus['prototype'][_0x2546c9(0x12c)]=function(){const _0x3457e0=_0x2546c9,_0x506618=this[_0x3457e0(0x8e0)]();switch(_0x506618){case _0x3457e0(0x223):return 0x1;break;case'xp':case _0x3457e0(0x57c):return $gameParty[_0x3457e0(0xb15)]()['length'];break;case _0x3457e0(0x304):default:return $gameParty[_0x3457e0(0x72b)]();break;}},Window_BattleStatus['prototype'][_0x2546c9(0x3f1)]=function(){const _0x3cb1ed=_0x2546c9,_0x398df7=this[_0x3cb1ed(0x8e0)]();switch(_0x398df7){case _0x3cb1ed(0x223):return Window_StatusBase['prototype'][_0x3cb1ed(0x3f1)]['call'](this);break;case _0x3cb1ed(0x304):case'xp':case _0x3cb1ed(0x57c):default:return this['innerHeight'];break;}},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x5d1)]=function(){const _0x6e2576=_0x2546c9,_0x3bbe13=this[_0x6e2576(0x8e0)]();switch(_0x3bbe13){case _0x6e2576(0x223):return Window_StatusBase['prototype']['rowSpacing'][_0x6e2576(0x40c)](this);break;case'default':case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x2546c9(0x1be)]=function(){const _0x4a7556=_0x2546c9;this[_0x4a7556(0x267)]()?_0x4a7556(0x16a)!=='BalUb'?Window_StatusBase[_0x4a7556(0x79f)][_0x4a7556(0x1be)][_0x4a7556(0x40c)](this):_0x2d1ec5[_0x4a7556(0xa6)]():this['padding']=0x8;},Window_BattleStatus['prototype']['loadWindowskin']=function(){const _0x5062af=_0x2546c9,_0x55d95c=VisuMZ['BattleCore'][_0x5062af(0x4b7)]['BattleLayout'];_0x55d95c['StatusWindowSkinFilename']?this[_0x5062af(0x71d)]=ImageManager[_0x5062af(0xa70)](_0x55d95c[_0x5062af(0x1a0)]):_0x5062af(0x8c3)!=='OHvJI'?(this[_0x5062af(0x939)][_0x5062af(0x40b)](_0x34f176),this[_0x5062af(0x48c)](),this['callNextMethod']()):Window_StatusBase['prototype'][_0x5062af(0x663)][_0x5062af(0x40c)](this);},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x265)]=function(_0x4f363f){const _0x299c0f=_0x2546c9,_0x5056ed=VisuMZ[_0x299c0f(0x895)][_0x299c0f(0x4b7)][_0x299c0f(0x8c9)];if(_0x5056ed['StatusWindowSelectableBackHide'])return;Window_StatusBase['prototype'][_0x299c0f(0x265)][_0x299c0f(0x40c)](this,_0x4f363f);},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0xb0f)]=function(){const _0x56db4d=_0x2546c9;this[_0x56db4d(0xa29)]=!![];},Window_BattleStatus[_0x2546c9(0x79f)]['update']=function(){const _0x38b773=_0x2546c9;Window_StatusBase[_0x38b773(0x79f)]['update'][_0x38b773(0x40c)](this),this[_0x38b773(0x3f9)](),this[_0x38b773(0x443)]();if(this[_0x38b773(0x8e0)]()===_0x38b773(0x60d))this['updateBorderStyle']();},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x3f9)]=function(){const _0x7ccdcc=_0x2546c9;if($gameTemp['isBattleRefreshRequested']()){if(_0x7ccdcc(0x4e2)!=='bWxUg')this['preparePartyRefresh'](),this['_requestRefresh']=![],$gameTemp[_0x7ccdcc(0x316)]();else{if(!this[_0x7ccdcc(0x2be)]())return;const _0x4f36db=this['commandStyle'](),_0x44b466=_0x3c4816[_0x7ccdcc(0x895)][_0x7ccdcc(0x4b7)]['PartyCmd'][_0x7ccdcc(0x2e6)],_0x2a57db=_0x4f36db===_0x7ccdcc(0x388)?_0x210bdc['options']:_0x7ccdcc(0x378)['format'](_0x44b466,_0x4784f2[_0x7ccdcc(0x5a4)]),_0x331714=this[_0x7ccdcc(0x11e)]();this[_0x7ccdcc(0x9ee)](_0x2a57db,'options',_0x331714);}}else this['_requestRefresh']&&(this[_0x7ccdcc(0xa29)]=![],this[_0x7ccdcc(0x48c)](),this[_0x7ccdcc(0x32b)]());},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x412)]=function(){const _0x3cca02=_0x2546c9;Window_StatusBase['prototype'][_0x3cca02(0x412)][_0x3cca02(0x40c)](this);if(!$gameSystem[_0x3cca02(0x165)]())this[_0x3cca02(0x48c)]();},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0xb16)]=function(){const _0x4ff589=_0x2546c9;if(this['constructor']===Window_BattleStatus)return;Window_StatusBase['prototype'][_0x4ff589(0xb16)][_0x4ff589(0x40c)](this);},Window_BattleStatus[_0x2546c9(0x79f)]['drawBackgroundRect']=function(_0x3e13de){const _0x4fc5bd=_0x2546c9,_0x5471c9=this[_0x4fc5bd(0x8e0)]();switch(_0x5471c9){case'xp':case'portrait':break;case _0x4fc5bd(0x304):case _0x4fc5bd(0x223):case _0x4fc5bd(0x60d):default:return Window_StatusBase[_0x4fc5bd(0x79f)]['drawBackgroundRect'][_0x4fc5bd(0x40c)](this,_0x3e13de);break;}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x77f)]=Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x915)],Window_BattleStatus['prototype'][_0x2546c9(0x915)]=function(_0x892c12){const _0x573ecd=_0x2546c9,_0xf7d298=this['battleLayoutStyle']();switch(_0xf7d298){case'list':this[_0x573ecd(0x227)](_0x892c12);break;case'xp':this[_0x573ecd(0x502)](_0x892c12);break;case'portrait':this[_0x573ecd(0x73f)](_0x892c12);break;case _0x573ecd(0x304):case'border':default:VisuMZ[_0x573ecd(0x895)]['Window_BattleStatus_drawItemImage'][_0x573ecd(0x40c)](this,_0x892c12);break;}},Window_BattleStatus[_0x2546c9(0x79f)]['drawItemStatus']=function(_0x3a7b53){const _0x102590=_0x2546c9,_0x512626=this[_0x102590(0x8e0)]();if(!$gameSystem['isSideView']())this['centerFrontViewSprite'](_0x3a7b53);switch(_0x512626){case _0x102590(0x223):this[_0x102590(0x57b)](_0x3a7b53);break;case'xp':case'portrait':case'default':case _0x102590(0x60d):default:this['drawItemStatusXPStyle'](_0x3a7b53);break;}},Window_BattleStatus[_0x2546c9(0x79f)]['refreshCursor']=function(){const _0x299bda=_0x2546c9,_0x2b3eb3=this['battleLayoutStyle']();if(['xp']['includes'](_0x2b3eb3)&&!$gameSystem[_0x299bda(0x165)]()){this[_0x299bda(0x59e)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x299bda(0x79f)][_0x299bda(0xa7)][_0x299bda(0x40c)](this);},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x8ec)]=function(_0x2f27c5){const _0x28ac74=_0x2546c9,_0x171c93=this[_0x28ac74(0x97d)](_0x2f27c5)[_0x28ac74(0x2dc)]();if(!_0x171c93)return;const _0x4a4bfd=this[_0x28ac74(0x8e0)](),_0x31e87e=this[_0x28ac74(0x2d8)](_0x2f27c5);let _0x1f402f=Math[_0x28ac74(0x19b)](_0x31e87e['x']+_0x31e87e['width']/0x2)+this[_0x28ac74(0x7a1)];if([_0x28ac74(0x223)][_0x28ac74(0xa7e)](_0x4a4bfd)){if('bjxwY'!==_0x28ac74(0x138))_0x1f402f=_0x31e87e[_0x28ac74(0x9f9)]/$gameParty['battleMembers']()[_0x28ac74(0x4ce)],_0x1f402f*=_0x2f27c5,_0x1f402f+=_0x31e87e['width']/$gameParty[_0x28ac74(0xb15)]()[_0x28ac74(0x4ce)]/0x2;else{if(!this['_damageContainer'])return;if(!_0x455bd2)return;if(!_0x3b60e6)return;const _0x41fb2a=this['itemRect'](_0x6e4234['index']());_0x41fb2a['x']+=_0x41fb2a[_0x28ac74(0x9f9)]/0x2+this[_0x28ac74(0x7a1)],_0x1e3af4['x']=_0x41fb2a['x'],_0xf6123f['y']=_0x41fb2a['y'],this['_damageContainer'][_0x28ac74(0x8c8)](_0x32fe7e);}}let _0x3d3b47=Math[_0x28ac74(0x19b)](this[_0x28ac74(0x755)](_0x2f27c5,_0x171c93,_0x31e87e));_0x171c93[_0x28ac74(0x75a)](_0x1f402f,_0x3d3b47),this[_0x28ac74(0x64d)](_0x171c93,0x1),_0x171c93[_0x28ac74(0x412)](),this['updateEffectsContainer'](),this[_0x28ac74(0x32b)]();},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x755)]=function(_0x4f59b7,_0xdb9a77,_0xaaf270){const _0x46ae3b=_0x2546c9,_0x27f39f=VisuMZ[_0x46ae3b(0x895)]['Settings'][_0x46ae3b(0x8c9)],_0x3e0b33=this[_0x46ae3b(0x8e0)]();if(_0x3e0b33==='xp'){const _0x1938ed=_0x27f39f['XPSpriteYLocation'];switch(_0x1938ed[_0x46ae3b(0x917)]()[_0x46ae3b(0xb19)]()){case _0x46ae3b(0x4d5):return _0xaaf270[_0x46ae3b(0x3de)]-_0xdb9a77['_shadowSprite'][_0x46ae3b(0x3de)]/0x4;break;case _0x46ae3b(0x6d3):const _0x49a364=_0x27f39f[_0x46ae3b(0xcf)];return(_0xaaf270[_0x46ae3b(0x3de)]+(_0xdb9a77[_0x46ae3b(0x3de)]||_0x49a364))/0x2;break;case _0x46ae3b(0x98d):return 0x0;case _0x46ae3b(0x395):default:return this[_0x46ae3b(0x2ce)](_0xaaf270);break;}}else{if(_0x3e0b33===_0x46ae3b(0x57c)){}}return _0xdb9a77[_0x46ae3b(0x3de)];},Sprite_Name[_0x2546c9(0x79f)]['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x2546c9(0x79f)][_0x2546c9(0x5e2)]=function(){const _0x4ef9aa=_0x2546c9,_0x48ba48=this['name'](),_0x31ee4d=this['bitmapWidth'](),_0x35be28=this[_0x4ef9aa(0x42c)]();this[_0x4ef9aa(0x42b)](),this['bitmap'][_0x4ef9aa(0x3b6)](),this['bitmap']['drawTextTopAligned'](_0x48ba48,0x0,0x0,_0x31ee4d,_0x35be28,'left');},Bitmap['prototype'][_0x2546c9(0xaf3)]=function(_0x414772,_0x585b90,_0x28a1b0,_0x1e06cc,_0x291c6d,_0x2968ba){const _0x3606e6=_0x2546c9,_0x1b6df6=this[_0x3606e6(0x7b8)],_0x330fc6=_0x1b6df6['globalAlpha'];_0x1e06cc=_0x1e06cc||0xffffffff;let _0x7eef38=_0x585b90,_0x278c67=Math[_0x3606e6(0x19b)](_0x28a1b0+0x18/0x2+this[_0x3606e6(0x68a)]*0.35);if(_0x2968ba==='center'){if(_0x3606e6(0x59c)==='NttxD'){const _0x30c067=_0x3393f7[_0x3606e6(0x1ff)]();this[_0x3606e6(0x55f)](_0xfd1fcf,_0x33f04c,_0x5cfd47),this['createEffectActionSet'](_0x3166aa,_0x3dd1bd,_0x17e8d5),this[_0x3606e6(0x1de)](_0x5c9493,_0x22f088,_0x34892e);}else _0x7eef38+=_0x1e06cc/0x2;}_0x2968ba===_0x3606e6(0x9c8)&&(_0x3606e6(0x295)===_0x3606e6(0x501)?(_0x2f1c53(_0x25cdc0[_0x3606e6(0xa3e)]('BTB')),_0x3f0854[_0x3606e6(0x510)]()):_0x7eef38+=_0x1e06cc),_0x1b6df6[_0x3606e6(0x8a9)](),_0x1b6df6[_0x3606e6(0xb6)]=this[_0x3606e6(0x6fd)](),_0x1b6df6[_0x3606e6(0x804)]=_0x2968ba,_0x1b6df6[_0x3606e6(0x8a3)]=_0x3606e6(0x741),_0x1b6df6['globalAlpha']=0x1,this[_0x3606e6(0x5dc)](_0x414772,_0x7eef38,_0x278c67,_0x1e06cc),_0x1b6df6['globalAlpha']=_0x330fc6,this[_0x3606e6(0x488)](_0x414772,_0x7eef38,_0x278c67,_0x1e06cc),_0x1b6df6[_0x3606e6(0x359)](),this['_baseTexture'][_0x3606e6(0x9c)]();},Window_BattleStatus[_0x2546c9(0x79f)]['nameY']=function(_0x48869d){const _0x4f1af7=_0x2546c9;return this[_0x4f1af7(0x76d)](_0x48869d)-this['gaugeLineHeight']();},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x227)]=function(_0x169f31){const _0x3a3799=_0x2546c9;if(!VisuMZ[_0x3a3799(0x895)][_0x3a3799(0x4b7)][_0x3a3799(0x8c9)][_0x3a3799(0x522)])return;const _0x20a4ab=this[_0x3a3799(0x97d)](_0x169f31),_0xc1c4c3=this[_0x3a3799(0x2d8)](_0x169f31);_0xc1c4c3[_0x3a3799(0x9f9)]=ImageManager[_0x3a3799(0x30c)],_0xc1c4c3[_0x3a3799(0x3de)]-=0x2,this[_0x3a3799(0x410)](_0x20a4ab,_0xc1c4c3['x']+0x1,_0xc1c4c3['y']+0x1,_0xc1c4c3[_0x3a3799(0x9f9)],_0xc1c4c3[_0x3a3799(0x3de)]);},Window_BattleStatus[_0x2546c9(0x79f)]['drawItemStatusListStyle']=function(_0x5dcce1){const _0x391889=_0x2546c9,_0x5de182=VisuMZ[_0x391889(0x895)][_0x391889(0x4b7)]['BattleLayout'],_0x11ac8d=$dataSystem['optDisplayTp']?0x4:0x3,_0xd6e703=_0x11ac8d*0x80+(_0x11ac8d-0x1)*0x8+0x4,_0x38b081=this[_0x391889(0x97d)](_0x5dcce1),_0x1b230a=this[_0x391889(0x2d8)](_0x5dcce1);let _0xb5f0ad=_0x1b230a['x']+this[_0x391889(0x7a1)];if(_0x5de182['ShowFacesListStyle']){if(_0x391889(0x2a5)!==_0x391889(0x2a5))return _0x5ad8e3[_0x391889(0x14e)]();else _0xb5f0ad=_0x1b230a['x']+ImageManager[_0x391889(0x30c)]+0x8;}else _0xb5f0ad+=ImageManager['iconWidth'];const _0x14ac66=Math[_0x391889(0x19b)](Math[_0x391889(0xaaa)](_0x1b230a['x']+_0x1b230a[_0x391889(0x9f9)]-_0xd6e703,_0xb5f0ad)),_0xe6a3fd=Math[_0x391889(0x19b)](_0x1b230a['y']+(_0x1b230a['height']-Sprite_Name[_0x391889(0x79f)][_0x391889(0x42c)]())/0x2),_0x1d61d4=Math[_0x391889(0x19b)](_0x14ac66-ImageManager[_0x391889(0x7d)]/0x2-0x4),_0x1b7031=Math[_0x391889(0x19b)](_0x1b230a['y']+(_0x1b230a[_0x391889(0x3de)]-ImageManager['iconHeight'])/0x2+ImageManager[_0x391889(0xa5c)]/0x2);let _0x3deb98=_0x14ac66+0x88;const _0x1c6685=_0xe6a3fd;this[_0x391889(0x81b)](_0x38b081,_0x14ac66-0x4+(_0x5de182['TpbGaugeOffsetX']||0x0),_0xe6a3fd+(_0x5de182[_0x391889(0x476)]||0x0)),this[_0x391889(0x786)](_0x38b081,_0x14ac66+(_0x5de182[_0x391889(0x386)]||0x0),_0xe6a3fd+(_0x5de182['NameOffsetY']||0x0)),this[_0x391889(0x948)](_0x38b081,_0x1d61d4+(_0x5de182['StateIconOffsetX']||0x0),_0x1b7031+(_0x5de182[_0x391889(0x979)]||0x0)),this['placeGauge'](_0x38b081,'hp',_0x3deb98+0x88*0x0+(_0x5de182[_0x391889(0xaca)]||0x0),_0x1c6685+(_0x5de182['HpGaugeOffsetY']||0x0)),this[_0x391889(0x81a)](_0x38b081,'mp',_0x3deb98+0x88*0x1+(_0x5de182['MpGaugeOffsetX']||0x0),_0x1c6685+(_0x5de182[_0x391889(0x752)]||0x0)),$dataSystem[_0x391889(0x7a0)]&&this[_0x391889(0x81a)](_0x38b081,'tp',_0x3deb98+0x88*0x2+(_0x5de182[_0x391889(0x344)]||0x0),_0x1c6685+(_0x5de182['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x2546c9(0x79f)]['drawItemImageXPStyle']=function(_0x18fadb){const _0x51c042=_0x2546c9;if(!$gameSystem[_0x51c042(0x165)]())return;VisuMZ[_0x51c042(0x895)][_0x51c042(0x77f)][_0x51c042(0x40c)](this,_0x18fadb);},Window_BattleStatus[_0x2546c9(0x79f)]['drawItemStatusXPStyle']=function(_0x511867){const _0x170129=_0x2546c9,_0x1e920b=VisuMZ[_0x170129(0x895)][_0x170129(0x4b7)][_0x170129(0x8c9)],_0x1d4ce2=this[_0x170129(0x97d)](_0x511867),_0x3b6825=this['itemRect'](_0x511867),_0x1d49d3=Math[_0x170129(0x19b)](_0x3b6825['x']+(_0x3b6825['width']-0x80)/0x2),_0x2f3cc8=this['nameY'](_0x3b6825);let _0x47f867=_0x1d49d3-ImageManager[_0x170129(0x7d)]/0x2-0x4,_0x2996bd=_0x2f3cc8+ImageManager[_0x170129(0xa5c)]/0x2;_0x47f867-ImageManager[_0x170129(0x7d)]/0x2<_0x3b6825['x']&&(_0x47f867=_0x1d49d3+ImageManager['iconWidth']/0x2-0x4,_0x2996bd=_0x2f3cc8-ImageManager[_0x170129(0xa5c)]/0x2);const _0x341ebc=_0x1d49d3,_0x5ba6f1=this[_0x170129(0x76d)](_0x3b6825);this[_0x170129(0x81b)](_0x1d4ce2,_0x1d49d3+(_0x1e920b[_0x170129(0xe4)]||0x0),_0x2f3cc8+(_0x1e920b[_0x170129(0x476)]||0x0)),this[_0x170129(0x786)](_0x1d4ce2,_0x1d49d3+(_0x1e920b[_0x170129(0x386)]||0x0),_0x2f3cc8+(_0x1e920b['NameOffsetY']||0x0)),this[_0x170129(0x948)](_0x1d4ce2,_0x47f867+(_0x1e920b[_0x170129(0xa4a)]||0x0),_0x2996bd+(_0x1e920b[_0x170129(0x979)]||0x0)),this[_0x170129(0x81a)](_0x1d4ce2,'hp',_0x341ebc+(_0x1e920b[_0x170129(0xaca)]||0x0),_0x5ba6f1+(_0x1e920b['HpGaugeOffsetY']||0x0)),this[_0x170129(0x81a)](_0x1d4ce2,'mp',_0x341ebc+(_0x1e920b[_0x170129(0x5f4)]||0x0),_0x5ba6f1+this['gaugeLineHeight']()+(_0x1e920b[_0x170129(0x752)]||0x0)),$dataSystem[_0x170129(0x7a0)]&&(_0x170129(0x9fc)!=='xhymH'?(_0x62f621[_0x170129(0x969)]['x']=this['applyEasing'](_0x5ca879['skew']['x'],this[_0x170129(0x8de)],_0x51ad72,_0x13b57c,_0x20a22f),_0x200cce['skew']['y']=this[_0x170129(0xac6)](_0x18d0e1[_0x170129(0x969)]['y'],this[_0x170129(0x22b)],_0x356111,_0x53065a,_0x26078b)):this[_0x170129(0x81a)](_0x1d4ce2,'tp',_0x341ebc+(_0x1e920b[_0x170129(0x344)]||0x0),_0x5ba6f1+this[_0x170129(0x9f7)]()*0x2+(_0x1e920b[_0x170129(0x86e)]||0x0)));},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x64a)]=function(_0x4b521d){const _0x51824d=_0x2546c9;if(!VisuMZ[_0x51824d(0x895)][_0x51824d(0x4b7)][_0x51824d(0x8c9)][_0x51824d(0x49c)])return![];if(_0x4b521d['getBattlePortrait']())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x4b521d[_0x51824d(0x5d2)]();},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x2d1)]=function(){const _0x473d88=_0x2546c9;if(this[_0x473d88(0x97d)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x473d88(0xad4)!==_0x473d88(0x58b))return Number(RegExp['$1']);else _0x3c1b40=_0x329366[_0x473d88(0xae4)]((_0x3925ff,_0x5ef9f7,_0xe5fd53)=>_0xe5fd53[_0x473d88(0x402)](_0x3925ff)===_0x5ef9f7),_0x426e3a[_0x473d88(0x671)]()&&_0x56670f['isBattleFlipped']()&&(_0x31ded6=!_0x4796d1),_0x22308e['BattleCore'][_0x473d88(0x8dd)][_0x473d88(0x40c)](this,_0x1eebf2,_0x2fe482,_0x4fd15e),_0xc1d982[_0x473d88(0x671)]()&&_0x3fb882[_0x473d88(0x5a6)][_0x473d88(0xb24)]();}else{if(this[_0x473d88(0x97d)]()[_0x473d88(0x4c1)][_0x473d88(0x1e0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x473d88(0x287)!==_0x473d88(0xfc))return Number(RegExp['$1']);else this['_damageContainer']['x']=this['x'],this['_damageContainer']['y']=this['y'];}}return 0x0;},Game_Actor[_0x2546c9(0x79f)][_0x2546c9(0x967)]=function(){const _0x5bc2b9=_0x2546c9;if(this[_0x5bc2b9(0x97d)]()[_0x5bc2b9(0x4c1)][_0x5bc2b9(0x1e0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x5bc2b9(0x97d)]()['note'][_0x5bc2b9(0x1e0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x73f)]=function(_0x2d5ef7){const _0x523377=_0x2546c9,_0x45a60e=this[_0x523377(0x97d)](_0x2d5ef7);if(this[_0x523377(0x64a)](_0x45a60e)){const _0x3d362b=_0x523377(0xb3f)[_0x523377(0xa3e)](_0x45a60e[_0x523377(0x323)]()),_0x3ea6f6=this[_0x523377(0xdb)](_0x3d362b,Sprite),_0x1830c6=_0x45a60e[_0x523377(0x701)]();_0x1830c6!==''?_0x3ea6f6[_0x523377(0x2c4)]=ImageManager[_0x523377(0x586)](_0x1830c6):_0x3ea6f6[_0x523377(0x2c4)]=ImageManager[_0x523377(0xf6)];const _0x38bdb3=this[_0x523377(0x2d8)](_0x2d5ef7);_0x3ea6f6['anchor']['x']=0.5,_0x3ea6f6[_0x523377(0x9a7)]['y']=0x1;let _0x173133=Math['round'](_0x38bdb3['x']+_0x38bdb3[_0x523377(0x9f9)]/0x2)+this['padding'];_0x173133+=_0x45a60e[_0x523377(0x2d1)]();let _0x6ac3f0=Math[_0x523377(0x19b)](this[_0x523377(0x3de)]);_0x6ac3f0+=_0x45a60e[_0x523377(0x967)](),_0x3ea6f6['move'](_0x173133,_0x6ac3f0);const _0x20f692=VisuMZ['BattleCore'][_0x523377(0x4b7)][_0x523377(0x8c9)][_0x523377(0x3cb)];_0x3ea6f6[_0x523377(0x6a1)]['x']=_0x20f692,_0x3ea6f6[_0x523377(0x6a1)]['y']=_0x20f692,_0x3ea6f6['show']();}else{const _0x59aaea=this[_0x523377(0x23e)](_0x2d5ef7);this['drawActorFace'](_0x45a60e,_0x59aaea['x'],_0x59aaea['y'],_0x59aaea['width'],_0x59aaea['height']);}},Window_BattleStatus[_0x2546c9(0x79f)]['createInnerPortrait']=function(_0x40e821,_0x6d854f){const _0x178d88=_0x2546c9,_0x361c86=this[_0x178d88(0xd2)];if(_0x361c86[_0x40e821])return _0x361c86[_0x40e821];else{if('fwMXg'!==_0x178d88(0x7c1)){const _0x313735=new _0x6d854f();return _0x361c86[_0x40e821]=_0x313735,this[_0x178d88(0x17b)](_0x313735),this[_0x178d88(0x17b)](this[_0x178d88(0x89e)]),_0x313735;}else for(const _0x5563f9 of _0x23f48f){const _0x4f57fa=_0x2fc2e1[0x0][_0x178d88(0xa3e)](_0x5563f9[0x0]),_0x5c7d53=_0x5f81c0[0x1][_0x178d88(0xa3e)](_0x5563f9[0x1]),_0x48d174=new _0x1e63de(_0x1abe68[_0x178d88(0xa3e)](_0x5c7d53),'i');_0x73e15d[_0x4f57fa]=_0x48d174;}}},Window_BattleStatus['prototype']['_createClientArea']=function(){const _0x2a7763=_0x2546c9;this[_0x2a7763(0x6b2)](),this['_createEffectsContainer'](),Window_StatusBase[_0x2a7763(0x79f)][_0x2a7763(0xa1e)][_0x2a7763(0x40c)](this),this[_0x2a7763(0x690)]();},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x6b2)]=function(){const _0x32c94e=_0x2546c9;this[_0x32c94e(0x89e)]=new Sprite(),this['_cursorArea']['filters']=[new PIXI[(_0x32c94e(0x8ac))]['AlphaFilter']()],this[_0x32c94e(0x89e)][_0x32c94e(0x6fc)]=new Rectangle(),this[_0x32c94e(0x89e)][_0x32c94e(0x175)](this['_padding'],this[_0x32c94e(0x29c)]),this[_0x32c94e(0x8c8)](this[_0x32c94e(0x89e)]);},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x934)]=function(){const _0x2e6275=_0x2546c9;this[_0x2e6275(0x6ee)]=new Sprite(),this[_0x2e6275(0x8c8)](this[_0x2e6275(0x6ee)]);},Window_BattleStatus[_0x2546c9(0x79f)]['updateEffectsContainer']=function(){const _0x56614b=_0x2546c9;if(this[_0x56614b(0x6ee)]){if(_0x56614b(0x3d9)===_0x56614b(0x3d9))this[_0x56614b(0x8c8)](this[_0x56614b(0x6ee)]);else{const _0x4842eb=_0xeaee48[_0x56614b(0x97d)]();_0x31bba9[_0x56614b(0x895)][_0x56614b(0x93a)][_0x56614b(0x40c)](this);if(_0x4842eb){if(_0x4842eb===_0x86ff4a[_0x56614b(0x97d)]())return;if(_0x4842eb===_0x45f830[_0x56614b(0x41d)])return;if(_0x4842eb[_0x56614b(0x2dc)]())_0x4842eb['battler']()[_0x56614b(0x757)]();}}}},Window_BattleStatus['prototype'][_0x2546c9(0x690)]=function(){const _0xd20663=_0x2546c9;this[_0xd20663(0x69)]=new Sprite(),this[_0xd20663(0x8c8)](this[_0xd20663(0x69)]);},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x389)]=function(){const _0x1b4848=_0x2546c9;this[_0x1b4848(0x602)]=new Sprite();for(let _0x404924=0x0;_0x404924<0x9;_0x404924++){this[_0x1b4848(0x602)][_0x1b4848(0x8c8)](new Sprite());}this['_cursorArea'][_0x1b4848(0x8c8)](this['_cursorSprite']);},Window_BattleStatus['prototype'][_0x2546c9(0x6be)]=function(){const _0x318346=_0x2546c9;Window_StatusBase[_0x318346(0x79f)]['_updateClientArea']['call'](this),this[_0x318346(0x818)]();},Window_BattleStatus['prototype'][_0x2546c9(0x818)]=function(){const _0x5f399d=_0x2546c9,_0x39453e=this[_0x5f399d(0x29c)];this['_cursorArea'][_0x5f399d(0x175)](_0x39453e,_0x39453e),this[_0x5f399d(0x89e)]['x']=_0x39453e-this[_0x5f399d(0x1e9)]['x'],this[_0x5f399d(0x89e)]['y']=_0x39453e-this['origin']['y'],this[_0x5f399d(0x651)]>0x0&&this[_0x5f399d(0x2b3)]>0x0?'jRaEh'!==_0x5f399d(0x918)?this[_0x5f399d(0x3fc)]=0x0:this['_cursorArea'][_0x5f399d(0xa5a)]=this[_0x5f399d(0x334)]():this[_0x5f399d(0x89e)][_0x5f399d(0xa5a)]=![];},Window_BattleStatus[_0x2546c9(0x79f)]['_updateFilterArea']=function(){const _0x5356f2=_0x2546c9;Window_StatusBase[_0x5356f2(0x79f)]['_updateFilterArea'][_0x5356f2(0x40c)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x632)]=function(){const _0x6dc790=_0x2546c9,_0xc14675=this[_0x6dc790(0x89e)]['worldTransform'][_0x6dc790(0x997)](new Point(0x0,0x0)),_0x237eaa=this[_0x6dc790(0x89e)][_0x6dc790(0x6fc)];_0x237eaa['x']=_0xc14675['x']+this[_0x6dc790(0x1e9)]['x'],_0x237eaa['y']=_0xc14675['y']+this[_0x6dc790(0x1e9)]['y'],_0x237eaa[_0x6dc790(0x9f9)]=this['innerWidth'],_0x237eaa[_0x6dc790(0x3de)]=this['innerHeight'];},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x6c4)]=function(_0x31d988){const _0x89dcf7=_0x2546c9;if(this[_0x89dcf7(0x8e0)]()!==_0x89dcf7(0x57c))return;this[_0x89dcf7(0x73f)](_0x31d988[_0x89dcf7(0xde)]());},Window_BattleStatus['prototype']['addDamageSprite']=function(_0x320ada,_0x337fad){const _0x4ccab4=_0x2546c9;if(!this[_0x4ccab4(0x69)])return;if(!_0x320ada)return;if(!_0x337fad)return;const _0x1d5034=this[_0x4ccab4(0x2d8)](_0x337fad[_0x4ccab4(0xde)]());_0x1d5034['x']+=_0x1d5034['width']/0x2+this['padding'],_0x320ada['x']=_0x1d5034['x'],_0x320ada['y']=_0x1d5034['y'],this['_damageContainer'][_0x4ccab4(0x8c8)](_0x320ada);},Window_BattleStatus['prototype'][_0x2546c9(0xa1d)]=function(_0x3037a2){const _0x429f1a=_0x2546c9;if(!this['_damageContainer'])return;if(!_0x3037a2)return;this[_0x429f1a(0x69)][_0x429f1a(0xaa1)](_0x3037a2);},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x6c1)]=function(){const _0x194ed3=_0x2546c9;if(!this[_0x194ed3(0x825)]())return;if(!this[_0x194ed3(0x578)])this['createBorderStylePortraitSprite']();this[_0x194ed3(0x202)](),this[_0x194ed3(0x9d4)]();},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x825)]=function(){const _0x360059=_0x2546c9;if(this[_0x360059(0x150)]!==Window_BattleStatus)return![];if(!SceneManager[_0x360059(0x671)]())return![];return VisuMZ[_0x360059(0x895)][_0x360059(0x4b7)][_0x360059(0x8c9)][_0x360059(0x599)];},Window_BattleStatus['prototype'][_0x2546c9(0x34f)]=function(){const _0x58304c=_0x2546c9;this[_0x58304c(0x578)]=new Sprite();const _0xb4c3c6=SceneManager['_scene'],_0x238e90=_0xb4c3c6[_0x58304c(0x2b7)][_0x58304c(0x402)](_0xb4c3c6['_windowLayer']);_0xb4c3c6[_0x58304c(0x64d)](this['_borderPortraitSprite'],_0x238e90),this['_borderPortraitSprite'][_0x58304c(0x9a7)]['x']=0.5,this['_borderPortraitSprite']['anchor']['y']=0x1;const _0x5a2e3f=VisuMZ[_0x58304c(0x895)][_0x58304c(0x4b7)][_0x58304c(0x8c9)]['PortraitScaleBorderStyle'];this[_0x58304c(0x578)]['scale']['x']=_0x5a2e3f,this[_0x58304c(0x578)]['scale']['y']=_0x5a2e3f,this['_borderPortraitSprite']['y']=this['y']+this['height'],this[_0x58304c(0x521)]=0x0;},Window_BattleStatus[_0x2546c9(0x79f)]['prepareBorderActor']=function(){const _0x1700fd=_0x2546c9;this[_0x1700fd(0x578)][_0x1700fd(0xa5a)]=BattleManager[_0x1700fd(0x680)]();const _0x29f11c=BattleManager['actor']();if(_0x29f11c===this[_0x1700fd(0x578)][_0x1700fd(0x97d)])return;this[_0x1700fd(0x578)]['actor']=_0x29f11c||this[_0x1700fd(0x578)]['actor'];if(!_0x29f11c)return;else{if(_0x29f11c[_0x1700fd(0x701)]()===''){this[_0x1700fd(0x578)][_0x1700fd(0x2c4)]=ImageManager[_0x1700fd(0xf6)];return;}else{if(_0x1700fd(0xb17)!==_0x1700fd(0xb17))this['createHpGaugeSprite']();else{const _0x2593c=ImageManager['loadPicture'](_0x29f11c[_0x1700fd(0x701)]());_0x2593c[_0x1700fd(0x67)](this['processBorderActor'][_0x1700fd(0x768)](this,_0x2593c));}}}},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0xa2e)]=function(_0x41d863){const _0x1fb0bd=_0x2546c9;this[_0x1fb0bd(0x521)]=0x14,this['_borderPortraitSprite'][_0x1fb0bd(0x2c4)]=_0x41d863;SceneManager[_0x1fb0bd(0x465)][_0x1fb0bd(0x7a9)]()?(this['_borderPortraitSprite']['x']=0x0,this['_borderPortraitTargetX']=Math[_0x1fb0bd(0x57f)](_0x41d863[_0x1fb0bd(0x9f9)]/0x2)):(this[_0x1fb0bd(0x578)]['x']=this[_0x1fb0bd(0x9f9)],this[_0x1fb0bd(0x6c7)]=this[_0x1fb0bd(0x9f9)]*0x3/0x4);this[_0x1fb0bd(0x578)][_0x1fb0bd(0x3fc)]=0x0,this[_0x1fb0bd(0x578)]['y']=this['y']+this[_0x1fb0bd(0x3de)];const _0x15adff=BattleManager[_0x1fb0bd(0x97d)]();_0x15adff&&(this['_borderPortraitTargetX']+=_0x15adff[_0x1fb0bd(0x2d1)](),this[_0x1fb0bd(0x578)]['y']+=_0x15adff['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x2546c9(0x79f)]['updateBorderSprite']=function(){const _0x5ac2fb=_0x2546c9;if(this['_borderPortraitDuration']>0x0){const _0x2263b5=this[_0x5ac2fb(0x521)],_0x7cfa5=this[_0x5ac2fb(0x578)];_0x7cfa5['x']=(_0x7cfa5['x']*(_0x2263b5-0x1)+this[_0x5ac2fb(0x6c7)])/_0x2263b5,_0x7cfa5[_0x5ac2fb(0x3fc)]=(_0x7cfa5[_0x5ac2fb(0x3fc)]*(_0x2263b5-0x1)+0xff)/_0x2263b5,this[_0x5ac2fb(0x521)]--;}},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x443)]=function(){const _0x23b24b=_0x2546c9;return;this[_0x23b24b(0x6ee)]&&(this[_0x23b24b(0x6ee)]['x']=this['x'],this['_effectsContainer']['y']=this['y']),this[_0x23b24b(0x69)]&&(this[_0x23b24b(0x69)]['x']=this['x'],this[_0x23b24b(0x69)]['y']=this['y']);},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x8ae)]=function(){const _0xda4abb=_0x2546c9,_0x1e211a=VisuMZ[_0xda4abb(0x895)][_0xda4abb(0x4b7)][_0xda4abb(0x8c9)];if(_0x1e211a[_0xda4abb(0x40a)]){const _0x420d86=new Sprite();_0x420d86[_0xda4abb(0x2c4)]=ImageManager[_0xda4abb(0xa70)](_0x1e211a[_0xda4abb(0x40a)]),_0x420d86['x']=_0x1e211a[_0xda4abb(0x8a0)]||0x0,_0x420d86['y']=_0x1e211a[_0xda4abb(0x174)]||0x0,this[_0xda4abb(0x17b)](_0x420d86),this[_0xda4abb(0x5f9)]=_0x420d86;}if(_0x1e211a[_0xda4abb(0x47c)]){if(_0xda4abb(0x83a)==='xYAGa')this['addAttackCommand']();else{const _0x2164fc=new Sprite();_0x2164fc['bitmap']=ImageManager[_0xda4abb(0xa70)](_0x1e211a[_0xda4abb(0x47c)]),_0x2164fc['x']=_0x1e211a['StatusWindowAttachmentFrontOffsetX']||0x0,_0x2164fc['y']=_0x1e211a['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0xda4abb(0x8c8)](_0x2164fc),this[_0xda4abb(0x1eb)]=_0x2164fc;}}},Window_BattleStatus[_0x2546c9(0x79f)][_0x2546c9(0x32b)]=function(){const _0x3af624=_0x2546c9;this[_0x3af624(0x1eb)]&&this[_0x3af624(0x8c8)](this[_0x3af624(0x1eb)]),this['_backAttachmentSprite']&&(_0x3af624(0x285)!==_0x3af624(0x285)?(_0x367e69[_0x3af624(0x7c3)]=!![],this['makeSuccess'](_0x594d7f)):this[_0x3af624(0x17b)](this[_0x3af624(0x5f9)]));},Window_BattleActor[_0x2546c9(0x79f)][_0x2546c9(0x141)]=function(){const _0x34c77c=_0x2546c9;return Window_BattleStatus[_0x34c77c(0x79f)][_0x34c77c(0x141)][_0x34c77c(0x40c)](this)&&this[_0x34c77c(0x863)]();},Window_BattleActor[_0x2546c9(0x79f)]['isActionSelectionValid']=function(){const _0x5c0262=_0x2546c9,_0xddcd8d=BattleManager['inputtingAction'](),_0x15803e=this[_0x5c0262(0x97d)](this[_0x5c0262(0xde)]());if(!_0xddcd8d)return!![];if(!_0xddcd8d[_0x5c0262(0x1ff)]())return!![];const _0x14ae47=_0xddcd8d[_0x5c0262(0x1ff)]()[_0x5c0262(0x4c1)];if(_0x14ae47['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x5c0262(0x79c)===_0x5c0262(0x79c)){if(_0x15803e===BattleManager[_0x5c0262(0x97d)]())return![];}else _0x400fe7[_0x5c0262(0xa8a)](_0x1cd59b(_0xaba216['$1']));}return!![];},VisuMZ['BattleCore'][_0x2546c9(0x6eb)]=Window_BattleEnemy[_0x2546c9(0x79f)][_0x2546c9(0x4c3)],Window_BattleEnemy[_0x2546c9(0x79f)][_0x2546c9(0x4c3)]=function(_0x20d7e7){const _0x49ae47=_0x2546c9;this[_0x49ae47(0x611)]=null,VisuMZ[_0x49ae47(0x895)][_0x49ae47(0x6eb)][_0x49ae47(0x40c)](this,_0x20d7e7);},Window_BattleEnemy[_0x2546c9(0x79f)][_0x2546c9(0x12c)]=function(){const _0x27a618=_0x2546c9;return this[_0x27a618(0x973)]();},VisuMZ[_0x2546c9(0x895)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x2546c9(0x79f)][_0x2546c9(0x412)],Window_BattleEnemy['prototype'][_0x2546c9(0x412)]=function(){const _0x56c483=_0x2546c9;VisuMZ[_0x56c483(0x895)][_0x56c483(0x393)][_0x56c483(0x40c)](this),this['y']=Graphics[_0x56c483(0x3de)]*0xa;},Window_BattleEnemy[_0x2546c9(0x79f)][_0x2546c9(0x6c9)]=function(){const _0x49e743=_0x2546c9;return $gameTroop[_0x49e743(0x332)]()['slice'](0x0);},Window_BattleEnemy[_0x2546c9(0x79f)][_0x2546c9(0x48c)]=function(){const _0x355659=_0x2546c9;this[_0x355659(0x628)]=this[_0x355659(0x6c9)](),this[_0x355659(0xa35)](),Window_Selectable[_0x355659(0x79f)][_0x355659(0x48c)][_0x355659(0x40c)](this);},Window_BattleEnemy[_0x2546c9(0x79f)][_0x2546c9(0xa35)]=function(){const _0x4aed0b=_0x2546c9;this['_enemies'][_0x4aed0b(0xa58)]((_0x5b558e,_0x568706)=>{const _0x4b978a=_0x4aed0b;if(_0x5b558e[_0x4b978a(0x2dc)]()[_0x4b978a(0xa2f)]===_0x568706[_0x4b978a(0x2dc)]()[_0x4b978a(0xa2f)]){if('IvDUO'!==_0x4b978a(0x1ea)){if(!_0x37b596['value'](_0x48808a))return!![];}else return _0x5b558e[_0x4b978a(0x2dc)]()[_0x4b978a(0x38a)]-_0x568706['battler']()['_baseY'];}else return _0x5b558e[_0x4b978a(0x2dc)]()[_0x4b978a(0xa2f)]-_0x568706[_0x4b978a(0x2dc)]()['_baseX'];}),SceneManager[_0x4aed0b(0x6ff)]()&&('ekvgz'===_0x4aed0b(0x8f0)?this[_0x4aed0b(0x628)]['reverse']():_0xe81653[_0x4aed0b(0x79f)][_0x4aed0b(0x663)][_0x4aed0b(0x40c)](this));},Window_BattleEnemy[_0x2546c9(0x79f)]['autoSelect']=function(){const _0x13fc21=_0x2546c9,_0x4e1c9e=VisuMZ[_0x13fc21(0x895)][_0x13fc21(0x4b7)][_0x13fc21(0x862)];_0x4e1c9e[_0x13fc21(0xb9)]?this[_0x13fc21(0x624)]():'MdWoy'===_0x13fc21(0x1e8)?this[_0x13fc21(0xb3)]():_0x3e5333='center';},Window_BattleEnemy[_0x2546c9(0x79f)][_0x2546c9(0x624)]=function(){const _0x200b50=_0x2546c9;if(this[_0x200b50(0x611)]&&this['_enemies'][_0x200b50(0xa7e)](this['_lastEnemy'])){const _0x5efee6=this[_0x200b50(0x628)][_0x200b50(0x402)](this['_lastEnemy']);this['forceSelect'](_0x5efee6);}else this[_0x200b50(0xb3)]();},Window_BattleEnemy[_0x2546c9(0x79f)]['autoSelectPriority']=function(){const _0x49469c=_0x2546c9,_0x4450ab=VisuMZ[_0x49469c(0x895)][_0x49469c(0x4b7)][_0x49469c(0x862)];let _0x46127c=![];$gameSystem['isSideView']()?_0x46127c=_0x4450ab[_0x49469c(0x7a3)]:_0x46127c=_0x4450ab[_0x49469c(0x92)],this[_0x49469c(0x5ef)](_0x46127c?this[_0x49469c(0x973)]()-0x1:0x0);},Window_BattleEnemy[_0x2546c9(0x79f)]['callOkHandler']=function(){const _0x1cbd78=_0x2546c9;Window_Selectable[_0x1cbd78(0x79f)][_0x1cbd78(0x2ba)][_0x1cbd78(0x40c)](this),this[_0x1cbd78(0x611)]=this[_0x1cbd78(0x951)]();},Window_BattleItem[_0x2546c9(0x79f)][_0x2546c9(0xa7e)]=function(_0x359c63){const _0x1e1036=_0x2546c9;if(!_0x359c63)return![];return _0x359c63[_0x1e1036(0x486)]===0x0||_0x359c63[_0x1e1036(0x486)]===0x1;};function Window_AutoBattleCancel(){const _0x2f1e13=_0x2546c9;this[_0x2f1e13(0x4c3)](...arguments);}Window_AutoBattleCancel[_0x2546c9(0x79f)]=Object[_0x2546c9(0x315)](Window_Base[_0x2546c9(0x79f)]),Window_AutoBattleCancel[_0x2546c9(0x79f)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype'][_0x2546c9(0x4c3)]=function(_0x4d2e40){const _0x21eb09=_0x2546c9;Window_Base[_0x21eb09(0x79f)]['initialize']['call'](this,_0x4d2e40),this[_0x21eb09(0x10d)](this['bgType']()),this[_0x21eb09(0x48c)]();},Window_AutoBattleCancel['prototype'][_0x2546c9(0x2b1)]=function(){const _0x1fef07=_0x2546c9;return VisuMZ[_0x1fef07(0x895)][_0x1fef07(0x4b7)][_0x1fef07(0x2fa)][_0x1fef07(0x27b)];},Window_AutoBattleCancel[_0x2546c9(0x79f)][_0x2546c9(0x48c)]=function(){const _0x47a47a=_0x2546c9;this[_0x47a47a(0x92e)][_0x47a47a(0x3b6)]();const _0x397399=VisuMZ['BattleCore'][_0x47a47a(0x4b7)][_0x47a47a(0x2fa)][_0x47a47a(0x769)],_0x54e349=_0x397399[_0x47a47a(0xa3e)](this[_0x47a47a(0xb11)](),this[_0x47a47a(0x33c)]()),_0x34620d=this[_0x47a47a(0x234)](_0x54e349)[_0x47a47a(0x9f9)],_0x48c36f=Math['floor']((this[_0x47a47a(0x651)]-_0x34620d)/0x2);this[_0x47a47a(0x9ec)](_0x54e349,_0x48c36f,0x0,_0x34620d);},Window_AutoBattleCancel[_0x2546c9(0x79f)]['okButtonText']=function(){const _0x566def=_0x2546c9;if(Imported[_0x566def(0x53c)]){if('ikVWl'!==_0x566def(0x5ac))return TextManager[_0x566def(0xa32)]('ok');else _0x100b51['prototype'][_0x566def(0x268)][_0x566def(0x40c)](this);}else return VisuMZ[_0x566def(0x895)]['Settings'][_0x566def(0x2fa)][_0x566def(0x899)];},Window_AutoBattleCancel[_0x2546c9(0x79f)][_0x2546c9(0x33c)]=function(){const _0x132a83=_0x2546c9;if(Imported[_0x132a83(0x53c)]){if(_0x132a83(0x7eb)!==_0x132a83(0xb2))return TextManager[_0x132a83(0xa32)](_0x132a83(0x807));else _0x17e0a1['Actor'][_0x132a83(0x28e)]=![];}else{if(_0x132a83(0x490)!==_0x132a83(0xae5))return VisuMZ[_0x132a83(0x895)][_0x132a83(0x4b7)]['AutoBattle'][_0x132a83(0x70a)];else _0x233d57+=_0x2c1e94,_0xc4b9a6+=_0x581a3c;}},Window_AutoBattleCancel[_0x2546c9(0x79f)]['update']=function(){const _0x2d182c=_0x2546c9;Window_Base[_0x2d182c(0x79f)][_0x2d182c(0x9c)][_0x2d182c(0x40c)](this),this[_0x2d182c(0xa79)](),this[_0x2d182c(0x554)]();},Window_AutoBattleCancel[_0x2546c9(0x79f)][_0x2546c9(0xa79)]=function(){const _0x2da89d=_0x2546c9;this[_0x2da89d(0xa5a)]=BattleManager[_0x2da89d(0x278)];},Window_AutoBattleCancel[_0x2546c9(0x79f)][_0x2546c9(0x554)]=function(){const _0x14eb1d=_0x2546c9;if(!BattleManager[_0x14eb1d(0x278)])return;if(Input[_0x14eb1d(0x623)]('ok')||Input[_0x14eb1d(0x623)](_0x14eb1d(0x807))||TouchInput[_0x14eb1d(0x144)]()||TouchInput['isCancelled']()){if(_0x14eb1d(0x82c)==='DutNw')SoundManager[_0x14eb1d(0x3a8)](),BattleManager[_0x14eb1d(0x278)]=![],Input[_0x14eb1d(0x3b6)](),TouchInput['clear']();else return this[_0x14eb1d(0x1ff)]()[_0x14eb1d(0x4c1)][_0x14eb1d(0x1e0)](/<JS TARGETS>/i);}};function Window_EnemyName(){const _0x1d51ef=_0x2546c9;this[_0x1d51ef(0x4c3)](...arguments);}Window_EnemyName[_0x2546c9(0x79f)]=Object[_0x2546c9(0x315)](Window_StatusBase[_0x2546c9(0x79f)]),Window_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x150)]=Window_EnemyName,Window_EnemyName['prototype'][_0x2546c9(0x4c3)]=function(_0x2da765){const _0x5e0892=_0x2546c9;this['_enemyID']=_0x2da765,this[_0x5e0892(0x155)]='';const _0x30ccfe=new Rectangle(0x0,0x0,Graphics[_0x5e0892(0x8e7)],this[_0x5e0892(0x7e8)]()*0x4);Window_StatusBase[_0x5e0892(0x79f)][_0x5e0892(0x4c3)][_0x5e0892(0x40c)](this,_0x30ccfe),this[_0x5e0892(0x10d)](0x2),this[_0x5e0892(0x54d)]=0x0;},Window_EnemyName['prototype']['updatePadding']=function(){const _0x23ab42=_0x2546c9;this[_0x23ab42(0x7a1)]=0x0;},Window_EnemyName[_0x2546c9(0x79f)]['enemy']=function(){const _0x85d2e9=_0x2546c9;return $gameTroop[_0x85d2e9(0x930)]()[this['_enemyID']];},Window_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x9c)]=function(){const _0x37fffb=_0x2546c9;Window_StatusBase[_0x37fffb(0x79f)][_0x37fffb(0x9c)]['call'](this);if(this[_0x37fffb(0x951)]()&&this[_0x37fffb(0x951)]()[_0x37fffb(0x395)]()!==this['_text']){if('KsIKV'!==_0x37fffb(0x1c0)){if(_0x3190a5[_0x37fffb(0x4fe)]&&_0x75f8b8[_0x37fffb(0x99e)]!==_0x18a410)return _0x5eadf2[_0x37fffb(0x99e)];else{if(this[_0x37fffb(0x8e0)]()===_0x37fffb(0x60d))return![];else{return _0x11828a[_0x37fffb(0x79f)][_0x37fffb(0x7a9)][_0x37fffb(0x40c)](this);;}}}else this[_0x37fffb(0x155)]=this[_0x37fffb(0x951)]()[_0x37fffb(0x395)](),this['refresh']();}this['updateOpacity'](),this[_0x37fffb(0x92a)]();},Window_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x143)]=function(){const _0x4d479b=_0x2546c9;if(!this[_0x4d479b(0x951)]()){if(this[_0x4d479b(0x54d)]>0x0)this[_0x4d479b(0x54d)]-=0x10;}else{if(this[_0x4d479b(0x951)]()[_0x4d479b(0x4ca)]()){if(this[_0x4d479b(0x54d)]>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager[_0x4d479b(0x465)][_0x4d479b(0x62d)]&&SceneManager['_scene'][_0x4d479b(0x62d)][_0x4d479b(0x631)]&&SceneManager[_0x4d479b(0x465)]['_enemyWindow'][_0x4d479b(0x628)][_0x4d479b(0xa7e)](this[_0x4d479b(0x951)]())){if('LxGZB'==='LxGZB'){if(this['contentsOpacity']<0xff)this[_0x4d479b(0x54d)]+=0x10;}else this[_0x4d479b(0x432)]['show'](),this[_0x4d479b(0x62d)]['hide'](),this['_actorCommandWindow'][_0x4d479b(0x570)]();}else this[_0x4d479b(0x54d)]>0x0&&(this[_0x4d479b(0x54d)]-=0x10);}}},Window_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x92a)]=function(){const _0xec7273=_0x2546c9;if(!this[_0xec7273(0x951)]())return;SceneManager['isBattleFlipped']()?this['x']=Graphics[_0xec7273(0x8e7)]-this[_0xec7273(0x951)]()['battler']()[_0xec7273(0xa2f)]:this['x']=this[_0xec7273(0x951)]()[_0xec7273(0x2dc)]()['_baseX'];this['x']-=Math[_0xec7273(0x19b)](this[_0xec7273(0x9f9)]/0x2),this['y']=this[_0xec7273(0x951)]()[_0xec7273(0x2dc)]()['_baseY']-Math[_0xec7273(0x19b)](this[_0xec7273(0x7e8)]()*1.5);const _0x1ad5f6=VisuMZ[_0xec7273(0x895)][_0xec7273(0x4b7)][_0xec7273(0x862)];this['x']+=_0x1ad5f6[_0xec7273(0x386)]||0x0,this['y']+=_0x1ad5f6[_0xec7273(0x77)]||0x0;},Window_EnemyName[_0x2546c9(0x79f)][_0x2546c9(0x9e3)]=function(){const _0x43950c=_0x2546c9;Window_Base[_0x43950c(0x79f)][_0x43950c(0x9e3)][_0x43950c(0x40c)](this),this['contents']['fontSize']=VisuMZ[_0x43950c(0x895)]['Settings']['Enemy'][_0x43950c(0x530)];},Window_EnemyName[_0x2546c9(0x79f)]['refresh']=function(){const _0x16964b=_0x2546c9;Window_StatusBase[_0x16964b(0x79f)][_0x16964b(0x48c)][_0x16964b(0x40c)](this),this[_0x16964b(0x92e)][_0x16964b(0x3b6)]();if(!this['enemy']())return;this['drawEnemyName']();},Window_EnemyName[_0x2546c9(0x79f)]['drawEnemyName']=function(){const _0xa6d159=_0x2546c9;this['_text']=this['enemy']()[_0xa6d159(0x395)]();const _0x1f76da=this[_0xa6d159(0x234)](this[_0xa6d159(0x155)])['width'],_0x2faa50=Math[_0xa6d159(0x19b)]((this[_0xa6d159(0x651)]-_0x1f76da)/0x2);this['drawTextEx'](this[_0xa6d159(0x155)],_0x2faa50,0x0,_0x1f76da+0x8);},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x204)]=function(){const _0x2a2f1b=_0x2546c9;return VisuMZ[_0x2a2f1b(0x895)][_0x2a2f1b(0x4b7)][_0x2a2f1b(0x8a4)]['MaxLines'];},Window_BattleLog['prototype'][_0x2546c9(0x239)]=function(){const _0x3d8833=_0x2546c9;return VisuMZ[_0x3d8833(0x895)]['Settings'][_0x3d8833(0x8a4)][_0x3d8833(0xa91)];},Window_BattleLog['prototype'][_0x2546c9(0x9d)]=function(){const _0x3b659f=_0x2546c9;return VisuMZ[_0x3b659f(0x895)][_0x3b659f(0x4b7)][_0x3b659f(0x8a4)][_0x3b659f(0x18a)];},Window_BattleLog[_0x2546c9(0x79f)]['isFastForward']=function(){return![];},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x83)]=function(_0x1fc6db,_0x1f2b4d){const _0x2c0d44=_0x2546c9;this[_0x2c0d44(0x616)](_0x2c0d44(0x747)),BattleManager['invokeAction'](_0x1fc6db,_0x1f2b4d),this[_0x2c0d44(0x839)]();},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x747)]=function(){const _0x129e54=_0x2546c9;this[_0x129e54(0x839)]();},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x40b)]=function(_0x34b25c){const _0x1d40d9=_0x2546c9,_0x4724c6=Array['prototype'][_0x1d40d9(0x699)]['call'](arguments,0x1),_0x786280={'name':_0x34b25c,'params':_0x4724c6},_0x4291f4=this['_methods'][_0x1d40d9(0x1b0)](_0x384210=>_0x384210[_0x1d40d9(0x395)])[_0x1d40d9(0x402)](_0x1d40d9(0x747));if(_0x4291f4>=0x0){if(_0x1d40d9(0x95b)!==_0x1d40d9(0x95b))return 0x0;else this[_0x1d40d9(0x2ff)]['splice'](_0x4291f4,0x0,_0x786280);}else _0x1d40d9(0x811)!=='mKkzS'?this['_methods'][_0x1d40d9(0x40b)](_0x786280):this[_0x1d40d9(0x767)](_0x1d40d9(0x1c1));},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x616)]=function(_0x305393){const _0x575021=_0x2546c9,_0x3147c3=Array[_0x575021(0x79f)][_0x575021(0x699)][_0x575021(0x40c)](arguments,0x1);this[_0x575021(0x2ff)][_0x575021(0x616)]({'name':_0x305393,'params':_0x3147c3});},Window_BattleLog['prototype'][_0x2546c9(0xab7)]=function(){const _0x54a735=_0x2546c9;if(!$gameTemp[_0x54a735(0x68c)]())return;console[_0x54a735(0x37d)](this[_0x54a735(0x2ff)][_0x54a735(0x1b0)](_0x40ba58=>_0x40ba58['name'])['join']('\x0a'));},VisuMZ[_0x2546c9(0x895)]['Window_BattleLog_refresh']=Window_BattleLog[_0x2546c9(0x79f)]['refresh'],Window_BattleLog[_0x2546c9(0x79f)]['refresh']=function(){const _0x23ac4a=_0x2546c9;this[_0x23ac4a(0xa29)]=!![];},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x960)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x9c)],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x9c)]=function(){const _0x1c6324=_0x2546c9;VisuMZ['BattleCore']['Window_BattleLog_update'][_0x1c6324(0x40c)](this);if(this[_0x1c6324(0xa29)])this[_0x1c6324(0x8c1)]();},Window_BattleLog['prototype'][_0x2546c9(0x8c1)]=function(){const _0x39b4a3=_0x2546c9;this[_0x39b4a3(0xa29)]=![],VisuMZ[_0x39b4a3(0x895)][_0x39b4a3(0xf7)]['call'](this);},Window_BattleLog['prototype'][_0x2546c9(0x13b)]=function(_0x1a4703){const _0x20f0cc=_0x2546c9;let _0x5a2b4d=VisuMZ[_0x20f0cc(0x895)][_0x20f0cc(0x4b7)]['BattleLog'][_0x20f0cc(0x178)][_0x20f0cc(0x917)]()[_0x20f0cc(0xb19)](),_0x46a48b=this[_0x20f0cc(0x939)][_0x1a4703];if(_0x46a48b['match'](/<LEFT>/i))'uaTgw'===_0x20f0cc(0xa59)?_0x5a2b4d='left':_0x908d31['push'](this['opponentsUnit']()['trueRandomTarget']());else{if(_0x46a48b[_0x20f0cc(0x1e0)](/<CENTER>/i))_0x5a2b4d=_0x20f0cc(0x6d3);else{if(_0x46a48b[_0x20f0cc(0x1e0)](/<RIGHT>/i)){if('CLfvW'!==_0x20f0cc(0x216))return this[_0x20f0cc(0x735)](_0x4aacb6[0x0],_0x4367db[0x1],_0x467e96=>{const _0x1a5f92=_0x20f0cc;!_0x467e96[_0x1a5f92(0xa97)]()&&(_0x467e96[_0x1a5f92(0x2f9)](_0x1b818c[0x2],_0x7e11db[0x3]),_0x4b5eb5[_0x1a5f92(0x2f9)](_0x467e96));}),!![];else _0x5a2b4d='right';}}}_0x46a48b=_0x46a48b[_0x20f0cc(0x795)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x46a48b=_0x46a48b[_0x20f0cc(0x795)](/\\I\[0\]/gi,'');const _0xf2dfa2=this[_0x20f0cc(0x11d)](_0x1a4703);this[_0x20f0cc(0x92e)]['clearRect'](_0xf2dfa2['x'],_0xf2dfa2['y'],_0xf2dfa2[_0x20f0cc(0x9f9)],_0xf2dfa2[_0x20f0cc(0x3de)]);const _0x397c8f=this[_0x20f0cc(0x234)](_0x46a48b)[_0x20f0cc(0x9f9)];let _0x284671=_0xf2dfa2['x'];if(_0x5a2b4d===_0x20f0cc(0x6d3))_0x284671+=(_0xf2dfa2['width']-_0x397c8f)/0x2;else _0x5a2b4d===_0x20f0cc(0x9c8)&&(_0x284671+=_0xf2dfa2[_0x20f0cc(0x9f9)]-_0x397c8f);this[_0x20f0cc(0x9ec)](_0x46a48b,_0x284671,_0xf2dfa2['y'],_0x397c8f+0x8);},Window_BattleLog['prototype'][_0x2546c9(0x9d6)]=function(_0x1d2a46){const _0x3a63f6=_0x2546c9;this['_lines'][_0x3a63f6(0x40b)](_0x1d2a46),this['refresh'](),this[_0x3a63f6(0x839)]();},Window_BattleLog['prototype'][_0x2546c9(0x64e)]=function(){const _0x1335e4=_0x2546c9;let _0x4fbc32=![];switch(this['_waitMode']){case _0x1335e4(0x8d3):_0x4fbc32=this[_0x1335e4(0x5a6)]['isEffecting']();break;case'movement':_0x4fbc32=this['_spriteset']['isAnyoneMoving']();break;case'animation':_0x4fbc32=this[_0x1335e4(0x5a6)]['isAnimationPlaying']();break;case _0x1335e4(0x957):_0x4fbc32=this['_spriteset'][_0x1335e4(0x7d8)]();break;case _0x1335e4(0x2a9):_0x4fbc32=this[_0x1335e4(0x5a6)]['isAnyoneJumping']();break;case'opacity':_0x4fbc32=this[_0x1335e4(0x5a6)][_0x1335e4(0x9ad)]();break;}return!_0x4fbc32&&('WXwlF'!=='pYcrc'?this[_0x1335e4(0x66d)]='':_0x396fc9+=_0x1965db(_0x293631['$1'])/0x64),_0x4fbc32;},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xb28)]=function(){const _0x30ee59=_0x2546c9;this[_0x30ee59(0x58f)](_0x30ee59(0x7fb));},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x9ea)]=function(){const _0x564dc0=_0x2546c9;this[_0x564dc0(0x58f)](_0x564dc0(0x957));},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x209)]=function(){const _0xacae51=_0x2546c9;this[_0xacae51(0x58f)](_0xacae51(0x2a9));},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x100)]=function(){const _0x25629d=_0x2546c9;this['setWaitMode'](_0x25629d(0x3fc));},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x5ba)]=function(){const _0x5c9b89=_0x2546c9,_0x223eab=VisuMZ[_0x5c9b89(0x895)][_0x5c9b89(0x4b7)][_0x5c9b89(0x8a4)];if(!_0x223eab[_0x5c9b89(0x756)])return;this[_0x5c9b89(0x40b)]('addText',_0x223eab[_0x5c9b89(0x619)][_0x5c9b89(0xa3e)]($gameTroop['turnCount']())),this['push']('waitCount',_0x223eab[_0x5c9b89(0x8bf)]),this[_0x5c9b89(0x40b)](_0x5c9b89(0x3b6));},Window_BattleLog[_0x2546c9(0x79f)]['startAction']=function(_0x847e62,_0x363460,_0x47e645){const _0x4f2709=_0x2546c9;if(this[_0x4f2709(0xaf0)](_0x363460)){if(_0x4f2709(0x3a7)!==_0x4f2709(0x3a7))return this['_damagePopupArray'][_0x4f2709(0x3b9)]();else BattleManager['prepareCustomActionSequence']();}else this[_0x4f2709(0x20d)](_0x847e62,_0x363460,_0x47e645);},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xaf0)]=function(_0x24d020){const _0x37b44d=_0x2546c9;if(!SceneManager[_0x37b44d(0x671)]())return![];if(!_0x24d020)return![];if(!_0x24d020[_0x37b44d(0x1ff)]())return![];if(_0x24d020[_0x37b44d(0x1ff)]()[_0x37b44d(0x4c1)][_0x37b44d(0x1e0)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x37b44d(0x25d)](_0x24d020['item']())){if(_0x37b44d(0x883)===_0x37b44d(0x9e)){_0x3848ca[_0x37b44d(0x895)][_0x37b44d(0x8bb)]['call'](this);if(this[_0x37b44d(0x1ff)]()[_0x37b44d(0x4c1)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0x37b44d(0x4c1)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0xeb814[_0x37b44d(0x924)]=[]),_0x670d25[_0x37b44d(0x25d)](this[_0x37b44d(0x1ff)]())&&(_0x3634a9[_0x37b44d(0x924)]=[]);}else return!![];}return![];},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x20d)]=function(_0x35ef6d,_0x4d1461,_0x27fbea){const _0x36c755=_0x2546c9,_0x499f5e=_0x4d1461['item']();this[_0x36c755(0x55f)](_0x35ef6d,_0x4d1461,_0x27fbea),this[_0x36c755(0xa8c)](_0x35ef6d,_0x4d1461,_0x27fbea),this[_0x36c755(0x1de)](_0x35ef6d,_0x4d1461,_0x27fbea);},Window_BattleLog['prototype'][_0x2546c9(0x3db)]=function(_0x5163db,_0x25ae47){const _0x3c8a7c=_0x2546c9,_0xdf0ef6=VisuMZ[_0x3c8a7c(0x895)]['Settings']['BattleLog'];_0xdf0ef6[_0x3c8a7c(0xa23)]&&this[_0x3c8a7c(0x40b)]('addText',_0x3c8a7c(0xa08)['format'](DataManager[_0x3c8a7c(0x509)](_0x25ae47)));if(DataManager['isSkill'](_0x25ae47)){if(_0x3c8a7c(0x264)!==_0x3c8a7c(0x264))this['_mainSprite'][_0x3c8a7c(0x2c4)]=_0x49b6b5['loadEnemy'](_0x378066),this[_0x3c8a7c(0x53a)]['bitmap'][_0x3c8a7c(0x67)](this[_0x3c8a7c(0x259)][_0x3c8a7c(0x768)](this));else{if(_0xdf0ef6[_0x3c8a7c(0xa64)])this[_0x3c8a7c(0x29d)](_0x25ae47[_0x3c8a7c(0x6b0)],_0x5163db,_0x25ae47);if(_0xdf0ef6[_0x3c8a7c(0x153)])this[_0x3c8a7c(0x29d)](_0x25ae47[_0x3c8a7c(0xaf7)],_0x5163db,_0x25ae47);}}else{if(_0xdf0ef6[_0x3c8a7c(0x633)])this[_0x3c8a7c(0x29d)](TextManager[_0x3c8a7c(0x446)],_0x5163db,_0x25ae47);}},Window_BattleLog['prototype'][_0x2546c9(0x55f)]=function(_0x5ac480,_0xdacd3d,_0x39bfc8){const _0x3529bb=_0x2546c9,_0x50aaa8=_0xdacd3d[_0x3529bb(0x1ff)]();this[_0x3529bb(0x3db)](_0x5ac480,_0x50aaa8),this[_0x3529bb(0x40b)](_0x3529bb(0x380),_0x5ac480,_0x39bfc8,!![]),this[_0x3529bb(0x40b)](_0x3529bb(0x260),_0x5ac480,_0xdacd3d),this[_0x3529bb(0x40b)](_0x3529bb(0x7b3)),this['push'](_0x3529bb(0xabf),_0x5ac480,_0xdacd3d),this[_0x3529bb(0x40b)](_0x3529bb(0xb28));},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xa8c)]=function(_0x283b97,_0x251c09,_0x1b4605){const _0x1fd9e7=_0x2546c9;if(this[_0x1fd9e7(0x64b)](_0x251c09))this['autoMeleeSingleTargetActionSet'](_0x283b97,_0x251c09,_0x1b4605);else{if(this[_0x1fd9e7(0x60a)](_0x251c09))this[_0x1fd9e7(0x56f)](_0x283b97,_0x251c09,_0x1b4605);else{if(_0x251c09[_0x1fd9e7(0x9ff)]())this[_0x1fd9e7(0xaa3)](_0x283b97,_0x251c09,_0x1b4605);else{if(_0x1fd9e7(0x904)!==_0x1fd9e7(0x904)){const _0x19202c=_0x36bbba['BattleCore'][_0x1fd9e7(0x4b7)][_0x1fd9e7(0x8a4)];_0x19202c[_0x1fd9e7(0xa23)]&&this[_0x1fd9e7(0x40b)](_0x1fd9e7(0x9d6),_0x1fd9e7(0xa08)[_0x1fd9e7(0xa3e)](_0x3c9183[_0x1fd9e7(0x509)](_0x5c7c8b)));if(_0x39c64c[_0x1fd9e7(0x89c)](_0x4aabe7)){if(_0x19202c[_0x1fd9e7(0xa64)])this[_0x1fd9e7(0x29d)](_0x4cf6de['message1'],_0x4514db,_0x356d47);if(_0x19202c[_0x1fd9e7(0x153)])this[_0x1fd9e7(0x29d)](_0x27dfd0[_0x1fd9e7(0xaf7)],_0x3c14a,_0x4e56dd);}else{if(_0x19202c[_0x1fd9e7(0x633)])this[_0x1fd9e7(0x29d)](_0x35de6c[_0x1fd9e7(0x446)],_0x52582e,_0x1e2453);}}else this[_0x1fd9e7(0x79d)](_0x283b97,_0x251c09,_0x1b4605);}}}},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x64b)]=function(_0x529ef0){const _0x6f2a=_0x2546c9;if(!_0x529ef0[_0x6f2a(0x7a8)]())return![];if(!_0x529ef0['isForOne']())return![];if(!_0x529ef0[_0x6f2a(0x5bd)]())return![];return VisuMZ['BattleCore']['Settings'][_0x6f2a(0x950)]['AutoMeleeSolo'];},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x9c2)]=function(_0x2e6555,_0xea6fd2,_0x506c1b){const _0x569e61=_0x2546c9,_0x30a4d5=_0x2e6555[_0x569e61(0x44f)]()['type']<0x2,_0x4b1bdb=0x14,_0x593350=0x30;if(_0x30a4d5){if(_0x569e61(0x8ba)!==_0x569e61(0x1d5))this[_0x569e61(0x40b)](_0x569e61(0x230),[_0x2e6555],_0x593350,_0x4b1bdb),this[_0x569e61(0x40b)](_0x569e61(0xa03),_0x2e6555,_0x506c1b,_0x569e61(0x996),_0x4b1bdb,!![],_0x569e61(0x695),!![]),this['push'](_0x569e61(0x5a8),[_0x2e6555],'walk'),this[_0x569e61(0x40b)](_0x569e61(0x7b3));else{const _0x1fcbbd=_0x45864a[_0x569e61(0x895)][_0x569e61(0x4b7)][_0x569e61(0x8c9)],_0x3d723e=this[_0x569e61(0x97d)](_0x344b42),_0x50c467=this[_0x569e61(0x2d8)](_0x213c1),_0x2cc81a=_0x33102c[_0x569e61(0x19b)](_0x50c467['x']+(_0x50c467['width']-0x80)/0x2),_0x5da17d=this[_0x569e61(0x2ce)](_0x50c467);let _0x2068aa=_0x2cc81a-_0x4a3c0b[_0x569e61(0x7d)]/0x2-0x4,_0x19af96=_0x5da17d+_0xfc9719['iconHeight']/0x2;_0x2068aa-_0x3e9fff[_0x569e61(0x7d)]/0x2<_0x50c467['x']&&(_0x2068aa=_0x2cc81a+_0x53a6a8[_0x569e61(0x7d)]/0x2-0x4,_0x19af96=_0x5da17d-_0x2666e5[_0x569e61(0xa5c)]/0x2);const _0xd568a9=_0x2cc81a,_0x462f0f=this[_0x569e61(0x76d)](_0x50c467);this['placeTimeGauge'](_0x3d723e,_0x2cc81a+(_0x1fcbbd[_0x569e61(0xe4)]||0x0),_0x5da17d+(_0x1fcbbd[_0x569e61(0x476)]||0x0)),this[_0x569e61(0x786)](_0x3d723e,_0x2cc81a+(_0x1fcbbd[_0x569e61(0x386)]||0x0),_0x5da17d+(_0x1fcbbd[_0x569e61(0x77)]||0x0)),this[_0x569e61(0x948)](_0x3d723e,_0x2068aa+(_0x1fcbbd[_0x569e61(0xa4a)]||0x0),_0x19af96+(_0x1fcbbd[_0x569e61(0x979)]||0x0)),this[_0x569e61(0x81a)](_0x3d723e,'hp',_0xd568a9+(_0x1fcbbd[_0x569e61(0xaca)]||0x0),_0x462f0f+(_0x1fcbbd[_0x569e61(0x7f3)]||0x0)),this[_0x569e61(0x81a)](_0x3d723e,'mp',_0xd568a9+(_0x1fcbbd[_0x569e61(0x5f4)]||0x0),_0x462f0f+this[_0x569e61(0x9f7)]()+(_0x1fcbbd[_0x569e61(0x752)]||0x0)),_0x579dfb[_0x569e61(0x7a0)]&&this[_0x569e61(0x81a)](_0x3d723e,'tp',_0xd568a9+(_0x1fcbbd[_0x569e61(0x344)]||0x0),_0x462f0f+this[_0x569e61(0x9f7)]()*0x2+(_0x1fcbbd[_0x569e61(0x86e)]||0x0));}}let _0x28bf26=_0xea6fd2[_0x569e61(0xbc)]()?this[_0x569e61(0x29e)](_0x2e6555):0x1;for(let _0x41fa80=0x0;_0x41fa80<_0x28bf26;_0x41fa80++){_0xea6fd2[_0x569e61(0xbc)]()&&_0x2e6555[_0x569e61(0x55e)]()&&this[_0x569e61(0x40b)](_0x569e61(0xb13),_0x2e6555,_0x41fa80);if(_0xea6fd2['item']()[_0x569e61(0x15d)]<0x0)this[_0x569e61(0xaa3)](_0x2e6555,_0xea6fd2,_0x506c1b);else{if(_0x569e61(0x938)!==_0x569e61(0x938)){const _0x1895c4=_0xfc7795(_0xe8b19e['$1'])[_0x569e61(0xb19)](),_0x122eea=_0x4213a2(_0x2f3446['$2']);_0x406a52[_0x1895c4]=_0x122eea,_0x39d511+=_0x122eea;}else this[_0x569e61(0x79d)](_0x2e6555,_0xea6fd2,_0x506c1b);}}if(_0xea6fd2[_0x569e61(0xbc)]()&&_0x2e6555[_0x569e61(0x55e)]()){if('FOrQK'===_0x569e61(0x1d6))this[_0x569e61(0x40b)](_0x569e61(0x9d5),_0x2e6555);else{if(!_0xd95bb9)return 0x0;let _0x26d939=0x0;const _0x491803=_0x427878[_0x569e61(0x4c1)];return _0x491803[_0x569e61(0x1e0)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x26d939+=_0x1d0f7f(_0x33c603['$1'])),_0x491803[_0x569e61(0x1e0)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x26d939+=_0x44de6d(_0x4ac427['$2'])),_0x26d939;}}this[_0x569e61(0x40b)](_0x569e61(0x380),_0x2e6555,_0x506c1b,![]);if(_0x30a4d5){const _0xc0e794=_0x2e6555[_0x569e61(0x2dc)]();this[_0x569e61(0x40b)](_0x569e61(0x230),[_0x2e6555],_0x593350,_0x4b1bdb),this[_0x569e61(0x40b)]('performMoveToPoint',_0x2e6555,_0xc0e794[_0x569e61(0x493)],_0xc0e794[_0x569e61(0x450)],_0x4b1bdb,![],_0x569e61(0x695)),this[_0x569e61(0x40b)](_0x569e61(0x5a8),[_0x2e6555],_0x569e61(0x903)),this[_0x569e61(0x40b)](_0x569e61(0x7b3)),this['push'](_0x569e61(0x5a8),[_0x2e6555],_0x569e61(0x48a));}},Window_BattleLog[_0x2546c9(0x79f)]['isMeleeMultiTargetAction']=function(_0x4abfd6){const _0x5e6206=_0x2546c9;if(!_0x4abfd6[_0x5e6206(0x7a8)]())return![];if(!_0x4abfd6[_0x5e6206(0x3e8)]())return![];if(!_0x4abfd6['isForOpponent']())return![];return VisuMZ[_0x5e6206(0x895)][_0x5e6206(0x4b7)][_0x5e6206(0x950)]['AutoMeleeAoE'];},Window_BattleLog[_0x2546c9(0x79f)]['autoMeleeMultiTargetActionSet']=function(_0x3b5669,_0x4d12a0,_0x76e828){const _0x5e06ba=_0x2546c9,_0x3674d1=_0x3b5669[_0x5e06ba(0x44f)]()[_0x5e06ba(0x59f)]<0x2,_0x33d656=0x14,_0x245423=0x30;_0x3674d1&&(this[_0x5e06ba(0x40b)](_0x5e06ba(0x230),[_0x3b5669],_0x245423,_0x33d656),this['push'](_0x5e06ba(0xa03),_0x3b5669,_0x76e828,_0x5e06ba(0x28c),_0x33d656,!![],_0x5e06ba(0x695),!![]),this[_0x5e06ba(0x40b)]('requestMotion',[_0x3b5669],_0x5e06ba(0x48a)),this['push'](_0x5e06ba(0x7b3)));let _0x521acb=_0x4d12a0[_0x5e06ba(0xbc)]()?this[_0x5e06ba(0x29e)](_0x3b5669):0x1;for(let _0x4479f3=0x0;_0x4479f3<_0x521acb;_0x4479f3++){_0x4d12a0[_0x5e06ba(0xbc)]()&&_0x3b5669[_0x5e06ba(0x55e)]()&&this['push'](_0x5e06ba(0xb13),_0x3b5669,_0x4479f3),this['wholeActionSet'](_0x3b5669,_0x4d12a0,_0x76e828);}_0x4d12a0[_0x5e06ba(0xbc)]()&&_0x3b5669['isActor']()&&this['push'](_0x5e06ba(0x9d5),_0x3b5669);this[_0x5e06ba(0x40b)]('applyImmortal',_0x3b5669,_0x76e828,![]);if(_0x3674d1){const _0xf6c691=_0x3b5669[_0x5e06ba(0x2dc)]();this[_0x5e06ba(0x40b)](_0x5e06ba(0x230),[_0x3b5669],_0x245423,_0x33d656),this['push'](_0x5e06ba(0x4f4),_0x3b5669,_0xf6c691['_homeX'],_0xf6c691[_0x5e06ba(0x450)],_0x33d656,![],_0x5e06ba(0x695)),this['push'](_0x5e06ba(0x5a8),[_0x3b5669],_0x5e06ba(0x903)),this[_0x5e06ba(0x40b)](_0x5e06ba(0x7b3)),this[_0x5e06ba(0x40b)](_0x5e06ba(0x5a8),[_0x3b5669],_0x5e06ba(0x48a));}},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xaa3)]=function(_0x31ca61,_0x369752,_0xdb7144){const _0x3d65cd=_0x2546c9,_0x440bb9=_0x369752['item']();for(const _0x3651f2 of _0xdb7144){if(!_0x3651f2)continue;this[_0x3d65cd(0x40b)](_0x3d65cd(0x6e6),_0x31ca61,_0x369752),this['push']('waitCount',Sprite_Battler['_motionSpeed']),this['push'](_0x3d65cd(0x74a),_0x31ca61,[_0x3651f2],_0x440bb9[_0x3d65cd(0x15d)]),this[_0x3d65cd(0x40b)](_0x3d65cd(0x40e),0x18),this[_0x3d65cd(0x40b)](_0x3d65cd(0x83),_0x31ca61,_0x3651f2);}},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x79d)]=function(_0x2d1e3e,_0x3f335c,_0x83ef4){const _0xbbeedc=_0x2546c9,_0x5ea92e=_0x3f335c[_0xbbeedc(0x1ff)]();this['push']('performAction',_0x2d1e3e,_0x3f335c),this[_0xbbeedc(0x40b)]('waitCount',Sprite_Battler[_0xbbeedc(0x436)]),this[_0xbbeedc(0x40b)](_0xbbeedc(0x74a),_0x2d1e3e,_0x83ef4['clone'](),_0x5ea92e[_0xbbeedc(0x15d)]),this[_0xbbeedc(0x40b)](_0xbbeedc(0xb28));for(const _0x4fa70 of _0x83ef4){if(!_0x4fa70)continue;this[_0xbbeedc(0x40b)](_0xbbeedc(0x83),_0x2d1e3e,_0x4fa70);}},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x1de)]=function(_0x21b960,_0x12ed4c,_0xe06ebf){const _0x2798cc=_0x2546c9,_0x41a6c0=_0x12ed4c[_0x2798cc(0x1ff)]();this['push'](_0x2798cc(0x380),_0x21b960,_0xe06ebf,![]),this['push']('waitForNewLine'),this[_0x2798cc(0x40b)](_0x2798cc(0x7d3)),this[_0x2798cc(0x40b)](_0x2798cc(0x3b6)),this[_0x2798cc(0x40b)](_0x2798cc(0x896),_0x21b960),this['push'](_0x2798cc(0x7b3));},Window_BattleLog[_0x2546c9(0x79f)]['endAction']=function(_0xf7bcf3){},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x6e2)]=Window_BattleLog[_0x2546c9(0x79f)]['displayCurrentState'],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x9ab)]=function(_0x528caa){const _0x48995c=_0x2546c9;if(!VisuMZ['BattleCore'][_0x48995c(0x4b7)]['BattleLog'][_0x48995c(0x318)])return;VisuMZ[_0x48995c(0x895)]['Window_BattleLog_displayCurrentState'][_0x48995c(0x40c)](this,_0x528caa);},Window_BattleLog['prototype'][_0x2546c9(0x5c3)]=function(_0x49f903){const _0x424da4=_0x2546c9;this[_0x424da4(0x40b)](_0x424da4(0x5cc),_0x49f903);VisuMZ[_0x424da4(0x895)]['Settings'][_0x424da4(0x950)][_0x424da4(0x79)]&&this[_0x424da4(0x40b)](_0x424da4(0x74a),_0x49f903,[BattleManager[_0x424da4(0x41d)]],-0x1);if(!VisuMZ[_0x424da4(0x895)][_0x424da4(0x4b7)][_0x424da4(0x8a4)][_0x424da4(0x688)])return;this[_0x424da4(0x40b)]('addText',TextManager[_0x424da4(0xa9b)][_0x424da4(0xa3e)](_0x49f903[_0x424da4(0x395)]()));},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x9ae)]=function(_0x224a41){const _0x94a6f2=_0x2546c9;this[_0x94a6f2(0x40b)](_0x94a6f2(0x22e),_0x224a41);if(!VisuMZ[_0x94a6f2(0x895)]['Settings'][_0x94a6f2(0x8a4)][_0x94a6f2(0x292)])return;this[_0x94a6f2(0x40b)]('addText',TextManager[_0x94a6f2(0x1f0)]['format'](_0x224a41['name']()));},Window_BattleLog[_0x2546c9(0x79f)]['displayReflectionPlayBack']=function(_0x356bd3,_0x9eaea4){const _0x7a5bee=_0x2546c9;if(VisuMZ[_0x7a5bee(0x895)][_0x7a5bee(0x4b7)][_0x7a5bee(0x950)][_0x7a5bee(0x3a0)]){const _0x1606dc=_0x9eaea4[_0x7a5bee(0x1ff)]();this['push'](_0x7a5bee(0x74a),_0x356bd3,[_0x356bd3],_0x1606dc['animationId']);}},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x353)]=function(_0x5d038c,_0x4f0cef){const _0x2a5640=_0x2546c9;this[_0x2a5640(0x40b)](_0x2a5640(0x1c3),_0x5d038c,_0x4f0cef);if(!VisuMZ[_0x2a5640(0x895)][_0x2a5640(0x4b7)]['BattleLog'][_0x2a5640(0x6c)])return;const _0x231dca=_0x5d038c[_0x2a5640(0x395)](),_0x522337=TextManager[_0x2a5640(0x8aa)][_0x2a5640(0xa3e)](_0x231dca,_0x4f0cef['name']());this[_0x2a5640(0x40b)]('addText',_0x522337);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x954)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x8cf)],Window_BattleLog['prototype'][_0x2546c9(0x8cf)]=function(_0x8b1d3f,_0x93b34e){const _0x3b4d32=_0x2546c9;VisuMZ['BattleCore']['Window_BattleLog_displayActionResults'][_0x3b4d32(0x40c)](this,_0x8b1d3f,_0x93b34e);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x9c9)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x2eb)],Window_BattleLog[_0x2546c9(0x79f)]['displayFailure']=function(_0x529c77){const _0x49e633=_0x2546c9;if(!VisuMZ[_0x49e633(0x895)][_0x49e633(0x4b7)][_0x49e633(0x8a4)][_0x49e633(0xae7)])return;VisuMZ[_0x49e633(0x895)][_0x49e633(0x9c9)][_0x49e633(0x40c)](this,_0x529c77);},VisuMZ[_0x2546c9(0x895)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x606)],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x606)]=function(_0xa0d79c){const _0x181163=_0x2546c9;if(!VisuMZ[_0x181163(0x895)][_0x181163(0x4b7)]['BattleLog'][_0x181163(0x685)])return;VisuMZ[_0x181163(0x895)][_0x181163(0x27c)][_0x181163(0x40c)](this,_0xa0d79c);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x474)]=Window_BattleLog[_0x2546c9(0x79f)]['displayMiss'],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xa6c)]=function(_0x5d6f4c){const _0x12af9d=_0x2546c9;!VisuMZ[_0x12af9d(0x895)][_0x12af9d(0x4b7)][_0x12af9d(0x8a4)]['ShowMissEvasion']?this[_0x12af9d(0x40b)](_0x12af9d(0x219),_0x5d6f4c):VisuMZ[_0x12af9d(0x895)][_0x12af9d(0x474)]['call'](this,_0x5d6f4c);},VisuMZ['BattleCore'][_0x2546c9(0x33b)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x612)],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x612)]=function(_0x99801){const _0x2e24f4=_0x2546c9;if(!VisuMZ[_0x2e24f4(0x895)][_0x2e24f4(0x4b7)]['BattleLog'][_0x2e24f4(0x9cc)]){if(_0x99801['result']()[_0x2e24f4(0x61a)]){if('EumyZ'!==_0x2e24f4(0x1e5)){const _0x1d029a=_0x40501a['x']+_0x31b963['floor']((_0x9a3c47[_0x2e24f4(0x9f9)]-_0x270936)/0x2);this[_0x2e24f4(0x9ec)](_0x24a6fc,_0x1d029a,_0x44bb34['y'],_0x3b1bb8);}else this[_0x2e24f4(0x40b)]('performEvasion',_0x99801);}else this[_0x2e24f4(0x40b)](_0x2e24f4(0x8fe),_0x99801);}else VisuMZ[_0x2e24f4(0x895)][_0x2e24f4(0x33b)][_0x2e24f4(0x40c)](this,_0x99801);},Window_BattleLog[_0x2546c9(0x79f)]['displayHpDamage']=function(_0x54a974){const _0x18403b=_0x2546c9;if(_0x54a974[_0x18403b(0x51b)]()[_0x18403b(0xabb)]){if(_0x18403b(0xc1)===_0x18403b(0x4a2))return _0x44460b;else _0x54a974['result']()['hpDamage']>0x0&&!_0x54a974[_0x18403b(0x51b)]()['drain']&&this[_0x18403b(0x40b)](_0x18403b(0x5bc),_0x54a974),_0x54a974[_0x18403b(0x51b)]()['hpDamage']<0x0&&this[_0x18403b(0x40b)](_0x18403b(0xc0),_0x54a974),VisuMZ[_0x18403b(0x895)][_0x18403b(0x4b7)]['BattleLog'][_0x18403b(0x91a)]&&this[_0x18403b(0x40b)](_0x18403b(0x9d6),this[_0x18403b(0x5fb)](_0x54a974));}},VisuMZ['BattleCore'][_0x2546c9(0x38e)]=Window_BattleLog['prototype'][_0x2546c9(0x99b)],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x99b)]=function(_0x2e9845){const _0x5275af=_0x2546c9;if(!VisuMZ['BattleCore'][_0x5275af(0x4b7)][_0x5275af(0x8a4)][_0x5275af(0x41f)])return;VisuMZ[_0x5275af(0x895)][_0x5275af(0x38e)][_0x5275af(0x40c)](this,_0x2e9845);},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8a6)]=Window_BattleLog[_0x2546c9(0x79f)]['displayTpDamage'],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x68)]=function(_0x408133){const _0xe8bd82=_0x2546c9;if(!VisuMZ[_0xe8bd82(0x895)]['Settings'][_0xe8bd82(0x8a4)][_0xe8bd82(0x529)])return;VisuMZ[_0xe8bd82(0x895)][_0xe8bd82(0x8a6)][_0xe8bd82(0x40c)](this,_0x408133);},Window_BattleLog[_0x2546c9(0x79f)]['displayAffectedStatus']=function(_0x51afbe){const _0xb0975b=_0x2546c9;if(_0x51afbe[_0xb0975b(0x51b)]()[_0xb0975b(0x3d2)]()){if('FQADf'!==_0xb0975b(0x24e))this[_0xb0975b(0x40b)](_0xb0975b(0x77e)),this[_0xb0975b(0xa1b)](_0x51afbe),this['displayChangedBuffs'](_0x51afbe),this[_0xb0975b(0x40b)](_0xb0975b(0x310));else{const _0x1cfda3=_0x14ed44[_0xb0975b(0x785)](_0x73f82e);_0x1cfda3[_0xb0975b(0x235)]=![],_0x1cfda3['evaded']=![],_0x1cfda3[_0xb0975b(0x622)]=0x0,this['_damagePopupArray']['push'](_0x1cfda3);}}},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x1ba)]=function(_0x59c724){const _0x48d527=_0x2546c9,_0x11b038=_0x59c724['result'](),_0x3423f3=_0x11b038[_0x48d527(0x58a)]();for(const _0x473349 of _0x3423f3){const _0x491d2a=_0x59c724[_0x48d527(0x55e)]()?_0x473349['message1']:_0x473349['message2'];_0x491d2a&&VisuMZ['BattleCore'][_0x48d527(0x4b7)][_0x48d527(0x8a4)][_0x48d527(0x905)]&&(this['push'](_0x48d527(0xcd)),this[_0x48d527(0x40b)](_0x48d527(0xb4b)),this[_0x48d527(0x40b)]('pushBaseLine'),this[_0x48d527(0x40b)]('addText',_0x491d2a['format'](_0x59c724[_0x48d527(0x395)]())),this['push'](_0x48d527(0x532))),_0x473349['id']===_0x59c724[_0x48d527(0x91)]()&&this[_0x48d527(0x40b)](_0x48d527(0x5ff),_0x59c724);}},Window_BattleLog['prototype'][_0x2546c9(0xcd)]=function(){},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x1bf)]=function(_0x190f3b){const _0x125f2b=_0x2546c9;if(!VisuMZ[_0x125f2b(0x895)][_0x125f2b(0x4b7)][_0x125f2b(0x8a4)]['ShowRemovedState'])return;const _0x284bef=_0x190f3b['result'](),_0x216d19=_0x284bef[_0x125f2b(0x560)]();for(const _0x5a4004 of _0x216d19){_0x125f2b(0x5ca)===_0x125f2b(0x5ca)?_0x5a4004[_0x125f2b(0x4b3)]&&(this['push']('fnordRemovedStates'),this[_0x125f2b(0x40b)]('popBaseLine'),this[_0x125f2b(0x40b)](_0x125f2b(0x77e)),this[_0x125f2b(0x40b)](_0x125f2b(0x9d6),_0x5a4004[_0x125f2b(0x4b3)]['format'](_0x190f3b[_0x125f2b(0x395)]())),this[_0x125f2b(0x40b)](_0x125f2b(0x532))):this[_0x125f2b(0x66d)]='';}},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x48f)]=function(){},Window_BattleLog['prototype'][_0x2546c9(0xb48)]=function(_0x311d7b){const _0xa929=_0x2546c9,_0x2dc47f=VisuMZ[_0xa929(0x895)][_0xa929(0x4b7)]['BattleLog'],_0x366e4f=_0x311d7b[_0xa929(0x51b)]();if(_0x2dc47f[_0xa929(0x71c)])this['displayBuffs'](_0x311d7b,_0x366e4f['addedBuffs'],TextManager[_0xa929(0x67c)]);if(_0x2dc47f['ShowAddedDebuff'])this[_0xa929(0x776)](_0x311d7b,_0x366e4f['addedDebuffs'],TextManager[_0xa929(0x4f2)]);if(_0x2dc47f['ShowRemovedBuff'])this[_0xa929(0x776)](_0x311d7b,_0x366e4f[_0xa929(0x2a4)],TextManager['buffRemove']);},Window_BattleLog[_0x2546c9(0x79f)]['displayBuffs']=function(_0x10e3e2,_0x4e486f,_0x5f4d0d){const _0x2d77ea=_0x2546c9;for(const _0x406040 of _0x4e486f){const _0xb38b0a=_0x5f4d0d[_0x2d77ea(0xa3e)](_0x10e3e2[_0x2d77ea(0x395)](),TextManager['param'](_0x406040));this[_0x2d77ea(0x40b)](_0x2d77ea(0xb4b)),this[_0x2d77ea(0x40b)](_0x2d77ea(0x77e)),this['push']('addText',_0xb38b0a),this[_0x2d77ea(0x40b)](_0x2d77ea(0x532));}},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8f1)]=Window_BattleLog['prototype'][_0x2546c9(0x3b6)],Window_BattleLog['prototype']['clear']=function(){const _0x251c8f=_0x2546c9;VisuMZ[_0x251c8f(0x895)][_0x251c8f(0x8f1)]['call'](this),this[_0x251c8f(0x839)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x4d4)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x77e)],Window_BattleLog['prototype'][_0x2546c9(0x77e)]=function(){const _0x77791d=_0x2546c9;VisuMZ[_0x77791d(0x895)][_0x77791d(0x4d4)][_0x77791d(0x40c)](this),this[_0x77791d(0x839)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x9f)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xb4b)],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xb4b)]=function(){const _0x59d1a0=_0x2546c9;VisuMZ[_0x59d1a0(0x895)][_0x59d1a0(0x9f)][_0x59d1a0(0x40c)](this),this[_0x59d1a0(0x8c1)](),this['callNextMethod']();},VisuMZ[_0x2546c9(0x895)]['Window_BattleLog_popupDamage']=Window_BattleLog['prototype']['popupDamage'],Window_BattleLog['prototype'][_0x2546c9(0xaac)]=function(_0x330658){const _0x45dafe=_0x2546c9;VisuMZ[_0x45dafe(0x895)][_0x45dafe(0x692)][_0x45dafe(0x40c)](this,_0x330658),this[_0x45dafe(0x839)]();},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x310)]=function(){const _0x844804=_0x2546c9;let _0x50bfa6=0x0;if(this['_baseLineStack']['length']>0x0){if(_0x844804(0x387)!=='IMQOm')_0x50bfa6=this[_0x844804(0x3ab)][this['_baseLineStack']['length']-0x1];else{if(this[_0x844804(0x817)][_0x844804(0x4ce)]>0x0){const _0x3a4aa0=this[_0x844804(0x817)][_0x844804(0x3b9)](),_0x4beb2c=_0x3a4aa0[0x0];return _0x4beb2c[_0x844804(0x829)]=_0x4beb2c[_0x844804(0x829)]||[],_0x4beb2c[_0x844804(0x829)][0x0]=_0x3a4aa0[0x1],_0x4beb2c;}else return this[_0x844804(0x52c)]['shift']();}}this[_0x844804(0x939)]['length']>_0x50bfa6?this[_0x844804(0x532)]():this[_0x844804(0x839)]();},VisuMZ[_0x2546c9(0x895)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x260)],Window_BattleLog[_0x2546c9(0x79f)]['performActionStart']=function(_0x36dd22,_0x372c80){const _0x524bba=_0x2546c9;VisuMZ[_0x524bba(0x895)][_0x524bba(0x7f1)][_0x524bba(0x40c)](this,_0x36dd22,_0x372c80),this[_0x524bba(0x839)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0xa98)]=Window_BattleLog['prototype'][_0x2546c9(0x6e6)],Window_BattleLog[_0x2546c9(0x79f)]['performAction']=function(_0x3f5333,_0x43bac5){const _0x3de1a3=_0x2546c9;VisuMZ[_0x3de1a3(0x895)]['Window_BattleLog_performAction']['call'](this,_0x3f5333,_0x43bac5),this[_0x3de1a3(0x839)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x504)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x896)],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x896)]=function(_0x5befcf){const _0x38bec9=_0x2546c9;VisuMZ[_0x38bec9(0x895)][_0x38bec9(0x504)][_0x38bec9(0x40c)](this,_0x5befcf);for(const _0x26960b of BattleManager['allBattleMembers']()){if(!_0x26960b)continue;if(_0x26960b['isDead']())continue;_0x26960b[_0x38bec9(0x519)]();}this[_0x38bec9(0x839)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x561)]=Window_BattleLog['prototype']['performDamage'],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x5bc)]=function(_0x42bb32){const _0x43abf0=_0x2546c9;VisuMZ[_0x43abf0(0x895)][_0x43abf0(0x561)][_0x43abf0(0x40c)](this,_0x42bb32),this[_0x43abf0(0x839)]();},VisuMZ['BattleCore']['Window_BattleLog_performMiss']=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x219)],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x219)]=function(_0x1e121e){const _0x3ba367=_0x2546c9;VisuMZ[_0x3ba367(0x895)][_0x3ba367(0x37c)]['call'](this,_0x1e121e),this[_0x3ba367(0x839)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x66c)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xc0)],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xc0)]=function(_0x448b50){const _0x1c4c9d=_0x2546c9;VisuMZ[_0x1c4c9d(0x895)]['Window_BattleLog_performRecovery'][_0x1c4c9d(0x40c)](this,_0x448b50),this[_0x1c4c9d(0x839)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x7e9)]=Window_BattleLog['prototype'][_0x2546c9(0xaec)],Window_BattleLog[_0x2546c9(0x79f)]['performEvasion']=function(_0x1d1faf){const _0x53bc84=_0x2546c9;VisuMZ[_0x53bc84(0x895)][_0x53bc84(0x7e9)][_0x53bc84(0x40c)](this,_0x1d1faf),this[_0x53bc84(0x839)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8df)]=Window_BattleLog['prototype']['performMagicEvasion'],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x8fe)]=function(_0x1995bb){const _0x53cf0d=_0x2546c9;VisuMZ[_0x53cf0d(0x895)][_0x53cf0d(0x8df)][_0x53cf0d(0x40c)](this,_0x1995bb),this[_0x53cf0d(0x839)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x630)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x5cc)],Window_BattleLog[_0x2546c9(0x79f)]['performCounter']=function(_0x5e7b7a){const _0x3c7828=_0x2546c9;VisuMZ['BattleCore'][_0x3c7828(0x630)]['call'](this,_0x5e7b7a),this[_0x3c7828(0x839)]();},VisuMZ['BattleCore'][_0x2546c9(0xab9)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x22e)],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x22e)]=function(_0x283de6){const _0x670edd=_0x2546c9;VisuMZ[_0x670edd(0x895)][_0x670edd(0xab9)][_0x670edd(0x40c)](this,_0x283de6),this[_0x670edd(0x839)]();},VisuMZ[_0x2546c9(0x895)][_0x2546c9(0x8e1)]=Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x1c3)],Window_BattleLog[_0x2546c9(0x79f)]['performSubstitute']=function(_0x4faad8,_0x4e6ff5){const _0x4e0a6d=_0x2546c9;VisuMZ['BattleCore'][_0x4e0a6d(0x8e1)][_0x4e0a6d(0x40c)](this,_0x4faad8,_0x4e6ff5),this[_0x4e0a6d(0x839)]();},VisuMZ[_0x2546c9(0x895)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x2546c9(0x79f)]['performCollapse'],Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x5ff)]=function(_0x59a39e){const _0x32184b=_0x2546c9;VisuMZ['BattleCore'][_0x32184b(0x3f3)][_0x32184b(0x40c)](this,_0x59a39e),this[_0x32184b(0x839)]();},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0xabf)]=function(_0x561408,_0x2ffb6b){const _0x480cb6=_0x2546c9;_0x561408[_0x480cb6(0xabf)](_0x2ffb6b),this[_0x480cb6(0x839)]();},Window_BattleLog['prototype'][_0x2546c9(0x47f)]=function(_0x396293,_0x2924d7){const _0x108857=_0x2546c9,_0x5df200=_0x396293[_0x108857(0x8b0)]();if(_0x5df200<=0x0){if(_0x108857(0x5ab)!==_0x108857(0x5ab)){if(!_0x15d09b['BattleCore']['Settings'][_0x108857(0x2f3)][_0x108857(0xa4d)])return _0x37c016;const _0x8d907e=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x108857(0x1ff)]()[_0x108857(0x4c1)][_0x108857(0x1e0)](_0x8d907e))return _0x3d92ad;if(this['subject']()[_0x108857(0x6b1)]()[_0x108857(0x335)](_0x13091a=>_0x13091a&&_0x13091a['note'][_0x108857(0x1e0)](_0x8d907e)))return _0x59ef75;const _0x36cb86=_0xbd9f5d<0x0?-0x1:0x1;_0x481bc2=_0x5da0c7[_0x108857(0x9d2)](_0x3d66f7);let _0x2abdde=this['subject']()['softDamageCapRate']();this[_0x108857(0x1ff)]()[_0x108857(0x4c1)][_0x108857(0x1e0)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x2abdde+=_0x14f8dc(_0x335984['$1'])/0x64);_0x2abdde=_0x2abdde[_0x108857(0x60b)](0.01,0x1);const _0x39c687=this[_0x108857(0x1ce)](),_0x31e9cc=_0x2abdde*_0x39c687;if(_0x132d1a>_0x31e9cc&&_0x39c687>_0x31e9cc){_0x3ab2a1-=_0x31e9cc;const _0x2864ec=_0x1fd3b1['BattleCore'][_0x108857(0x4b7)][_0x108857(0x2f3)][_0x108857(0x42e)],_0x4b400b=_0x4e64c6[_0x108857(0x556)](0x1-_0x3b841e/((_0x39c687-_0x31e9cc)*_0x2864ec+_0x18f204),0.01);_0xd021a6*=_0x4b400b,_0x3e2d7f+=_0x31e9cc;}return _0x186d79*_0x36cb86;}else SoundManager[_0x108857(0x407)]();}else _0x108857(0x6b8)!==_0x108857(0x6b8)?(_0x248574=(_0x291feb+_0x1e2588)/0x2,_0x41e811=-0x1):this['showNormalAnimation'](_0x2924d7,_0x5df200);},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x380)]=function(_0x33e37f,_0x2656f6,_0x1db1a3){const _0x2991bb=_0x2546c9,_0x1eb0c3=[_0x33e37f][_0x2991bb(0x1ee)](_0x2656f6);for(const _0xfbd8d8 of _0x1eb0c3){if(!_0xfbd8d8)continue;_0xfbd8d8[_0x2991bb(0x43f)](_0x1db1a3);}this['callNextMethod']();},Window_BattleLog['prototype'][_0x2546c9(0x40e)]=function(_0x27e8ce){const _0x44dc55=_0x2546c9;this[_0x44dc55(0x2d6)]=_0x27e8ce;},Window_BattleLog[_0x2546c9(0x79f)]['requestMotion']=function(_0x518768,_0x1feadc){for(const _0xd12ff5 of _0x518768){if(!_0xd12ff5)continue;_0xd12ff5['requestMotion'](_0x1feadc);}this['callNextMethod']();},Window_BattleLog['prototype'][_0x2546c9(0x4f4)]=function(_0x1bc89b,_0x3681bb,_0x3387f0,_0x9d991c,_0x373fb3,_0x368060){const _0x57c324=_0x2546c9;_0x1bc89b[_0x57c324(0x78e)](_0x3681bb,_0x3387f0,_0x9d991c,_0x373fb3,_0x368060,-0x1),this[_0x57c324(0x839)]();},Window_BattleLog['prototype']['performMoveToTargets']=function(_0x4d4b52,_0x4c6584,_0xa33196,_0x241e44,_0x149eb3,_0x3247fd,_0x156188){const _0x4abe07=_0x2546c9,_0x5a8612=Math[_0x4abe07(0xaaa)](..._0x4c6584[_0x4abe07(0x1b0)](_0x50d4bd=>_0x50d4bd[_0x4abe07(0x2dc)]()[_0x4abe07(0xa2f)]-_0x50d4bd[_0x4abe07(0x2dc)]()[_0x4abe07(0x62e)]()/0x2)),_0x246899=Math['max'](..._0x4c6584[_0x4abe07(0x1b0)](_0x3c967a=>_0x3c967a[_0x4abe07(0x2dc)]()['_baseX']+_0x3c967a[_0x4abe07(0x2dc)]()['mainSpriteWidth']()/0x2)),_0x500433=Math[_0x4abe07(0xaaa)](..._0x4c6584[_0x4abe07(0x1b0)](_0x30d0fe=>_0x30d0fe[_0x4abe07(0x2dc)]()[_0x4abe07(0x38a)]-_0x30d0fe[_0x4abe07(0x2dc)]()[_0x4abe07(0x617)]())),_0x2f609c=Math[_0x4abe07(0x556)](..._0x4c6584[_0x4abe07(0x1b0)](_0xda2443=>_0xda2443[_0x4abe07(0x2dc)]()['_baseY'])),_0x2d4908=_0x4c6584[_0x4abe07(0xae4)](_0x183004=>_0x183004[_0x4abe07(0x55e)]())[_0x4abe07(0x4ce)],_0x5c4d25=_0x4c6584[_0x4abe07(0xae4)](_0x4dbebf=>_0x4dbebf['isEnemy']())['length'];let _0x1dffd8=0x0,_0x40b3e4=0x0;if(_0xa33196[_0x4abe07(0x1e0)](/front/i))_0x1dffd8=_0x2d4908>=_0x5c4d25?_0x5a8612:_0x246899;else{if(_0xa33196[_0x4abe07(0x1e0)](/middle/i))_0x1dffd8=(_0x5a8612+_0x246899)/0x2,_0x156188=-0x1;else _0xa33196[_0x4abe07(0x1e0)](/back/i)&&(_0x1dffd8=_0x2d4908>=_0x5c4d25?_0x246899:_0x5a8612);}if(_0xa33196['match'](/head/i)){if(_0x4abe07(0x75c)!==_0x4abe07(0x75c))return _0x155c10['isActor']()?_0x1720bd[_0x4abe07(0xc6)]()[_0x4abe07(0x4ce)]||0x1:0x1;else _0x40b3e4=_0x500433;}else{if(_0xa33196['match'](/center/i))_0x40b3e4=(_0x500433+_0x2f609c)/0x2;else _0xa33196[_0x4abe07(0x1e0)](/base/i)&&(_0x40b3e4=_0x2f609c);}_0x4d4b52['moveBattlerToPoint'](_0x1dffd8,_0x40b3e4,_0x241e44,_0x149eb3,_0x3247fd,_0x156188),this['callNextMethod']();},Window_BattleLog[_0x2546c9(0x79f)][_0x2546c9(0x230)]=function(_0x2a3603,_0x407661,_0x59cea6){const _0x5cb958=_0x2546c9;for(const _0x4539da of _0x2a3603){if(!_0x4539da)continue;_0x4539da[_0x5cb958(0x6ed)](_0x407661,_0x59cea6);}this[_0x5cb958(0x839)]();};